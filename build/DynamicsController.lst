ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"DynamicsController.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/RobotController/Src/DynamicsController.cpp"
  20              		.section	.text._ZN18DynamicsControllerC2Eff,"ax",%progbits
  21              		.align	1
  22              		.global	_ZN18DynamicsControllerC2Eff
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_ZN18DynamicsControllerC2Eff:
  28              		.fnstart
  29              	.LVL0:
  30              	.LFB2073:
   1:Core/RobotController/Src/DynamicsController.cpp **** #include "../Inc/DynamicsController.hpp"
   2:Core/RobotController/Src/DynamicsController.cpp **** #include <cmath>
   3:Core/RobotController/Src/DynamicsController.cpp **** 
   4:Core/RobotController/Src/DynamicsController.cpp **** DynamicsController::DynamicsController(float wheelBase, float wheelDiameter)
  31              		.loc 1 4 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  36              	.LBB5:
   5:Core/RobotController/Src/DynamicsController.cpp ****     : m_wheelBase(wheelBase)
  37              		.loc 1 5 7 is_stmt 0 view .LVU1
  38 0000 80ED000A 		vstr.32	s0, [r0]
   6:Core/RobotController/Src/DynamicsController.cpp ****     , m_wheelDiameter(wheelDiameter)
  39              		.loc 1 6 7 view .LVU2
  40 0004 C0ED010A 		vstr.32	s1, [r0, #4]
   7:Core/RobotController/Src/DynamicsController.cpp ****     , m_leftErrorInt(0.0f)
  41              		.loc 1 7 7 view .LVU3
  42 0008 0022     		movs	r2, #0
  43 000a 8260     		str	r2, [r0, #8]	@ float
   8:Core/RobotController/Src/DynamicsController.cpp ****     , m_rightErrorInt(0.0f)
  44              		.loc 1 8 7 view .LVU4
  45 000c C260     		str	r2, [r0, #12]	@ float
   9:Core/RobotController/Src/DynamicsController.cpp ****     , m_yawErrorInt(0.0f)
  46              		.loc 1 9 7 view .LVU5
  47 000e 0261     		str	r2, [r0, #16]	@ float
  48              	.LBE5:
  10:Core/RobotController/Src/DynamicsController.cpp **** {
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 2


  11:Core/RobotController/Src/DynamicsController.cpp ****     // ÂøÖË¶Å„Å™„ÇâÂàùÊúüÂåñ
  12:Core/RobotController/Src/DynamicsController.cpp **** }
  49              		.loc 1 12 1 view .LVU6
  50 0010 7047     		bx	lr
  51              		.cfi_endproc
  52              	.LFE2073:
  53              		.cantunwind
  54              		.fnend
  56              		.global	_ZN18DynamicsControllerC1Eff
  57              		.thumb_set _ZN18DynamicsControllerC1Eff,_ZN18DynamicsControllerC2Eff
  58              		.section	.text._ZN18DynamicsController18computePWMForSpeedEff,"ax",%progbits
  59              		.align	1
  60              		.global	_ZN18DynamicsController18computePWMForSpeedEff
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  65              	_ZN18DynamicsController18computePWMForSpeedEff:
  66              		.fnstart
  67              	.LVL1:
  68              	.LFB2081:
  13:Core/RobotController/Src/DynamicsController.cpp **** 
  14:Core/RobotController/Src/DynamicsController.cpp **** std::pair<float, float> DynamicsController::update(
  15:Core/RobotController/Src/DynamicsController.cpp ****     const PathStep& step,
  16:Core/RobotController/Src/DynamicsController.cpp ****     float encLeft,
  17:Core/RobotController/Src/DynamicsController.cpp ****     float encRight,
  18:Core/RobotController/Src/DynamicsController.cpp ****     float gyroZ
  19:Core/RobotController/Src/DynamicsController.cpp **** ) {
  20:Core/RobotController/Src/DynamicsController.cpp ****     // 1. ÂÆüÈÄüÂ∫¶„ÇíÁÆóÂá∫(„Ç®„É≥„Ç≥„Éº„ÉÄ„Åã„Çâ)
  21:Core/RobotController/Src/DynamicsController.cpp ****     // ‰æã: encLeft, encRight „Çídt„ÅßÂâ≤„Å£„Å¶ Â∑¶Âè≥ËªäËº™ÈÄüÂ∫¶[currentSpeedL, currentSpeedR]„Çí
  22:Core/RobotController/Src/DynamicsController.cpp ****     //     „Åì„Åì„Åß„ÅØ‰ªÆ„ÅÆÂÄ§
  23:Core/RobotController/Src/DynamicsController.cpp ****     float currentSpeedL = 0.0f;
  24:Core/RobotController/Src/DynamicsController.cpp ****     float currentSpeedR = 0.0f;
  25:Core/RobotController/Src/DynamicsController.cpp **** 
  26:Core/RobotController/Src/DynamicsController.cpp ****     float currentLinVel = (currentSpeedL + currentSpeedR) * 0.5f; // Â∑¶Âè≥Âπ≥Âùá
  27:Core/RobotController/Src/DynamicsController.cpp ****     float currentAngVel = gyroZ; // „Ç∏„É£„Ç§„É≠Z„ÇíËßíÈÄüÂ∫¶„Å®‰ªÆÂÆö (rad/s)
  28:Core/RobotController/Src/DynamicsController.cpp **** 
  29:Core/RobotController/Src/DynamicsController.cpp ****     // 2. ÁõÆÊ®ôÈÄüÂ∫¶ & ËßíÈÄüÂ∫¶
  30:Core/RobotController/Src/DynamicsController.cpp ****     float targetLinVel = step.speed;             // Áõ¥ÈÄ≤Áî®ÈÄüÂ∫¶(„Åæ„Åü„ÅØ„Åù„ÅÆÂ†¥ÊóãÂõû„Åß„ÇÇÂ
  31:Core/RobotController/Src/DynamicsController.cpp ****     float targetAngVel = step.angularVelocity;   // „Çø„Éº„É≥ÊôÇ„ÅÆËßíÈÄüÂ∫¶
  32:Core/RobotController/Src/DynamicsController.cpp **** 
  33:Core/RobotController/Src/DynamicsController.cpp ****     // 3. ÈÄüÂ∫¶Âà∂Âæ° (Áõ¥ÈÄ≤ÊñπÂêë)
  34:Core/RobotController/Src/DynamicsController.cpp ****     float linControl = computePWMForSpeed(targetLinVel, currentLinVel);
  35:Core/RobotController/Src/DynamicsController.cpp ****     // 4. ËßíÈÄüÂ∫¶Âà∂Âæ° (ÊóãÂõûÊñπÂêë)
  36:Core/RobotController/Src/DynamicsController.cpp ****     float angControl = computePWMForAngle(targetAngVel, currentAngVel);
  37:Core/RobotController/Src/DynamicsController.cpp **** 
  38:Core/RobotController/Src/DynamicsController.cpp ****     // 5. „É¢„Éº„ÇøÊåá‰ª§ (Â∑¶Âè≥ËªäËº™ÈÄüÂ∫¶Â∑Æ„Å´„Çà„ÇäÊóãÂõû„ÇíÁîü„ÇÄ)
  39:Core/RobotController/Src/DynamicsController.cpp ****     //    ‰æã„Åà„Å∞ leftMotor = linControl - angControl / 2
  40:Core/RobotController/Src/DynamicsController.cpp ****     //             rightMotor= linControl + angControl / 2
  41:Core/RobotController/Src/DynamicsController.cpp ****     //    „Åì„Åì„ÅØ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆËªä‰Ωì„É¢„Éá„É´Ê¨°Á¨¨„ÅßÊõ∏„ÅçÊñπ„ÅåÂ§â„Çè„Çã
  42:Core/RobotController/Src/DynamicsController.cpp ****     float leftPWM  = linControl - angControl * 0.5f;
  43:Core/RobotController/Src/DynamicsController.cpp ****     float rightPWM = linControl + angControl * 0.5f;
  44:Core/RobotController/Src/DynamicsController.cpp **** 
  45:Core/RobotController/Src/DynamicsController.cpp ****     // 6. È£ΩÂíåÂá¶ÁêÜ ( step.speedSaturation „Å™„Å©„ÇÇÂèÇËÄÉ„Å´„Åô„Çã„Å™„Çâ„Åì„Åì )
  46:Core/RobotController/Src/DynamicsController.cpp ****     if (leftPWM  > 1.0f) leftPWM  = 1.0f;
  47:Core/RobotController/Src/DynamicsController.cpp ****     if (leftPWM  < -1.0f) leftPWM  = -1.0f;
  48:Core/RobotController/Src/DynamicsController.cpp ****     if (rightPWM > 1.0f) rightPWM = 1.0f;
  49:Core/RobotController/Src/DynamicsController.cpp ****     if (rightPWM < -1.0f) rightPWM = -1.0f;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 3


  50:Core/RobotController/Src/DynamicsController.cpp **** 
  51:Core/RobotController/Src/DynamicsController.cpp ****     return { leftPWM, rightPWM };
  52:Core/RobotController/Src/DynamicsController.cpp **** }
  53:Core/RobotController/Src/DynamicsController.cpp **** 
  54:Core/RobotController/Src/DynamicsController.cpp **** float DynamicsController::computePWMForSpeed(float targetSpeed, float currentSpeed) {
  69              		.loc 1 54 85 is_stmt 1 view -0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              		@ link register save eliminated.
  55:Core/RobotController/Src/DynamicsController.cpp ****     // Á∞°ÊòìPID‰æã (P„ÅÆ„Åø)
  56:Core/RobotController/Src/DynamicsController.cpp ****     float Kp = 0.01f;
  74              		.loc 1 56 5 view .LVU8
  57:Core/RobotController/Src/DynamicsController.cpp ****     float Ki = 0.0f;
  75              		.loc 1 57 5 view .LVU9
  58:Core/RobotController/Src/DynamicsController.cpp ****     float Kd = 0.0f;
  76              		.loc 1 58 5 view .LVU10
  59:Core/RobotController/Src/DynamicsController.cpp ****     float error = targetSpeed - currentSpeed;
  77              		.loc 1 59 5 view .LVU11
  78              		.loc 1 59 11 is_stmt 0 view .LVU12
  79 0000 30EE600A 		vsub.f32	s0, s0, s1
  80              	.LVL2:
  60:Core/RobotController/Src/DynamicsController.cpp ****     float pwm = Kp * error;
  81              		.loc 1 60 5 is_stmt 1 view .LVU13
  61:Core/RobotController/Src/DynamicsController.cpp ****     return pwm;
  82              		.loc 1 61 5 view .LVU14
  62:Core/RobotController/Src/DynamicsController.cpp **** }
  83              		.loc 1 62 1 is_stmt 0 view .LVU15
  84 0004 DFED027A 		vldr.32	s15, .L3
  85 0008 20EE270A 		vmul.f32	s0, s0, s15
  86              	.LVL3:
  87              		.loc 1 62 1 view .LVU16
  88 000c 7047     		bx	lr
  89              	.L4:
  90 000e 00BF     		.align	2
  91              	.L3:
  92 0010 0AD7233C 		.word	1008981770
  93              		.cfi_endproc
  94              	.LFE2081:
  95              		.cantunwind
  96              		.fnend
  98              		.section	.text._ZN18DynamicsController18computePWMForAngleEff,"ax",%progbits
  99              		.align	1
 100              		.global	_ZN18DynamicsController18computePWMForAngleEff
 101              		.syntax unified
 102              		.thumb
 103              		.thumb_func
 105              	_ZN18DynamicsController18computePWMForAngleEff:
 106              		.fnstart
 107              	.LVL4:
 108              	.LFB2082:
  63:Core/RobotController/Src/DynamicsController.cpp **** 
  64:Core/RobotController/Src/DynamicsController.cpp **** float DynamicsController::computePWMForAngle(float targetAngVel, float currentAngVel) {
 109              		.loc 1 64 87 is_stmt 1 view -0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 4


 113              		@ link register save eliminated.
  65:Core/RobotController/Src/DynamicsController.cpp ****     // Á∞°ÊòìPID‰æã (P„ÅÆ„Åø)
  66:Core/RobotController/Src/DynamicsController.cpp ****     float Kp_yaw = 0.01f;
 114              		.loc 1 66 5 view .LVU18
  67:Core/RobotController/Src/DynamicsController.cpp ****     float error = targetAngVel - currentAngVel;
 115              		.loc 1 67 5 view .LVU19
 116              		.loc 1 67 11 is_stmt 0 view .LVU20
 117 0000 30EE600A 		vsub.f32	s0, s0, s1
 118              	.LVL5:
  68:Core/RobotController/Src/DynamicsController.cpp ****     float pwm = Kp_yaw * error;
 119              		.loc 1 68 5 is_stmt 1 view .LVU21
  69:Core/RobotController/Src/DynamicsController.cpp ****     return pwm;
 120              		.loc 1 69 5 view .LVU22
  70:Core/RobotController/Src/DynamicsController.cpp **** }
 121              		.loc 1 70 1 is_stmt 0 view .LVU23
 122 0004 DFED027A 		vldr.32	s15, .L6
 123 0008 20EE270A 		vmul.f32	s0, s0, s15
 124              	.LVL6:
 125              		.loc 1 70 1 view .LVU24
 126 000c 7047     		bx	lr
 127              	.L7:
 128 000e 00BF     		.align	2
 129              	.L6:
 130 0010 0AD7233C 		.word	1008981770
 131              		.cfi_endproc
 132              	.LFE2082:
 133              		.cantunwind
 134              		.fnend
 136              		.section	.text._ZN18DynamicsController6updateERK8PathStepfff,"ax",%progbits
 137              		.align	1
 138              		.global	_ZN18DynamicsController6updateERK8PathStepfff
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 143              	_ZN18DynamicsController6updateERK8PathStepfff:
 144              		.fnstart
 145              	.LVL7:
 146              	.LFB2076:
  19:Core/RobotController/Src/DynamicsController.cpp ****     // 1. ÂÆüÈÄüÂ∫¶„ÇíÁÆóÂá∫(„Ç®„É≥„Ç≥„Éº„ÉÄ„Åã„Çâ)
 147              		.loc 1 19 3 is_stmt 1 view -0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 24
 150              		@ frame_needed = 0, uses_anonymous_args = 0
  19:Core/RobotController/Src/DynamicsController.cpp ****     // 1. ÂÆüÈÄüÂ∫¶„ÇíÁÆóÂá∫(„Ç®„É≥„Ç≥„Éº„ÉÄ„Åã„Çâ)
 151              		.loc 1 19 3 is_stmt 0 view .LVU26
 152 0000 10B5     		push	{r4, lr}
 153              	.LCFI0:
 154              		.cfi_def_cfa_offset 8
 155              		.cfi_offset 4, -8
 156              		.cfi_offset 14, -4
 157 0002 2DED048B 		vpush.64	{d8, d9}
 158              	.LCFI1:
 159              		.cfi_def_cfa_offset 24
 160              		.cfi_offset 80, -24
 161              		.cfi_offset 81, -20
 162              		.cfi_offset 82, -16
 163              		.cfi_offset 83, -12
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 5


 164 0006 86B0     		sub	sp, sp, #24
 165              	.LCFI2:
 166              		.cfi_def_cfa_offset 48
 167 0008 0446     		mov	r4, r0
 168 000a F0EE418A 		vmov.f32	s17, s2
  23:Core/RobotController/Src/DynamicsController.cpp ****     float currentSpeedR = 0.0f;
 169              		.loc 1 23 5 is_stmt 1 view .LVU27
 170              	.LVL8:
  24:Core/RobotController/Src/DynamicsController.cpp **** 
 171              		.loc 1 24 5 view .LVU28
  26:Core/RobotController/Src/DynamicsController.cpp ****     float currentAngVel = gyroZ; // „Ç∏„É£„Ç§„É≠Z„ÇíËßíÈÄüÂ∫¶„Å®‰ªÆÂÆö (rad/s)
 172              		.loc 1 26 5 view .LVU29
  27:Core/RobotController/Src/DynamicsController.cpp **** 
 173              		.loc 1 27 5 view .LVU30
  30:Core/RobotController/Src/DynamicsController.cpp ****     float targetAngVel = step.angularVelocity;   // „Çø„Éº„É≥ÊôÇ„ÅÆËßíÈÄüÂ∫¶
 174              		.loc 1 30 5 view .LVU31
  31:Core/RobotController/Src/DynamicsController.cpp **** 
 175              		.loc 1 31 5 view .LVU32
  31:Core/RobotController/Src/DynamicsController.cpp **** 
 176              		.loc 1 31 11 is_stmt 0 view .LVU33
 177 000e 91ED059A 		vldr.32	s18, [r1, #20]
 178              	.LVL9:
  34:Core/RobotController/Src/DynamicsController.cpp ****     // 4. ËßíÈÄüÂ∫¶Âà∂Âæ° (ÊóãÂõûÊñπÂêë)
 179              		.loc 1 34 5 is_stmt 1 view .LVU34
  34:Core/RobotController/Src/DynamicsController.cpp ****     // 4. ËßíÈÄüÂ∫¶Âà∂Âæ° (ÊóãÂõûÊñπÂêë)
 180              		.loc 1 34 42 is_stmt 0 view .LVU35
 181 0012 DFED270A 		vldr.32	s1, .L18
 182              	.LVL10:
  34:Core/RobotController/Src/DynamicsController.cpp ****     // 4. ËßíÈÄüÂ∫¶Âà∂Âæ° (ÊóãÂõûÊñπÂêë)
 183              		.loc 1 34 42 view .LVU36
 184 0016 91ED030A 		vldr.32	s0, [r1, #12]
 185              	.LVL11:
  34:Core/RobotController/Src/DynamicsController.cpp ****     // 4. ËßíÈÄüÂ∫¶Âà∂Âæ° (ÊóãÂõûÊñπÂêë)
 186              		.loc 1 34 42 view .LVU37
 187 001a FFF7FEFF 		bl	_ZN18DynamicsController18computePWMForSpeedEff
 188              	.LVL12:
  34:Core/RobotController/Src/DynamicsController.cpp ****     // 4. ËßíÈÄüÂ∫¶Âà∂Âæ° (ÊóãÂõûÊñπÂêë)
 189              		.loc 1 34 42 view .LVU38
 190 001e B0EE408A 		vmov.f32	s16, s0
 191              	.LVL13:
  36:Core/RobotController/Src/DynamicsController.cpp **** 
 192              		.loc 1 36 5 is_stmt 1 view .LVU39
  36:Core/RobotController/Src/DynamicsController.cpp **** 
 193              		.loc 1 36 42 is_stmt 0 view .LVU40
 194 0022 F0EE680A 		vmov.f32	s1, s17
 195 0026 B0EE490A 		vmov.f32	s0, s18
 196              	.LVL14:
  36:Core/RobotController/Src/DynamicsController.cpp **** 
 197              		.loc 1 36 42 view .LVU41
 198 002a 2046     		mov	r0, r4
 199 002c FFF7FEFF 		bl	_ZN18DynamicsController18computePWMForAngleEff
 200              	.LVL15:
  42:Core/RobotController/Src/DynamicsController.cpp ****     float rightPWM = linControl + angControl * 0.5f;
 201              		.loc 1 42 5 is_stmt 1 view .LVU42
  42:Core/RobotController/Src/DynamicsController.cpp ****     float rightPWM = linControl + angControl * 0.5f;
 202              		.loc 1 42 46 is_stmt 0 view .LVU43
 203 0030 F6EE007A 		vmov.f32	s15, #5.0e-1
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 6


 204 0034 60EE277A 		vmul.f32	s15, s0, s15
  42:Core/RobotController/Src/DynamicsController.cpp ****     float rightPWM = linControl + angControl * 0.5f;
 205              		.loc 1 42 33 view .LVU44
 206 0038 38EE677A 		vsub.f32	s14, s16, s15
 207              	.LVL16:
  43:Core/RobotController/Src/DynamicsController.cpp **** 
 208              		.loc 1 43 5 is_stmt 1 view .LVU45
  43:Core/RobotController/Src/DynamicsController.cpp **** 
 209              		.loc 1 43 33 is_stmt 0 view .LVU46
 210 003c 37EE880A 		vadd.f32	s0, s15, s16
 211              	.LVL17:
  46:Core/RobotController/Src/DynamicsController.cpp ****     if (leftPWM  < -1.0f) leftPWM  = -1.0f;
 212              		.loc 1 46 5 is_stmt 1 view .LVU47
 213 0040 F7EE007A 		vmov.f32	s15, #1.0e+0
 214 0044 B4EEE77A 		vcmpe.f32	s14, s15
 215 0048 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 216 004c 1CDD     		ble	.L16
  46:Core/RobotController/Src/DynamicsController.cpp ****     if (leftPWM  < -1.0f) leftPWM  = -1.0f;
 217              		.loc 1 46 35 is_stmt 0 discriminator 1 view .LVU48
 218 004e B7EE007A 		vmov.f32	s14, #1.0e+0
 219              	.LVL18:
 220              	.L9:
  48:Core/RobotController/Src/DynamicsController.cpp ****     if (rightPWM < -1.0f) rightPWM = -1.0f;
 221              		.loc 1 48 5 is_stmt 1 view .LVU49
 222 0052 F7EE007A 		vmov.f32	s15, #1.0e+0
 223 0056 B4EEE70A 		vcmpe.f32	s0, s15
 224 005a F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 225 005e 1DDD     		ble	.L17
  48:Core/RobotController/Src/DynamicsController.cpp ****     if (rightPWM < -1.0f) rightPWM = -1.0f;
 226              		.loc 1 48 35 is_stmt 0 discriminator 1 view .LVU50
 227 0060 B7EE000A 		vmov.f32	s0, #1.0e+0
 228              	.LVL19:
 229              	.L10:
  51:Core/RobotController/Src/DynamicsController.cpp **** }
 230              		.loc 1 51 5 is_stmt 1 view .LVU51
 231              	.LBB6:
 232              	.LBI6:
 233              		.file 2 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/stl_pair.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // Pair implementation -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 7


  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  *
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * Copyright (c) 1994
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * Hewlett-Packard Company
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  *
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * representations about the suitability of this software for any
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  *
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  *
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * Copyright (c) 1996,1997
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  *
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * representations about the suitability of this software for any
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  */
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** /** @file bits/stl_pair.h
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  */
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #ifndef _STL_PAIR_H
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #define _STL_PAIR_H 1
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus >= 201103L
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # include <type_traits>    // for std::__decay_and_strip
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # include <bits/move.h>    // for std::move / std::forward, and std::swap
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # include <bits/utility.h> // for std::tuple_element, std::tuple_size
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus >= 202002L
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # include <compare>
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # define __cpp_lib_constexpr_utility 201811L
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** {
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   /**
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *  @addtogroup utilities
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *  @{
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    */
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 8


  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus >= 201103L
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   /// Tag type for piecewise construction of std::pair objects.
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   struct piecewise_construct_t { explicit piecewise_construct_t() = default; };
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   /// Tag for piecewise construction of std::pair objects.
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     piecewise_construct_t();
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   /// @cond undocumented
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   // Forward declarations.
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   template<typename...>
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     class tuple;
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   template<size_t...>
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     struct _Index_tuple;
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if ! __cpp_lib_concepts
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   // Concept utility functions, reused in conditionally-explicit
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   // constructors.
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   // See PR 70437, don't look at is_constructible or
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   // is_convertible if the types are the same to
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   // avoid querying those properties for incomplete types.
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   template <bool, typename _T1, typename _T2>
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     struct _PCC
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     {
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _ConstructiblePair()
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return __and_<is_constructible<_T1, const _U1&>,
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		      is_constructible<_T2, const _U2&>>::value;
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return __and_<is_convertible<const _U1&, _T1>,
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		      is_convertible<const _U2&, _T2>>::value;
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return __and_<is_constructible<_T1, _U1&&>,
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		      is_constructible<_T2, _U2&&>>::value;
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return __and_<is_convertible<_U1&&, _T1>,
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		      is_convertible<_U2&&, _T2>>::value;
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     };
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   template <typename _T1, typename _T2>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 9


 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     struct _PCC<false, _T1, _T2>
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     {
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _ConstructiblePair()
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return false;
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _ImplicitlyConvertiblePair()
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return false;
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _MoveConstructiblePair()
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return false;
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       static constexpr bool _ImplicitlyMoveConvertiblePair()
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return false;
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     };
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif // lib concepts
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif // C++11
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   template<typename _U1, typename _U2> class __pair_base
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   {
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus >= 201103L && ! __cpp_lib_concepts
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     template<typename _T1, typename _T2> friend struct pair;
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     __pair_base() = default;
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     ~__pair_base() = default;
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     __pair_base(const __pair_base&) = default;
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     __pair_base& operator=(const __pair_base&) = delete;
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif // C++11
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   };
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   /// @endcond
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****  /**
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *  @tparam _T1  Type of first object.
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *  @tparam _T2  Type of second object.
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *  <https://gcc.gnu.org/onlinedocs/libstdc++/manual/utilities.html>
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    *
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    * @headerfile utility
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****    */
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   template<typename _T1, typename _T2>
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     struct pair
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     : public __pair_base<_T1, _T2>
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     {
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       typedef _T1 first_type;    ///< The type of the `first` member
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 10


 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       typedef _T2 second_type;   ///< The type of the `second` member
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       _T1 first;                 ///< The first member
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       _T2 second;                ///< The second member
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus >= 201103L
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr pair(const pair&) = default;	///< Copy constructor
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr pair(pair&&) = default;		///< Move constructor
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename... _Args1, typename... _Args2>
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);
 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Swap the first members and then the second members.
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       _GLIBCXX20_CONSTEXPR void
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       swap(pair& __p)
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       noexcept(__and_<__is_nothrow_swappable<_T1>,
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		      __is_nothrow_swappable<_T2>>::value)
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	using std::swap;
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	swap(first, __p.first);
 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	swap(second, __p.second);
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus > 202002L
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // As an extension, we constrain the const swap member function in order
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // to continue accepting explicit instantiation of pairs whose elements
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // are not all const swappable.  Without this constraint, such an
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // explicit instantiation would also instantiate the ill-formed body of
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // this function and yield a hard error.  This constraint shouldn't
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // affect the behavior of valid programs.
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr void
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       swap(const pair& __p) const
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       noexcept(__and_v<__is_nothrow_swappable<const _T1>,
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		       __is_nothrow_swappable<const _T2>>)
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       requires is_swappable_v<const _T1> && is_swappable_v<const _T2>
 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	using std::swap;
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	swap(first, __p.first);
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	swap(second, __p.second);
 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif // C++23
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     private:
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename... _Args1, size_t... _Indexes1,
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       typename... _Args2, size_t... _Indexes2>
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_GLIBCXX20_CONSTEXPR
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(tuple<_Args1...>&, tuple<_Args2...>&,
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	     _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>);
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     public:
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cpp_lib_concepts
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // C++20 implementation using concepts, explicit(bool), fully constexpr.
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Default constructor
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       explicit(__not_<__and_<__is_implicitly_default_constructible<_T1>,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 11


 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			     __is_implicitly_default_constructible<_T2>>>())
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       pair()
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       requires is_default_constructible_v<_T1>
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       && is_default_constructible_v<_T2>
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       : first(), second()
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       { }
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     private:
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @cond undocumented
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	static constexpr bool
 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_S_constructible()
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  if constexpr (is_constructible_v<_T1, _U1>)
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	    return is_constructible_v<_T2, _U2>;
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return false;
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	static constexpr bool
 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_S_nothrow_constructible()
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  if constexpr (is_nothrow_constructible_v<_T1, _U1>)
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	    return is_nothrow_constructible_v<_T2, _U2>;
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return false;
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	static constexpr bool
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_S_convertible()
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  if constexpr (is_convertible_v<_U1, _T1>)
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	    return is_convertible_v<_U2, _T2>;
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return false;
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // True if construction from _U1 and _U2 would create a dangling ref.
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	static constexpr bool
 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_S_dangles()
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __has_builtin(__reference_constructs_from_temporary)
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  if constexpr (__reference_constructs_from_temporary(_T1, _U1&&))
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	    return true;
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  else
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	    return __reference_constructs_from_temporary(_T2, _U2&&);
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #else
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return false;
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @endcond
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     public:
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Constructor accepting lvalues of `first_type` and `second_type`
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr explicit(!_S_convertible<const _T1&, const _T2&>())
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 12


 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       pair(const _T1& __x, const _T2& __y)
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       noexcept(_S_nothrow_constructible<const _T1&, const _T2&>())
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       requires (_S_constructible<const _T1&, const _T2&>())
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       : first(__x), second(__y)
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       { }
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Constructor accepting two values of arbitrary types
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<_U1, _U2>()) && (!_S_dangles<_U1, _U2>())
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<_U1, _U2>())
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(_U1&& __x, _U2&& __y)
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	noexcept(_S_nothrow_constructible<_U1, _U2>())
 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ }
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<_U1, _U2>()) && (_S_dangles<_U1, _U2>())
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<_U1, _U2>())
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(_U1&&, _U2&&) = delete;
 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting constructor from a const `pair<U1, U2>` lvalue
 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<const _U1&, const _U2&>())
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  && (!_S_dangles<_U1, _U2>())
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<const _U1&, const _U2&>())
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(const pair<_U1, _U2>& __p)
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	noexcept(_S_nothrow_constructible<const _U1&, const _U2&>())
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(__p.first), second(__p.second)
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ }
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<const _U1&, const _U2&>())
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	      && (_S_dangles<const _U1&, const _U2&>())
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<const _U1&, const _U2&>())
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(const pair<_U1, _U2>&) = delete;
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting constructor from a non-const `pair<U1, U2>` rvalue
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<_U1, _U2>()) && (!_S_dangles<_U1, _U2>())
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<_U1, _U2>())
 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(pair<_U1, _U2>&& __p)
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	noexcept(_S_nothrow_constructible<_U1, _U2>())
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(std::forward<_U1>(__p.first)),
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  second(std::forward<_U2>(__p.second))
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ }
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<_U1, _U2>()) && (_S_dangles<_U1, _U2>())
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<_U1, _U2>())
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(pair<_U1, _U2>&&) = delete;
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus > 202002L
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting constructor from a non-const `pair<U1, U2>` lvalue
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<_U1&, _U2&>()) && (!_S_dangles<_U1&, _U2&>())
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<_U1&, _U2&>())
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(pair<_U1, _U2>& __p)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 13


 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	noexcept(_S_nothrow_constructible<_U1&, _U2&>())
 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(__p.first), second(__p.second)
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ }
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<_U1&, _U2&>()) && (_S_dangles<_U1&, _U2&>())
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<_U1&, _U2&>())
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(pair<_U1, _U2>&) = delete;
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting constructor from a const `pair<U1, U2>` rvalue
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<const _U1, const _U2>())
 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  && (!_S_dangles<const _U1, const _U2>())
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<const _U1, const _U2>())
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(const pair<_U1, _U2>&& __p)
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	noexcept(_S_nothrow_constructible<const _U1, const _U2>())
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(std::forward<const _U1>(__p.first)),
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  second(std::forward<const _U2>(__p.second))
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ }
 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_constructible<const _U1, const _U2>())
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  && (_S_dangles<const _U1, const _U2>())
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr explicit(!_S_convertible<const _U1, const _U2>())
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(const pair<_U1, _U2>&&) = delete;
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif // C++23
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   private:
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @cond undocumented
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	static constexpr bool
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_S_assignable()
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  if constexpr (is_assignable_v<_T1&, _U1>)
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	    return is_assignable_v<_T2&, _U2>;
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return false;
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	static constexpr bool
 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_S_nothrow_assignable()
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  if constexpr (is_nothrow_assignable_v<_T1&, _U1>)
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	    return is_nothrow_assignable_v<_T2&, _U2>;
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return false;
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @endcond
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   public:
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       pair& operator=(const pair&) = delete;
 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Copy assignment operator
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr pair&
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       operator=(const pair& __p)
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       noexcept(_S_nothrow_assignable<const _T1&, const _T2&>())
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       requires (_S_assignable<const _T1&, const _T2&>())
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 14


 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	first = __p.first;
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	second = __p.second;
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return *this;
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Move assignment operator
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr pair&
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       operator=(pair&& __p)
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       noexcept(_S_nothrow_assignable<_T1, _T2>())
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       requires (_S_assignable<_T1, _T2>())
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return *this;
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting assignment from a const `pair<U1, U2>` lvalue
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr pair&
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	operator=(const pair<_U1, _U2>& __p)
 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	noexcept(_S_nothrow_assignable<const _U1&, const _U2&>())
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_assignable<const _U1&, const _U2&>())
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  first = __p.first;
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  second = __p.second;
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return *this;
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting assignment from a non-const `pair<U1, U2>` rvalue
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr pair&
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	operator=(pair<_U1, _U2>&& __p)
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	noexcept(_S_nothrow_assignable<_U1, _U2>())
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires (_S_assignable<_U1, _U2>())
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  first = std::forward<_U1>(__p.first);
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  second = std::forward<_U2>(__p.second);
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return *this;
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __cplusplus > 202002L
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Copy assignment operator (const)
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr const pair&
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       operator=(const pair& __p) const
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       requires is_copy_assignable_v<const first_type>
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	&& is_copy_assignable_v<const second_type>
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	first = __p.first;
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	second = __p.second;
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return *this;
 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Move assignment operator (const)
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr const pair&
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       operator=(pair&& __p) const
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       requires is_assignable_v<const first_type&, first_type>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 15


 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	&& is_assignable_v<const second_type&, second_type>
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	first = std::forward<first_type>(__p.first);
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	second = std::forward<second_type>(__p.second);
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	return *this;
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       }
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting assignment from a const `pair<U1, U2>` lvalue
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr const pair&
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	operator=(const pair<_U1, _U2>& __p) const
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires is_assignable_v<const first_type&, const _U1&>
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  && is_assignable_v<const second_type&, const _U2&>
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  first = __p.first;
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  second = __p.second;
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return *this;
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Converting assignment from a non-const `pair<U1, U2>` rvalue
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2>
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr const pair&
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	operator=(pair<_U1, _U2>&& __p) const
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	requires is_assignable_v<const first_type&, _U1>
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  && is_assignable_v<const second_type&, _U2>
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  first = std::forward<_U1>(__p.first);
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  second = std::forward<_U2>(__p.second);
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	  return *this;
 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	}
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif // C++23
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #else // !__cpp_lib_concepts
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // C++11/14/17 implementation using enable_if, partially constexpr.
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @cond undocumented
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // Error if construction from _U1 and _U2 would create a dangling ref.
 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if __has_builtin(__reference_constructs_from_temporary) \
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       && defined _GLIBCXX_DEBUG
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # define __glibcxx_no_dangling_refs(_U1, _U2) \
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****   static_assert(!__reference_constructs_from_temporary(_T1, _U1) \
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       && !__reference_constructs_from_temporary(_T2, _U2), \
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		"std::pair constructor creates a dangling reference")
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #else
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # define __glibcxx_no_dangling_refs(_U1, _U2)
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @endcond
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****        *  respective default constructors.  */
 525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1 = _T1,
 526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                 typename _U2 = _T2,
 527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                 typename enable_if<__and_<
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                                      __is_implicitly_default_constructible<_U1>,
 529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                                      __is_implicitly_default_constructible<_U2>>
 530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                                    ::value, bool>::type = true>
 531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr pair()
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       : first(), second() { }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 16


 533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1 = _T1,
 535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                 typename _U2 = _T2,
 536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                 typename enable_if<__and_<
 537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                        is_default_constructible<_U1>,
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                        is_default_constructible<_U2>,
 539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                        __not_<
 540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                          __and_<__is_implicitly_default_constructible<_U1>,
 541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                                 __is_implicitly_default_constructible<_U2>>>>
 542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                                    ::value, bool>::type = false>
 543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       explicit constexpr pair()
 544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       : first(), second() { }
 545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // Shortcut for constraining the templates that don't take pairs.
 547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @cond undocumented
 548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       using _PCCP = _PCC<true, _T1, _T2>;
 549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @endcond
 550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Construct from two const lvalues, allowing implicit conversions.
 552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1 = _T1, typename _U2=_T2, typename
 553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       enable_if<_PCCP::template
 554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	                 && _PCCP::template
 556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                          bool>::type=true>
 558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       constexpr pair(const _T1& __a, const _T2& __b)
 559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       : first(__a), second(__b) { }
 560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// Construct from two const lvalues, disallowing implicit conversions.
 562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****        template<typename _U1 = _T1, typename _U2=_T2, typename
 563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		enable_if<_PCCP::template
 564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			    _ConstructiblePair<_U1, _U2>()
 565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	                  && !_PCCP::template
 566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			    _ImplicitlyConvertiblePair<_U1, _U2>(),
 567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                          bool>::type=false>
 568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       explicit constexpr pair(const _T1& __a, const _T2& __b)
 569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       : first(__a), second(__b) { }
 570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // Shortcut for constraining the templates that take pairs.
 572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @cond undocumented
 573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template <typename _U1, typename _U2>
 574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****         using _PCCFP = _PCC<!is_same<_T1, _U1>::value
 575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			    || !is_same<_T2, _U2>::value,
 576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			    _T1, _T2>;
 577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @endcond
 578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2, typename
 580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	                 && _PCCFP<_U1, _U2>::template
 583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			  bool>::type=true>
 585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr pair(const pair<_U1, _U2>& __p)
 586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(__p.first), second(__p.second)
 587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2, typename
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 17


 590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       enable_if<_PCCFP<_U1, _U2>::template
 591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _ConstructiblePair<_U1, _U2>()
 592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			 && !_PCCFP<_U1, _U2>::template
 593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _ImplicitlyConvertiblePair<_U1, _U2>(),
 594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                          bool>::type=false>
 595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	explicit constexpr pair(const pair<_U1, _U2>& __p)
 596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(__p.first), second(__p.second)
 597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ __glibcxx_no_dangling_refs(const _U1&, const _U2&); }
 598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if _GLIBCXX_USE_DEPRECATED
 600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #if defined(__DEPRECATED)
 601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # define _GLIBCXX_DEPRECATED_PAIR_CTOR \
 602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       __attribute__ ((__deprecated__ ("use 'nullptr' instead of '0' to " \
 603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				      "initialize std::pair of move-only " \
 604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				      "type and pointer")))
 605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #else
 606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** # define _GLIBCXX_DEPRECATED_PAIR_CTOR
 607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif
 608:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 609:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     private:
 610:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @cond undocumented
 611:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 612:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // A type which can be constructed from literal zero, but not nullptr
 613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       struct __zero_as_null_pointer_constant
 614:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       {
 615:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	__zero_as_null_pointer_constant(int __zero_as_null_pointer_constant::*)
 616:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ }
 617:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	template<typename _Tp,
 618:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 		 typename = __enable_if_t<is_null_pointer<_Tp>::value>>
 619:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	__zero_as_null_pointer_constant(_Tp) = delete;
 620:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       };
 621:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       /// @endcond
 622:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****     public:
 623:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // Deprecated extensions to DR 811.
 625:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // These allow construction from an rvalue and a literal zero,
 626:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       // in cases where the standard says the zero should be deduced as int
 627:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1,
 628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       __enable_if_t<__and_<__not_<is_reference<_U1>>,
 629:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_pointer<_T2>,
 630:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_constructible<_T1, _U1>,
 631:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_constructible<_T1, const _U1&>>,
 632:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_convertible<_U1, _T1>>::value,
 633:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			     bool> = true>
 634:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_GLIBCXX_DEPRECATED_PAIR_CTOR
 635:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr
 636:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(_U1&& __x, __zero_as_null_pointer_constant, ...)
 637:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(nullptr)
 638:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ __glibcxx_no_dangling_refs(_U1&&, std::nullptr_t); }
 639:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 640:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1,
 641:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       __enable_if_t<__and_<__not_<is_reference<_U1>>,
 642:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_pointer<_T2>,
 643:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_constructible<_T1, _U1>,
 644:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_constructible<_T1, const _U1&>>,
 645:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_convertible<_U1, _T1>>>::value,
 646:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			     bool> = false>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 18


 647:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_GLIBCXX_DEPRECATED_PAIR_CTOR
 648:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	explicit constexpr
 649:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(_U1&& __x, __zero_as_null_pointer_constant, ...)
 650:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(nullptr)
 651:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ __glibcxx_no_dangling_refs(_U1&&, std::nullptr_t); }
 652:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 653:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U2,
 654:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       __enable_if_t<__and_<is_pointer<_T1>,
 655:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_reference<_U2>>,
 656:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_constructible<_T2, _U2>,
 657:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_constructible<_T2, const _U2&>>,
 658:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_convertible<_U2, _T2>>::value,
 659:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			     bool> = true>
 660:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_GLIBCXX_DEPRECATED_PAIR_CTOR
 661:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr
 662:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(__zero_as_null_pointer_constant, _U2&& __y, ...)
 663:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(nullptr), second(std::forward<_U2>(__y))
 664:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ __glibcxx_no_dangling_refs(std::nullptr_t, _U2&&); }
 665:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 666:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U2,
 667:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       __enable_if_t<__and_<is_pointer<_T1>,
 668:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_reference<_U2>>,
 669:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    is_constructible<_T2, _U2>,
 670:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_constructible<_T2, const _U2&>>,
 671:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 				    __not_<is_convertible<_U2, _T2>>>::value,
 672:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			     bool> = false>
 673:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	_GLIBCXX_DEPRECATED_PAIR_CTOR
 674:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	explicit constexpr
 675:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	pair(__zero_as_null_pointer_constant, _U2&& __y, ...)
 676:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(nullptr), second(std::forward<_U2>(__y))
 677:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	{ __glibcxx_no_dangling_refs(std::nullptr_t, _U2&&); }
 678:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #undef _GLIBCXX_DEPRECATED_PAIR_CTOR
 679:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** #endif
 680:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 
 681:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****       template<typename _U1, typename _U2, typename
 682:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	       enable_if<_PCCP::template
 683:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _MoveConstructiblePair<_U1, _U2>()
 684:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			  && _PCCP::template
 685:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
 686:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h ****                          bool>::type=true>
 687:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	constexpr pair(_U1&& __x, _U2&& __y)
 234              		.loc 2 687 12 view .LVU52
 235              	.LBB7:
 236              	.LBB8:
 688:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_pair.h **** 	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y))
 237              		.loc 2 688 4 is_stmt 0 view .LVU53
 238 0064 8DED047A 		vstr.32	s14, [sp, #16]
 239              		.loc 2 688 35 view .LVU54
 240 0068 8DED050A 		vstr.32	s0, [sp, #20]
 241              	.LVL20:
 242              		.loc 2 688 35 view .LVU55
 243              	.LBE8:
 244              	.LBE7:
 245              	.LBE6:
  51:Core/RobotController/Src/DynamicsController.cpp **** }
 246              		.loc 1 51 32 discriminator 1 view .LVU56
 247 006c 02AB     		add	r3, sp, #8
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 19


 248 006e 06AA     		add	r2, sp, #24
 249 0070 12E90300 		ldmdb	r2, {r0, r1}
 250 0074 83E80300 		stm	r3, {r0, r1}
 251              	.LVL21:
  52:Core/RobotController/Src/DynamicsController.cpp **** 
 252              		.loc 1 52 1 view .LVU57
 253 0078 9DED020A 		vldr.32	s0, [sp, #8]
 254 007c DDED030A 		vldr.32	s1, [sp, #12]
 255 0080 06B0     		add	sp, sp, #24
 256              	.LCFI3:
 257              		.cfi_remember_state
 258              		.cfi_def_cfa_offset 24
 259              		@ sp needed
 260 0082 BDEC048B 		vldm	sp!, {d8-d9}
 261              	.LCFI4:
 262              		.cfi_restore 82
 263              		.cfi_restore 83
 264              		.cfi_restore 80
 265              		.cfi_restore 81
 266              		.cfi_def_cfa_offset 8
 267              	.LVL22:
  52:Core/RobotController/Src/DynamicsController.cpp **** 
 268              		.loc 1 52 1 view .LVU58
 269 0086 10BD     		pop	{r4, pc}
 270              	.LVL23:
 271              	.L16:
 272              	.LCFI5:
 273              		.cfi_restore_state
  47:Core/RobotController/Src/DynamicsController.cpp ****     if (rightPWM > 1.0f) rightPWM = 1.0f;
 274              		.loc 1 47 5 is_stmt 1 view .LVU59
 275 0088 FFEE007A 		vmov.f32	s15, #-1.0e+0
 276 008c B4EEE77A 		vcmpe.f32	s14, s15
 277 0090 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 278 0094 DDD5     		bpl	.L9
  47:Core/RobotController/Src/DynamicsController.cpp ****     if (rightPWM > 1.0f) rightPWM = 1.0f;
 279              		.loc 1 47 36 is_stmt 0 discriminator 1 view .LVU60
 280 0096 BFEE007A 		vmov.f32	s14, #-1.0e+0
 281              	.LVL24:
  47:Core/RobotController/Src/DynamicsController.cpp ****     if (rightPWM > 1.0f) rightPWM = 1.0f;
 282              		.loc 1 47 36 discriminator 1 view .LVU61
 283 009a DAE7     		b	.L9
 284              	.LVL25:
 285              	.L17:
  49:Core/RobotController/Src/DynamicsController.cpp **** 
 286              		.loc 1 49 5 is_stmt 1 view .LVU62
 287 009c FFEE007A 		vmov.f32	s15, #-1.0e+0
 288 00a0 B4EEE70A 		vcmpe.f32	s0, s15
 289 00a4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 290 00a8 DCD5     		bpl	.L10
  49:Core/RobotController/Src/DynamicsController.cpp **** 
 291              		.loc 1 49 36 is_stmt 0 discriminator 1 view .LVU63
 292 00aa BFEE000A 		vmov.f32	s0, #-1.0e+0
 293              	.LVL26:
  49:Core/RobotController/Src/DynamicsController.cpp **** 
 294              		.loc 1 49 36 discriminator 1 view .LVU64
 295 00ae D9E7     		b	.L10
 296              	.L19:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 20


 297              		.align	2
 298              	.L18:
 299 00b0 00000000 		.word	0
 300              		.cfi_endproc
 301              	.LFE2076:
 302              		.cantunwind
 303              		.fnend
 305              		.text
 306              	.Letext0:
 307              		.file 3 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/type_traits"
 308              		.file 4 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/debug/debug.h"
 309              		.file 5 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/cstddef"
 310              		.file 6 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/cstdint"
 311              		.file 7 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/cmath"
 312              		.file 8 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/arm-none-eabi/thumb/v7e-m+fp/
 313              		.file 9 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/predefined_ops.h"
 314              		.file 10 "C:/Tools/arm-gnu-toolchain/lib/gcc/arm-none-eabi/13.2.1/include/stddef.h"
 315              		.file 11 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 316              		.file 12 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 317              		.file 13 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/stdint.h"
 318              		.file 14 "Core/RobotController/Src/../Inc/Path.hpp"
 319              		.file 15 "Core/RobotController/Src/../Inc/DynamicsController.hpp"
 320              		.file 16 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/math.h"
 321              		.file 17 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/memory_resource.h"
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s 			page 21


DEFINED SYMBOLS
                            *ABS*:00000000 DynamicsController.cpp
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:21     .text._ZN18DynamicsControllerC2Eff:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:27     .text._ZN18DynamicsControllerC2Eff:00000000 _ZN18DynamicsControllerC2Eff
.ARM.exidx.text._ZN18DynamicsControllerC2Eff:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:27     .text._ZN18DynamicsControllerC2Eff:00000000 _ZN18DynamicsControllerC1Eff
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:59     .text._ZN18DynamicsController18computePWMForSpeedEff:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:65     .text._ZN18DynamicsController18computePWMForSpeedEff:00000000 _ZN18DynamicsController18computePWMForSpeedEff
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:92     .text._ZN18DynamicsController18computePWMForSpeedEff:00000010 $d
.ARM.exidx.text._ZN18DynamicsController18computePWMForSpeedEff:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:99     .text._ZN18DynamicsController18computePWMForAngleEff:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:105    .text._ZN18DynamicsController18computePWMForAngleEff:00000000 _ZN18DynamicsController18computePWMForAngleEff
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:130    .text._ZN18DynamicsController18computePWMForAngleEff:00000010 $d
.ARM.exidx.text._ZN18DynamicsController18computePWMForAngleEff:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:137    .text._ZN18DynamicsController6updateERK8PathStepfff:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:143    .text._ZN18DynamicsController6updateERK8PathStepfff:00000000 _ZN18DynamicsController6updateERK8PathStepfff
C:\Users\hanaj\AppData\Local\Temp\cch55sUd.s:299    .text._ZN18DynamicsController6updateERK8PathStepfff:000000b0 $d
.ARM.exidx.text._ZN18DynamicsController6updateERK8PathStepfff:00000000 $d

NO UNDEFINED SYMBOLS
