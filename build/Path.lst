ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"Path.cpp"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "Core/RobotController/Src/Path.cpp"
  20              		.section	.text._ZN4Path13optimizeTurnsEv,"ax",%progbits
  21              		.align	1
  22              		.global	_ZN4Path13optimizeTurnsEv
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	_ZN4Path13optimizeTurnsEv:
  28              		.fnstart
  29              	.LVL0:
  30              	.LFB1271:
   1:Core/RobotController/Src/Path.cpp **** #include "../Inc/Path.hpp"
   2:Core/RobotController/Src/Path.cpp **** 
   3:Core/RobotController/Src/Path.cpp **** void Path::addStraight(float distance) {
   4:Core/RobotController/Src/Path.cpp ****     // „ÇÇ„ÅóÈÄ£Á∂ö„Åß Straight „ÇíËøΩÂä†„Åô„Çã„Å™„Çâ„ÄÅÂæå„Çç„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Å®„Éû„Éº„Ç∏„Åó„Å¶„ÇÇ„
   5:Core/RobotController/Src/Path.cpp ****     // „Åü„Å†„Åó„ÄÅÂúßÁ∏Æ„ÅØÂà•„É°„ÇΩ„ÉÉ„Éâ compressPath() „Å´„Åæ„Å®„ÇÅ„Å¶„ÇÇOK
   6:Core/RobotController/Src/Path.cpp ****     if (!m_steps.empty()) {
   7:Core/RobotController/Src/Path.cpp ****         PathStep& last = m_steps.back();
   8:Core/RobotController/Src/Path.cpp ****         if (last.stepType == StepType::Straight) {
   9:Core/RobotController/Src/Path.cpp ****             // Âæå„Çç„Åå Straight „Å™„ÇâË∑ùÈõ¢„ÇíÂä†ÁÆó
  10:Core/RobotController/Src/Path.cpp ****             last.distance += distance;
  11:Core/RobotController/Src/Path.cpp ****             return;
  12:Core/RobotController/Src/Path.cpp ****         }
  13:Core/RobotController/Src/Path.cpp ****     }
  14:Core/RobotController/Src/Path.cpp ****     // Êñ∞„Åó„ÅèËøΩÂä†
  15:Core/RobotController/Src/Path.cpp ****     PathStep step;
  16:Core/RobotController/Src/Path.cpp ****     step.stepType = StepType::Straight;
  17:Core/RobotController/Src/Path.cpp ****     step.distance = distance;
  18:Core/RobotController/Src/Path.cpp ****     m_steps.push_back(step);
  19:Core/RobotController/Src/Path.cpp **** }
  20:Core/RobotController/Src/Path.cpp **** 
  21:Core/RobotController/Src/Path.cpp **** void Path::addTurn(StepType turnType) {
  22:Core/RobotController/Src/Path.cpp ****     // „Åì„Åì„Åß„ÅØ distance=0 „Å®„Åó„Å¶Ê†ºÁ¥ç
  23:Core/RobotController/Src/Path.cpp ****     PathStep step;
  24:Core/RobotController/Src/Path.cpp ****     step.stepType = turnType;
  25:Core/RobotController/Src/Path.cpp ****     step.distance = 0;
  26:Core/RobotController/Src/Path.cpp ****     m_steps.push_back(step);
  27:Core/RobotController/Src/Path.cpp **** }
  28:Core/RobotController/Src/Path.cpp **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 2


  29:Core/RobotController/Src/Path.cpp **** void Path::compressPath() {
  30:Core/RobotController/Src/Path.cpp ****     // 1. ÈÄ£Á∂öÁõ¥ÈÄ≤„Çí„Éû„Éº„Ç∏ (‰æã: forward 1, forward 2 ‚Üí forward 3)
  31:Core/RobotController/Src/Path.cpp ****     mergeStraightSegments();
  32:Core/RobotController/Src/Path.cpp **** 
  33:Core/RobotController/Src/Path.cpp ****     // 2. „Çø„Éº„É≥„ÅÆÊúÄÈÅ©Âåñ (ÈÄ£Á∂ö„Çø„Éº„É≥„ÅÆ„Åæ„Å®„ÇÅ„ÄÅ„Çπ„É©„É≠„Éº„É†Âåñ„Å™„Å©)
  34:Core/RobotController/Src/Path.cpp ****     optimizeTurns();
  35:Core/RobotController/Src/Path.cpp **** }
  36:Core/RobotController/Src/Path.cpp **** 
  37:Core/RobotController/Src/Path.cpp **** void Path::mergeStraightSegments() {
  38:Core/RobotController/Src/Path.cpp ****     if (m_steps.size() < 2) return;
  39:Core/RobotController/Src/Path.cpp **** 
  40:Core/RobotController/Src/Path.cpp ****     std::vector<PathStep> merged;
  41:Core/RobotController/Src/Path.cpp ****     merged.reserve(m_steps.size());
  42:Core/RobotController/Src/Path.cpp **** 
  43:Core/RobotController/Src/Path.cpp ****     for (auto & step : m_steps) {
  44:Core/RobotController/Src/Path.cpp ****         if (!merged.empty() &&
  45:Core/RobotController/Src/Path.cpp ****             merged.back().stepType == StepType::Straight &&
  46:Core/RobotController/Src/Path.cpp ****             step.stepType == StepType::Straight)
  47:Core/RobotController/Src/Path.cpp ****         {
  48:Core/RobotController/Src/Path.cpp ****             // ÈÄ£Á∂ö„Åô„ÇãStraight„Çí„Åæ„Å®„ÇÅ„Çã
  49:Core/RobotController/Src/Path.cpp ****             merged.back().distance += step.distance;
  50:Core/RobotController/Src/Path.cpp ****         }
  51:Core/RobotController/Src/Path.cpp ****         else {
  52:Core/RobotController/Src/Path.cpp ****             // „Åù„Çå‰ª•Â§ñ„ÅØ„Åù„ÅÆ„Åæ„ÅæËøΩÂä†
  53:Core/RobotController/Src/Path.cpp ****             merged.push_back(step);
  54:Core/RobotController/Src/Path.cpp ****         }
  55:Core/RobotController/Src/Path.cpp ****     }
  56:Core/RobotController/Src/Path.cpp **** 
  57:Core/RobotController/Src/Path.cpp ****     m_steps = merged;
  58:Core/RobotController/Src/Path.cpp **** }
  59:Core/RobotController/Src/Path.cpp **** 
  60:Core/RobotController/Src/Path.cpp **** void Path::optimizeTurns() {
  31              		.loc 1 60 28 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  61:Core/RobotController/Src/Path.cpp ****     // ‰æã: (TurnLeft90, TurnRight90) ‚Üí Turn180 „ÅÆ„Çà„ÅÜ„Å´„Åæ„Å®„ÇÅ„Çã„ÄÅ„Å™„Å©
  62:Core/RobotController/Src/Path.cpp ****     // „Çπ„É©„É≠„Éº„É†Âåñ„Åô„ÇãÂ†¥Âêà„ÅØ„ÄÅÈÄ£Á∂ö„Åô„Çã "Straight + 90¬∞ Turn + Straight" „ÅÆÁµÑ„Çí
  63:Core/RobotController/Src/Path.cpp ****     // „Å®„ÅÑ„Å£„ÅüÈ´òÂ∫¶„Å™Âá¶ÁêÜ„ÇíÊõ∏„Åè„ÄÇ
  64:Core/RobotController/Src/Path.cpp ****     // „Åì„Åì„Åß„ÅØ„Çµ„É≥„Éó„É´„Å®„Åó„Å¶Á©∫ÂÆüË£Ö„ÄÇ
  65:Core/RobotController/Src/Path.cpp **** }
  36              		.loc 1 65 1 is_stmt 0 view .LVU1
  37 0000 7047     		bx	lr
  38              		.cfi_endproc
  39              	.LFE1271:
  40              		.cantunwind
  41              		.fnend
  43              		.section	.text._ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv,"axG",%progbits,_ZNKSt6vectorI8PathStepSaIS
  44              		.align	1
  45              		.weak	_ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  50              	_ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv:
  51              		.fnstart
  52              	.LVL1:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 3


  53              	.LFB1287:
  54              		.file 2 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/stl_vector.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // Vector implementation -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  *
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * Copyright (c) 1994
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * Hewlett-Packard Company
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  *
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * representations about the suitability of this software for any
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  *
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  *
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * Copyright (c) 1996
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  *
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * representations about the suitability of this  software for any
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  */
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** /** @file bits/stl_vector.h
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****  */
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 4


  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #ifndef _STL_VECTOR_H
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _STL_VECTOR_H 1
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #include <bits/functexcept.h>
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #include <bits/concept_check.h>
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #include <initializer_list>
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 202002L
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** # include <compare>
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define __cpp_lib_constexpr_vector 201907L
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #include <debug/assertions.h>
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** extern "C" void
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** __sanitizer_annotate_contiguous_container(const void*, const void*,
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					  const void*, const void*);
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** {
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   template<typename _Tp, typename _Alloc>
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     struct _Vector_base
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     {
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	rebind<_Tp>::other _Tp_alloc_type;
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        	pointer;
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       struct _Vector_impl_data
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	pointer _M_start;
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	pointer _M_finish;
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	pointer _M_end_of_storage;
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _M_start(__x._M_start), _M_finish(__x._M_finish),
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_end_of_storage(__x._M_end_of_storage)
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 5


 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_copy_data(_Vector_impl_data const& __x) _GLIBCXX_NOEXCEPT
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_start = __x._M_start;
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_finish = __x._M_finish;
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_end_of_storage = __x._M_end_of_storage;
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_swap_data(_Vector_impl_data& __x) _GLIBCXX_NOEXCEPT
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  // Do not use std::swap(_M_start, __x._M_start), etc as it loses
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  // information used by TBAA.
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Vector_impl_data __tmp;
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  __tmp._M_copy_data(*this);
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_copy_data(__x);
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  __x._M_copy_data(__tmp);
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       };
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       struct _Vector_impl
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _Tp_alloc_type()
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _Tp_alloc_type(__a)
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	// Not defaulted, to enforce noexcept(true) even when
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	// !is_nothrow_move_constructible<_Tp_alloc_type>.
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Vector_impl(_Vector_impl&& __x) noexcept
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a) noexcept
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a))
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a, _Vector_impl&& __rv) noexcept
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)), _Vector_impl_data(std::move(__rv))
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	template<typename = _Tp_alloc_type>
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  struct _Asan
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 6


 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      ::size_type size_type;
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _S_shrink(_Vector_impl&, size_type) { }
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _S_on_dealloc(_Vector_impl&) { }
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    typedef _Vector_impl& _Reinit;
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    struct _Grow
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    {
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR _Grow(_Vector_impl&, size_type) { }
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR void _M_grew(size_type) { }
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    };
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  };
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	// Enable ASan annotations for memory obtained from std::allocator.
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	template<typename _Up>
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  struct _Asan<allocator<_Up> >
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      ::size_type size_type;
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    // Adjust ASan annotation for [_M_start, _M_end_of_storage) to
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    // mark end of valid region as __curr instead of __prev.
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _S_adjust(_Vector_impl& __impl, pointer __prev, pointer __curr)
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    {
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cpp_lib_is_constant_evaluated
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      if (std::is_constant_evaluated())
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		return;
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      __sanitizer_annotate_contiguous_container(__impl._M_start,
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		  __impl._M_end_of_storage, __prev, __curr);
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    }
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _S_grow(_Vector_impl& __impl, size_type __n)
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish, __impl._M_finish + __n); }
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _S_shrink(_Vector_impl& __impl, size_type __n)
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    { _S_adjust(__impl, __impl._M_finish + __n, __impl._M_finish); }
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    static _GLIBCXX20_CONSTEXPR void
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _S_on_dealloc(_Vector_impl& __impl)
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    {
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      if (__impl._M_start)
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		_S_adjust(__impl, __impl._M_finish, __impl._M_end_of_storage);
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    }
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    // Used on reallocation to tell ASan unused capacity is invalid.
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    struct _Reinit
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    {
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      explicit _GLIBCXX20_CONSTEXPR
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Reinit(_Vector_impl& __impl) : _M_impl(__impl)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 7


 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      {
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		// Mark unused capacity as valid again before deallocating it.
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		_S_on_dealloc(_M_impl);
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      }
 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      ~_Reinit()
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      {
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		// Mark unused capacity as invalid after reallocation.
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		if (_M_impl._M_start)
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		  _S_adjust(_M_impl, _M_impl._M_end_of_storage,
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			    _M_impl._M_finish);
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      }
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Reinit(const _Reinit&) = delete;
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Reinit& operator=(const _Reinit&) = delete;
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    };
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    // Tell ASan when unused capacity is initialized to be valid.
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    struct _Grow
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    {
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Grow(_Vector_impl& __impl, size_type __n)
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      : _M_impl(__impl), _M_n(__n)
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      { _S_grow(_M_impl, __n); }
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      ~_Grow() { if (_M_n) _S_shrink(_M_impl, _M_n); }
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _GLIBCXX20_CONSTEXPR
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      void _M_grew(size_type __n) { _M_n -= __n; }
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Grow(const _Grow&) = delete;
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Grow& operator=(const _Grow&) = delete;
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    private:
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _Vector_impl& _M_impl;
 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      size_type _M_n;
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    };
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  };
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT \
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Reinit const \
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__attribute__((__unused__)) __reinit_guard(this->_M_impl)
 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n) \
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   typename _Base::_Vector_impl::template _Asan<>::_Grow \
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__attribute__((__unused__)) __grow_guard(this->_M_impl, (n))
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n) __grow_guard._M_grew(n)
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n) \
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_shrink(this->_M_impl, n)
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC \
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   _Base::_Vector_impl::template _Asan<>::_S_on_dealloc(this->_M_impl)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 8


 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else // ! (_GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR)
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_REINIT
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GROW(n)
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_GREW(n)
 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_SHRINK(n)
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #define _GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       };
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     public:
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef _Alloc allocator_type;
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Tp_alloc_type&
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return this->_M_impl; }
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const _Tp_alloc_type&
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return this->_M_impl; }
 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       allocator_type
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base() = default;
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base() { }
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _M_impl(__a) { }
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Kept for ABI compatibility.
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if !_GLIBCXX_INLINE_VERSION
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base(size_t __n)
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _M_impl()
 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_create_storage(__n); }
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _M_impl(__a)
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_create_storage(__n); }
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base(_Vector_base&&) = default;
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Kept for ABI compatibility.
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** # if !_GLIBCXX_INLINE_VERSION
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a) noexcept
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 9


 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _M_impl(std::move(__a)) { }
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _M_impl(__a)
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (__x.get_allocator() == __a)
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	else
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _M_create_storage(__n);
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  }
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** # endif
 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_base(const allocator_type& __a, _Vector_base&& __x)
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { }
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       ~_Vector_base() _GLIBCXX_NOEXCEPT
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_deallocate(_M_impl._M_start,
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     public:
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Vector_impl _M_impl;
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       pointer
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_allocate(size_t __n)
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (__p)
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     protected:
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_create_storage(size_t __n)
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 10


 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     };
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   /**
 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  individual elements in any order.
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  @ingroup sequences
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  @headerfile vector
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  @since C++98
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  @tparam _Tp  Type of element.
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  elements in any order and saves the user from worrying about
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****    *  also provided as with C-style arrays.
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   */
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     {
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #ifdef _GLIBCXX_CONCEPT_CHECKS
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Concept requirements.
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename _Alloc::value_type		_Alloc_value_type;
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** # if __cplusplus < 201103L
 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** # endif
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static_assert(is_same<typename remove_cv<_Tp>::type, _Tp>::value,
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  "std::vector must have a non-const, non-volatile value_type");
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** # if __cplusplus > 201703L || defined __STRICT_ANSI__
 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static_assert(is_same<typename _Alloc::value_type, _Tp>::value,
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  "std::vector must have the same value_type as its allocator");
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** # endif
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			_Base;
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		_Tp_alloc_type;
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>	_Alloc_traits;
 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     public:
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef _Tp					value_type;
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename _Base::pointer			pointer;
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename _Alloc_traits::const_pointer	const_pointer;
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename _Alloc_traits::reference		reference;
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef typename _Alloc_traits::const_reference	const_reference;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 11


 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_iterator;
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;
 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef std::reverse_iterator<iterator>		reverse_iterator;
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef size_t					size_type;
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef ptrdiff_t					difference_type;
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       typedef _Alloc					allocator_type;
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     private:
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static constexpr bool
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _S_nothrow_relocate(true_type)
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return noexcept(std::__relocate_a(std::declval<pointer>(),
 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					  std::declval<pointer>(),
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					  std::declval<pointer>(),
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					  std::declval<_Tp_alloc_type&>()));
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static constexpr bool
 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _S_nothrow_relocate(false_type)
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return false; }
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static constexpr bool
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _S_use_relocate()
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	// Instantiating std::__relocate_a might cause an error outside the
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	// immediate context (in __relocate_object_a's noexcept-specifier),
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	// so only do it if we know the type can be move-inserted into *this.
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static pointer
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _S_do_relocate(pointer __first, pointer __last, pointer __result,
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		     _Tp_alloc_type& __alloc, true_type) noexcept
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static pointer
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _S_do_relocate(pointer, pointer, pointer __result,
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		     _Tp_alloc_type&, false_type) noexcept
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return __result; }
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       static _GLIBCXX20_CONSTEXPR pointer
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _S_relocate(pointer __first, pointer __last, pointer __result,
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cpp_if_constexpr
 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	// All callers have already checked _S_use_relocate() so just do it.
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return std::__relocate_a(__first, __last, __result, __alloc);
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	using __do_it = __bool_constant<_S_use_relocate()>;
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 12


 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif // C++11
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     protected:
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       using _Base::_M_allocate;
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       using _Base::_M_deallocate;
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       using _Base::_M_impl;
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     public:
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector() = default;
 529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector() { }
 531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __a  An allocator object.
 536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       explicit
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(__a) { }
 541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __a  An allocator.
 547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  constructed elements.
 550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       explicit
 552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_default_initialize(__n); }
 556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __value  An element to copy.
 561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __a  An allocator.
 562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(size_type __n, const value_type& __value,
 567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 13


 569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __value  An element to copy.
 575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __a  An allocator.
 576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       explicit
 580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(_S_check_init_len(__n, __a), __a)
 583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  %Vector copy constructor.
 588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @a __x  will not be copied
 592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  (i.e. capacity() == size() in the new %vector).
 593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The newly-created %vector uses a copy of the allocator object used
 595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  by @a __x (unless the allocator traits dictate a different object).
 596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(const vector& __x)
 599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(__x.size(),
 600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_finish =
 603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				      this->_M_impl._M_start,
 605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 608:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 609:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 610:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  %Vector move constructor.
 611:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 612:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The newly-created %vector contains the exact contents of the
 613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  moved instance.
 614:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The contents of the moved instance are a valid, but unspecified
 615:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector.
 616:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 617:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(vector&&) noexcept = default;
 618:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 619:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /// Copy constructor with alternative allocator
 620:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 621:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(const vector& __x, const __type_identity_t<allocator_type>& __a)
 622:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(__x.size(), __a)
 623:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_finish =
 625:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 14


 626:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				      this->_M_impl._M_start,
 627:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				      _M_get_Tp_allocator());
 628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 629:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 630:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     private:
 631:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 632:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept
 633:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(__m, std::move(__rv))
 634:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { }
 635:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 636:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 637:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m, false_type)
 638:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(__m)
 639:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 640:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (__rv.get_allocator() == __m)
 641:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  this->_M_impl._M_swap_data(__rv._M_impl);
 642:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	else if (!__rv.empty())
 643:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
 644:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    this->_M_create_storage(__rv.size());
 645:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    this->_M_impl._M_finish =
 646:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 647:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					  this->_M_impl._M_start,
 648:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					  _M_get_Tp_allocator());
 649:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    __rv.clear();
 650:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  }
 651:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 652:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 653:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     public:
 654:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /// Move constructor with alternative allocator
 655:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 656:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(vector&& __rv, const __type_identity_t<allocator_type>& __m)
 657:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       noexcept( noexcept(
 658:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	vector(std::declval<vector&&>(), std::declval<const allocator_type&>(),
 659:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       std::declval<typename _Alloc_traits::is_always_equal>())) )
 660:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : vector(std::move(__rv), __m, typename _Alloc_traits::is_always_equal{})
 661:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { }
 662:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 663:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 664:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 665:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 666:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __a  An allocator.
 667:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 668:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 669:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  initializer_list @a __l.
 670:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 671:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This will call the element type's copy constructor N times
 672:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 673:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 674:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 675:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector(initializer_list<value_type> __l,
 676:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 677:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       : _Base(__a)
 678:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 679:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 680:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			    random_access_iterator_tag());
 681:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 682:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 15


 683:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 684:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 685:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Builds a %vector from a range.
 686:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __first  An input iterator.
 687:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __last  An input iterator.
 688:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __a  An allocator.
 689:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 690:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 691:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  [first,last).
 692:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 693:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 694:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  random-access, then this will call the elements' copy
 695:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 696:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 697:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 698:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  constructor, and logN memory reallocations.
 699:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 700:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 701:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator,
 702:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 703:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 704:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 705:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 706:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _Base(__a)
 707:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
 708:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
 709:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			      std::__iterator_category(__first));
 710:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
 711:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 712:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
 713:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	vector(_InputIterator __first, _InputIterator __last,
 714:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 715:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _Base(__a)
 716:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
 717:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 718:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 719:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 720:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
 721:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 722:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 723:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 724:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 725:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 726:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 727:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  responsibility.
 728:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 729:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 730:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 731:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 732:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 733:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		      _M_get_Tp_allocator());
 734:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
 735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 736:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 737:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 738:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  %Vector assignment operator.
 739:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 16


 740:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 741:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  All the elements of @a __x are copied, but any unused capacity in
 742:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @a __x will not be copied.
 743:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 744:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Whether the allocator is copied depends on the allocator traits.
 745:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 746:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 747:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector&
 748:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       operator=(const vector& __x);
 749:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 750:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 751:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 752:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  %Vector move assignment operator.
 753:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 754:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 755:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 756:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  if the allocators permit it).
 757:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Afterwards @a __x is a valid, but unspecified %vector.
 758:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 759:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Whether the allocator is moved depends on the allocator traits.
 760:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 761:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 762:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector&
 763:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 764:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 765:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	constexpr bool __move_storage =
 766:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Alloc_traits::_S_propagate_on_move_assign()
 767:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  || _Alloc_traits::_S_always_equal();
 768:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_move_assign(std::move(__x), __bool_constant<__move_storage>());
 769:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *this;
 770:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 771:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 772:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 773:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  %Vector list assignment operator.
 774:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 775:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 776:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 777:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  initializer list @a __l.
 778:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 779:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 780:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 781:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  of elements assigned.
 782:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 783:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 784:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       vector&
 785:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       operator=(initializer_list<value_type> __l)
 786:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 787:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 788:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			    random_access_iterator_tag());
 789:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *this;
 790:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 791:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 792:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 793:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 794:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 795:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 796:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __val  Value to be assigned.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 17


 797:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 798:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 799:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  value.  Note that the assignment completely changes the
 800:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 801:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the number of elements assigned.
 802:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 803:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 804:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
 805:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       assign(size_type __n, const value_type& __val)
 806:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_fill_assign(__n, __val); }
 807:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 808:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 809:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 810:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __first  An input iterator.
 811:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __last   An input iterator.
 812:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 813:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 814:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  range [__first,__last).
 815:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 816:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 817:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 818:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  of elements assigned.
 819:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 820:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 821:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator,
 822:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 823:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
 824:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
 825:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 826:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
 827:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 828:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
 829:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
 830:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	assign(_InputIterator __first, _InputIterator __last)
 831:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
 832:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 833:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 834:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 835:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
 836:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 837:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 838:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 839:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 840:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 841:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __l  An initializer_list.
 842:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 843:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 844:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  initializer list @a __l.
 845:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
 846:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 847:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 848:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  of elements assigned.
 849:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 850:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
 851:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
 852:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       assign(initializer_list<value_type> __l)
 853:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 18


 854:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_assign_aux(__l.begin(), __l.end(),
 855:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			    random_access_iterator_tag());
 856:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 857:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 858:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 859:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /// Get a copy of the memory allocation object.
 860:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       using _Base::get_allocator;
 861:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 862:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // iterators
 863:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 864:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read/write iterator that points to the first
 865:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 866:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element order.
 867:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 868:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 869:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
 870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 871:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 872:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 873:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 874:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 875:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 876:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element order.
 877:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 878:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 879:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_iterator
 880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 881:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 882:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 883:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 884:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 885:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 886:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element order.
 887:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 888:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 889:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 891:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 892:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 893:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 894:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 895:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 896:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  ordinary element order.
 897:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 898:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_iterator
 900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 901:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 902:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 903:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 904:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 905:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 906:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element order.
 907:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 908:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 909:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       reverse_iterator
 910:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 19


 911:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return reverse_iterator(end()); }
 912:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 913:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 914:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 915:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 916:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  reverse element order.
 917:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 918:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 919:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reverse_iterator
 920:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 921:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 922:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 923:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 924:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 925:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 926:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  in reverse element order.
 927:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 928:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 929:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       reverse_iterator
 930:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 931:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return reverse_iterator(begin()); }
 932:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 933:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 934:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 935:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 936:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  is done in reverse element order.
 937:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 938:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 939:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reverse_iterator
 940:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 941:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 942:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 943:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 944:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 945:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 946:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 947:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element order.
 948:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 949:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 950:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_iterator
 951:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       cbegin() const noexcept
 952:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 953:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 954:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 955:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 956:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 957:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  ordinary element order.
 958:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 959:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 960:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_iterator
 961:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       cend() const noexcept
 962:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 963:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 964:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 965:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 966:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 967:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  reverse element order.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 20


 968:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 969:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 970:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reverse_iterator
 971:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       crbegin() const noexcept
 972:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_reverse_iterator(end()); }
 973:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 974:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
 975:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 976:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 977:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  is done in reverse element order.
 978:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
 979:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
 980:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reverse_iterator
 981:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       crend() const noexcept
 982:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_reverse_iterator(begin()); }
 983:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
 984:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 985:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // [23.2.4.2] capacity
 986:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 987:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 988:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       size_type
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 991:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 992:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 993:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 994:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       size_type
 995:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 996:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _S_max_size(_M_get_Tp_allocator()); }
 997:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 998:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
 999:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1000:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
1001:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
1002:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1003:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
1004:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
1005:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
1006:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  default constructed elements are appended.
1007:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1008:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1009:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1010:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       resize(size_type __new_size)
1011:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1012:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (__new_size > size())
1013:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_default_append(__new_size - size());
1014:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	else if (__new_size < size())
1015:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
1016:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1017:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1018:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1019:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
1020:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
1021:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
1022:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1023:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
1024:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 21


1025:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
1026:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
1027:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  given data.
1028:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1029:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1030:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1031:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
1032:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1033:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (__new_size > size())
1034:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
1035:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	else if (__new_size < size())
1036:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
1037:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1038:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1039:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1040:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
1041:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
1042:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
1043:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1044:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will %resize the %vector to the specified
1045:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  number of elements.  If the number is smaller than the
1046:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
1047:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the %vector is extended and new elements are populated with
1048:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  given data.
1049:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1050:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1051:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1052:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
1053:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1054:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (__new_size > size())
1055:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_fill_insert(end(), __new_size - size(), __x);
1056:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	else if (__new_size < size())
1057:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
1058:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1059:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1060:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1061:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1062:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
1063:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1064:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1065:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       shrink_to_fit()
1066:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_shrink_to_fit(); }
1067:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1068:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1069:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1070:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns the total number of elements that the %vector can
1071:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  hold before needing to allocate more memory.
1072:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1073:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1074:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       size_type
1075:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			 - this->_M_impl._M_start); }
1078:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1079:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1080:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
1081:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  equal end().)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 22


1082:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1083:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1084:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       bool
1085:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
  55              		.loc 2 1085 7 is_stmt 1 view -0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 0, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60              	.LBB504:
  61              	.LBI504:
 880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
  62              		.loc 2 880 7 view .LVU3
  63              	.LBB505:
  64              	.LBB506:
  65              	.LBI506:
  66              		.file 3 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/stl_iterator.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // Iterators -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * Copyright (c) 1994
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * Hewlett-Packard Company
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * representations about the suitability of this software for any
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * Copyright (c) 1996-1998
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 23


  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * representations about the suitability of this software for any
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  */
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** /** @file bits/stl_iterator.h
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****  */
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #include <bits/stl_iterator_base_types.h>
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #include <ext/type_traits.h>
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #include <bits/move.h>
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #include <bits/ptr_traits.h>
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 201103L
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # include <type_traits>
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201811L
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # define __cpp_lib_constexpr_iterator 201811L
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #elif __cplusplus == 201703L
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # define __cpp_lib_array_constexpr 201803L
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 202002L
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # include <compare>
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # include <new>
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # include <bits/exception_defines.h>
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # include <bits/iterator_concepts.h>
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # include <bits/stl_construct.h>
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** {
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    * @addtogroup iterators
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    * @{
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    */
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cpp_lib_concepts
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 24


  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   namespace __detail
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   {
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     // Weaken iterator_category _Cat to _Limit if it is derived from that,
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     // otherwise use _Otherwise.
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     template<typename _Cat, typename _Limit, typename _Otherwise = _Cat>
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using __clamp_iter_cat
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	= __conditional_t<derived_from<_Cat, _Limit>, _Limit, _Otherwise>;
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     template<typename _Tp, typename _Up>
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       concept __different_from
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	= !same_as<remove_cvref_t<_Tp>, remove_cvref_t<_Up>>;
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   }
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** // Ignore warnings about std::iterator.
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #pragma GCC diagnostic push
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #pragma GCC diagnostic ignored "-Wdeprecated-declarations"
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // 24.4.1 Reverse iterators
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @code
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @endcode
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  the requirement that the iterators must be safe.
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     class reverse_iterator
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     {
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Iter>
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	friend class reverse_iterator;
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cpp_lib_concepts
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // 3435. three_way_comparable_with<reverse_iterator<int*>, [...]>
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Iter>
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	static constexpr bool __convertible = !is_same_v<_Iter, _Iterator>
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	    && convertible_to<const _Iter&, _Iterator>;
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     protected:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 25


 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _Iterator current;
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     public:
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if ! __cpp_lib_concepts
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using iterator_concept
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	= __conditional_t<random_access_iterator<_Iterator>,
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 			  random_access_iterator_tag,
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 			  bidirectional_iterator_tag>;
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using iterator_category
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	= __detail::__clamp_iter_cat<typename __traits_type::iterator_category,
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 				     random_access_iterator_tag>;
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using value_type = iter_value_t<_Iterator>;
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using difference_type = iter_difference_t<_Iterator>;
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using reference = iter_reference_t<_Iterator>;
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // 1012. reverse_iterator default ctor should value initialize
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       reverse_iterator()
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator()))
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : current()
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { }
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       explicit _GLIBCXX17_CONSTEXPR
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       reverse_iterator(iterator_type __x)
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x)))
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : current(__x)
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { }
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The copy constructor is normal.
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : current(__x.current)
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { }
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 201103L
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       reverse_iterator& operator=(const reverse_iterator&) = default;
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 26


 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Iter>
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cpp_lib_concepts
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	requires __convertible<_Iter>
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(__x.current)))
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	: current(__x.current)
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	{ }
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 201103L
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Iter>
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cpp_lib_concepts
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	requires __convertible<_Iter>
 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	  && assignable_from<_Iterator&, const _Iter&>
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_GLIBCXX17_CONSTEXPR
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	reverse_iterator&
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	operator=(const reverse_iterator<_Iter>& __x)
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_GLIBCXX_NOEXCEPT_IF(noexcept(current = __x.current))
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	{
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	  current = __x.current;
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	  return *this;
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	}
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR iterator_type
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       base() const
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NOEXCEPT_IF(noexcept(_Iterator(current)))
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return current; }
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  A reference to the value at @c --current
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator*() const
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_Iterator __tmp = current;
 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *--__tmp;
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 27


 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR pointer
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator->() const
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_concepts >= 201907L
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       requires is_pointer_v<_Iterator>
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	|| requires(const _Iterator __i) { __i.operator->(); }
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	// 1052. operator-> should also support smart pointers
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_Iterator __tmp = current;
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	--__tmp;
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return _S_to_pointer(__tmp);
 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  @c *this
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++()
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	--current;
 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  The original value of @c *this
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  Decrements the underlying iterator.
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++(int)
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	--current;
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return __tmp;
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  @c *this
 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  Increments the underlying iterator.
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator--()
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	++current;
 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 28


 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  Increments the underlying iterator.
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator--(int)
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	reverse_iterator __tmp = *this;
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	++current;
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return __tmp;
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator+(difference_type __n) const
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return reverse_iterator(current - __n); }
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  *this
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator+=(difference_type __n)
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	current -= __n;
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator-(difference_type __n) const
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return reverse_iterator(current + __n); }
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  *this
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reverse_iterator&
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator-=(difference_type __n)
 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	current += __n;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 29


 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX17_CONSTEXPR reference
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator[](difference_type __n) const
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *(*this + __n); }
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       [[nodiscard]]
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       friend constexpr iter_rvalue_reference_t<_Iterator>
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       iter_move(const reverse_iterator& __i)
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       noexcept(is_nothrow_copy_constructible_v<_Iterator>
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       && noexcept(ranges::iter_move(--std::declval<_Iterator&>())))
 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	auto __tmp = __i.base();
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return ranges::iter_move(--__tmp);
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<indirectly_swappable<_Iterator> _Iter2>
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	friend constexpr void
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	iter_swap(const reverse_iterator& __x,
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		  const reverse_iterator<_Iter2>& __y)
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	noexcept(is_nothrow_copy_constructible_v<_Iterator>
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		 && is_nothrow_copy_constructible_v<_Iter2>
 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		 && noexcept(ranges::iter_swap(--std::declval<_Iterator&>(),
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 					       --std::declval<_Iter2&>())))
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	{
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	  auto __xtmp = __x.base();
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	  auto __ytmp = __y.base();
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	  ranges::iter_swap(--__xtmp, --__ytmp);
 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	}
 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     private:
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Tp>
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR _Tp*
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_S_to_pointer(_Tp* __p)
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****         { return __p; }
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Tp>
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	static _GLIBCXX17_CONSTEXPR pointer
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_S_to_pointer(_Tp __t)
 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****         { return __t.operator->(); }
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     };
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   ///@{
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @return  A simple bool.
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 30


 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Reverse iterators forward comparisons to their underlying base()
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  iterators.
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus <= 201703L || ! defined __cpp_lib_concepts
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __y.base() < __x.base(); }
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return !(__x == __y); }
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __y < __x; }
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return !(__y < __x); }
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return !(__x < __y); }
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 31


 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() > __y.base(); }
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() != __y.base(); }
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() < __y.base(); }
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() >= __y.base(); }
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR bool
 527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() <= __y.base(); }
 530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else // C++20
 531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
 534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
 542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires { { __x.base() != __y.base() } -> convertible_to<bool>; }
 545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() != __y.base(); }
 546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
 550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires { { __x.base() > __y.base() } -> convertible_to<bool>; }
 553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() > __y.base(); }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 32


 554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
 558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires { { __x.base() < __y.base() } -> convertible_to<bool>; }
 561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() < __y.base(); }
 562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
 566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires { { __x.base() >= __y.base() } -> convertible_to<bool>; }
 569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() >= __y.base(); }
 570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
 574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires { { __x.base() <= __y.base() } -> convertible_to<bool>; }
 577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() <= __y.base(); }
 578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL,
 580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	   three_way_comparable_with<_IteratorL> _IteratorR>
 581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr compare_three_way_result_t<_IteratorL, _IteratorR>
 583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=>(const reverse_iterator<_IteratorL>& __x,
 584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		const reverse_iterator<_IteratorR>& __y)
 585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // Additional, non-standard overloads to avoid ambiguities with greedy,
 588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // unconstrained overloads in associated namespaces.
 589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
 593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires { { __x.base() == __y.base() } -> convertible_to<bool>; }
 596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __x.base() == __y.base(); }
 597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<three_way_comparable _Iterator>
 599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
 600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr compare_three_way_result_t<_Iterator, _Iterator>
 601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=>(const reverse_iterator<_Iterator>& __x,
 602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		const reverse_iterator<_Iterator>& __y)
 603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __y.base() <=> __x.base(); }
 604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif // C++20
 605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   ///@}
 606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus < 201103L
 608:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 609:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 610:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 33


 611:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 612:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 614:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 615:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 616:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 617:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 618:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 619:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
 620:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 621:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // DR 685. reverse_iterator/move_iterator difference has invalid signatures
 622:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 623:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[__nodiscard__]]
 624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR auto
 625:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 626:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 627:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __y.base() - __x.base(); }
 629:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 630:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 631:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 632:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
 633:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 634:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 635:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 636:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 637:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 638:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 201103L
 639:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // Same as C++14 make_reverse_iterator but used in C++11 mode too.
 640:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 641:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 642:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     __make_reverse_iterator(_Iterator __i)
 643:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 644:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 645:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # if __cplusplus >= 201402L
 646:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #  define __cpp_lib_make_reverse_iterator 201402L
 647:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 648:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 649:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // DR 2285. make_reverse_iterator
 650:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /// Generator function for reverse_iterator.
 651:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 652:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[__nodiscard__]]
 653:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>
 654:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     make_reverse_iterator(_Iterator __i)
 655:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return reverse_iterator<_Iterator>(__i); }
 656:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 657:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #  if __cplusplus > 201703L && defined __cpp_lib_concepts
 658:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator1, typename _Iterator2>
 659:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires (!sized_sentinel_for<_Iterator1, _Iterator2>)
 660:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline constexpr bool
 661:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     disable_sized_sentinel_for<reverse_iterator<_Iterator1>,
 662:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 			       reverse_iterator<_Iterator2>> = true;
 663:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #  endif // C++20
 664:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** # endif // C++14
 665:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 666:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 667:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 34


 668:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     auto
 669:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     __niter_base(reverse_iterator<_Iterator> __it)
 670:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__niter_base(__it.base())))
 671:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __make_reverse_iterator(__niter_base(__it.base())); }
 672:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 673:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 674:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     struct __is_move_iterator<reverse_iterator<_Iterator> >
 675:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : __is_move_iterator<_Iterator>
 676:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { };
 677:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 678:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator>
 679:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
 680:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     auto
 681:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     __miter_base(reverse_iterator<_Iterator> __it)
 682:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     -> decltype(__make_reverse_iterator(__miter_base(__it.base())))
 683:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __make_reverse_iterator(__miter_base(__it.base())); }
 684:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif // C++11
 685:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 686:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 687:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
 688:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 689:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 690:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 691:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 692:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  push_back.
 693:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 694:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 695:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  save typing.
 696:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
 697:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Container>
 698:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     class back_insert_iterator
 699:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 700:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     {
 701:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     protected:
 702:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _Container* container;
 703:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 704:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     public:
 705:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 706:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef _Container          container_type;
 707:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L
 708:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 709:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 710:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 711:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 712:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 713:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       back_insert_iterator(_Container& __x)
 714:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 715:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 716:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 717:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 718:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 719:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 720:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 721:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 722:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 723:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 724:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 35


 725:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  always append the value to the end of the container.
 726:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 727:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus < 201103L
 728:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       back_insert_iterator&
 729:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 730:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 731:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	container->push_back(__value);
 732:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 733:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 734:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
 735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 736:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       back_insert_iterator&
 737:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 738:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 739:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	container->push_back(__value);
 740:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 741:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 742:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 743:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 744:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       back_insert_iterator&
 745:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 746:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 747:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	container->push_back(std::move(__value));
 748:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 749:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 750:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 751:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 752:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.
 753:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 754:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       back_insert_iterator&
 755:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator*()
 756:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 757:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 758:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 759:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 760:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       back_insert_iterator&
 761:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++()
 762:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 763:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 764:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 765:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 766:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       back_insert_iterator
 767:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++(int)
 768:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 769:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     };
 770:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 771:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
 772:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 773:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 774:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 775:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 776:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 777:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 778:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 779:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 780:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  types for you.
 781:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 36


 782:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Container>
 783:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 784:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline back_insert_iterator<_Container>
 785:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     back_inserter(_Container& __x)
 786:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 787:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 788:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
 789:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 790:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 791:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 792:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 793:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  push_front.
 794:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 795:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 796:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  save typing.
 797:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
 798:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Container>
 799:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     class front_insert_iterator
 800:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 801:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     {
 802:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     protected:
 803:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _Container* container;
 804:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 805:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     public:
 806:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 807:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef _Container          container_type;
 808:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L
 809:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 810:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 811:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 812:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 813:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
 814:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       front_insert_iterator(_Container& __x)
 815:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : container(std::__addressof(__x)) { }
 816:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 817:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 818:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 819:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 820:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 821:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 822:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 823:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 824:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  container (you can think of the position as being permanently at
 825:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 826:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  always prepend the value to the front of the container.
 827:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 828:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus < 201103L
 829:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       front_insert_iterator&
 830:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 831:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 832:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	container->push_front(__value);
 833:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 834:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 835:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
 836:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 837:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       front_insert_iterator&
 838:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 37


 839:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 840:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	container->push_front(__value);
 841:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 842:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 843:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 844:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 845:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       front_insert_iterator&
 846:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 847:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 848:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	container->push_front(std::move(__value));
 849:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 850:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 851:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 852:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 853:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.
 854:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 855:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       front_insert_iterator&
 856:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator*()
 857:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 858:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 859:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 860:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 861:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       front_insert_iterator&
 862:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++()
 863:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 864:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 865:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 866:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 867:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       front_insert_iterator
 868:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++(int)
 869:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     };
 871:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 872:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
 873:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 874:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 875:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 876:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 877:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 878:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 879:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 881:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  types for you.
 882:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
 883:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Container>
 884:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 885:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline front_insert_iterator<_Container>
 886:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     front_inserter(_Container& __x)
 887:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 888:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 889:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 891:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 892:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 893:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 894:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 895:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  position.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 38


 896:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 897:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 898:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  %iterator's position.)
 899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
 900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 901:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  save typing.
 902:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
 903:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Container>
 904:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     class insert_iterator
 905:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 906:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     {
 907:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 908:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using _Iter = std::__detail::__range_iter_t<_Container>;
 909:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
 910:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename _Container::iterator		_Iter;
 911:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 912:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     protected:
 913:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _Container* container;
 914:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _Iter iter;
 915:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 916:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     public:
 917:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 918:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef _Container          container_type;
 919:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 920:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
 921:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using difference_type = ptrdiff_t;
 922:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 923:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 924:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 925:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 926:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 927:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 928:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 929:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       insert_iterator(_Container& __x, _Iter __i)
 930:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : container(std::__addressof(__x)), iter(__i) {}
 931:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 932:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /**
 933:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @param  __value  An instance of whatever type
 934:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 935:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *                 reference-to-const T for container<T>.
 936:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 937:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 938:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 939:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 940:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  value into the container at the place before the %iterator.
 941:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 942:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 943:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  insert values immediately after one another.  For example,
 944:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @code
 945:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *     // vector v contains A and Z
 946:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 947:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 948:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *     i = 1;
 949:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *     i = 2;
 950:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *     i = 3;
 951:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *
 952:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 39


 953:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****        *  @endcode
 954:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       */
 955:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus < 201103L
 956:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       insert_iterator&
 957:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 958:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 959:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 960:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	++iter;
 961:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 962:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 963:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
 964:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 965:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       insert_iterator&
 966:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 967:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 968:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	iter = container->insert(iter, __value);
 969:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	++iter;
 970:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 971:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 972:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 973:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 974:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       insert_iterator&
 975:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 976:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 977:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 978:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	++iter;
 979:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 980:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
 981:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
 982:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 983:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.
 984:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
 985:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       insert_iterator&
 986:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator*()
 987:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 988:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 991:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       insert_iterator&
 992:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++()
 993:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
 994:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 995:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 996:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
 997:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       insert_iterator&
 998:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++(int)
 999:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *this; }
1000:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     };
1001:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1002:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #pragma GCC diagnostic pop
1003:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1004:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /**
1005:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @param __x  A container of arbitrary type.
1006:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @param __i  An iterator into the container.
1007:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
1008:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *
1009:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 40


1010:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
1011:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
1012:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
1013:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
1014:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    *  types for you.
1015:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   */
1016:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L && defined __cpp_lib_concepts
1017:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Container>
1018:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
1019:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr insert_iterator<_Container>
1020:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)
1021:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
1022:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
1023:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Container>
1024:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1025:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline insert_iterator<_Container>
1026:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inserter(_Container& __x, typename _Container::iterator __i)
1027:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return insert_iterator<_Container>(__x, __i); }
1028:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
1029:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1030:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   /// @} group iterators
1031:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1032:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
1033:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** } // namespace
1034:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1035:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
1036:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** {
1037:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
1038:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1039:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
1040:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // change the semantics of any of the operators of its iterator
1041:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
1042:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
1043:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // The _Container parameter exists solely so that different containers
1044:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // using this template can instantiate different types, even if the
1045:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // _Iterator parameter is the same.
1046:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1047:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     class __normal_iterator
1048:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     {
1049:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     protected:
1050:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _Iterator _M_current;
1051:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1052:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef std::iterator_traits<_Iterator>		__traits_type;
1053:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1054:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 201103L
1055:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Iter>
1056:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	using __convertible_from
1057:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	  = std::__enable_if_t<std::is_convertible<_Iter, _Iterator>::value>;
1058:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
1059:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1060:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     public:
1061:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef _Iterator					iterator_type;
1062:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
1063:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
1064:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
1065:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
1066:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 41


1067:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1068:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus > 201703L && __cpp_lib_concepts
1069:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       using iterator_concept = std::__detail::__iter_concept<_Iterator>;
1070:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
1071:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1072:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
1073:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(_Iterator()) { }
1074:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1075:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       explicit _GLIBCXX20_CONSTEXPR
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
  67              		.loc 3 1076 7 view .LVU4
  68              	.LBB507:
  69              	.LBB508:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
  70              		.loc 3 1077 9 is_stmt 0 view .LVU5
  71 0000 0368     		ldr	r3, [r0]
  72              	.LVL2:
  73              		.loc 3 1077 9 view .LVU6
  74              	.LBE508:
  75              	.LBE507:
  76              	.LBE506:
  77              	.LBE505:
  78              	.LBE504:
  79              	.LBB509:
  80              	.LBI509:
 900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
  81              		.loc 2 900 7 is_stmt 1 view .LVU7
  82              	.LBB510:
  83              	.LBB511:
  84              	.LBI511:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
  85              		.loc 3 1076 7 view .LVU8
  86              	.LBB512:
  87              	.LBB513:
  88              		.loc 3 1077 9 is_stmt 0 view .LVU9
  89 0002 4068     		ldr	r0, [r0, #4]
  90              	.LVL3:
  91              		.loc 3 1077 9 view .LVU10
  92              	.LBE513:
  93              	.LBE512:
  94              	.LBE511:
  95              	.LBE510:
  96              	.LBE509:
  97              	.LBB514:
  98              	.LBI514:
1078:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1079:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // Allow iterator to const_iterator conversion
1080:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 201103L
1081:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Iter, typename = __convertible_from<_Iter>>
1082:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	_GLIBCXX20_CONSTEXPR
1083:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)
1084:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	noexcept
1085:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
1086:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // N.B. _Container::pointer is not actually in container requirements,
1087:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // but is present in std::vector and std::basic_string.
1088:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       template<typename _Iter>
1089:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 42


1090:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 			  typename __enable_if<
1091:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		      _Container>::__type>& __i)
1093:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
1094:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****         : _M_current(__i.base()) { }
1095:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1096:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // Forward iterator requirements
1097:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1098:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       reference
1099:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator*() const _GLIBCXX_NOEXCEPT
1100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return *_M_current; }
1101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       pointer
1104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator->() const _GLIBCXX_NOEXCEPT
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return _M_current; }
1106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator&
1109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++() _GLIBCXX_NOEXCEPT
1110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
1111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	++_M_current;
1112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
1113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
1114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator
1117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator++(int) _GLIBCXX_NOEXCEPT
1118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return __normal_iterator(_M_current++); }
1119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // Bidirectional iterator requirements
1121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator&
1123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator--() _GLIBCXX_NOEXCEPT
1124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
1125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	--_M_current;
1126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
1127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       }
1128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator
1131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator--(int) _GLIBCXX_NOEXCEPT
1132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return __normal_iterator(_M_current--); }
1133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       // Random access iterator requirements
1135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       reference
1137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator[](difference_type __n) const _GLIBCXX_NOEXCEPT
1138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return _M_current[__n]; }
1139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator&
1142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator+=(difference_type __n) _GLIBCXX_NOEXCEPT
1143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { _M_current += __n; return *this; }
1144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 43


1147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
1148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
1149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator&
1152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator-=(difference_type __n) _GLIBCXX_NOEXCEPT
1153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { _M_current -= __n; return *this; }
1154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       __normal_iterator
1157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
1158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
1159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       _GLIBCXX20_CONSTEXPR
1161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       const _Iterator&
1162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       base() const _GLIBCXX_NOEXCEPT
1163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return _M_current; }
1164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     };
1165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
1167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
1168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
1169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
1170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
1171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
1172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
1173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cpp_lib_three_way_comparison
1175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
1177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
1178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires {
1182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
1183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     }
1184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
1188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_IteratorR, _IteratorL>
1189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		const __normal_iterator<_IteratorR, _Container>& __rhs)
1191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
1196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr bool
1197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
1198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     noexcept(noexcept(__lhs.base() == __rhs.base()))
1200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     requires requires {
1201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { __lhs.base() == __rhs.base() } -> std::convertible_to<bool>;
1202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     }
1203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 44


1204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[nodiscard]]
1207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     constexpr std::__detail::__synth3way_t<_Iterator>
1208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,
1209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 		const __normal_iterator<_Iterator, _Container>& __rhs)
1210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     noexcept(noexcept(std::__detail::__synth3way(__lhs.base(), __rhs.base())))
1211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return std::__detail::__synth3way(__lhs.base(), __rhs.base()); }
1212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
1213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****    // Forward iterator requirements
1214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
1218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
  99              		.loc 3 1225 5 is_stmt 1 view .LVU11
 100              		.loc 3 1225 5 is_stmt 0 view .LVU12
 101              	.LBE514:
1086:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return begin() == end(); }
 102              		.loc 2 1086 34 view .LVU13
 103 0004 9842     		cmp	r0, r3
 104 0006 14BF     		ite	ne
 105 0008 0020     		movne	r0, #0
 106 000a 0120     		moveq	r0, #1
 107 000c 7047     		bx	lr
 108              		.cfi_endproc
 109              	.LFE1287:
 110              		.cantunwind
 111              		.fnend
 113              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EE4backEv,"axG",%progbits,_ZNSt6vectorI8PathStepSaIS0_E
 114              		.align	1
 115              		.weak	_ZNSt6vectorI8PathStepSaIS0_EE4backEv
 116              		.syntax unified
 117              		.thumb
 118              		.thumb_func
 120              	_ZNSt6vectorI8PathStepSaIS0_EE4backEv:
 121              		.fnstart
 122              	.LVL4:
 123              	.LFB1288:
1087:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1088:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1089:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
1090:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *          elements.
1091:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __n  Number of elements required.
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
1093:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1094:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function attempts to reserve enough memory for the
1095:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
1096:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  number requested is more than max_size(), length_error is
1097:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  thrown.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 45


1098:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1099:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The advantage of this function is that if optimal code is a
1100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  necessity and the user can determine the number of elements
1101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  that will be required, the user can reserve the memory in
1102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
1103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  and copying of %vector data.
1104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       reserve(size_type __n);
1108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // element access
1110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  accessed.
1114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  Read/write reference to data.
1115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  see at().)
1120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       reference
1123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       operator[](size_type __n) _GLIBCXX_NOEXCEPT
1124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
1131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  accessed.
1133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This operator allows for easy, array-style, data access.
1136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that data access with this operator is unchecked and
1137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
1138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  see at().)
1139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reference
1142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       operator[](size_type __n) const _GLIBCXX_NOEXCEPT
1143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_requires_subscript(__n);
1145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *(this->_M_impl._M_start + __n);
1146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     protected:
1149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /// Safety check used only from at().
1150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_range_check(size_type __n) const
1153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (__n >= this->size())
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 46


1155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
1156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				       "(which is %zu) >= this->size() "
1157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				       "(which is %zu)"),
1158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				   __n, this->size());
1159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     public:
1162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  accessed.
1166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  Read/write reference to data.
1167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       reference
1175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       at(size_type __n)
1176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_check(__n);
1178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return (*this)[__n];
1179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
1183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param __n The index of the element for which data should be
1184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  accessed.
1185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  Read-only (constant) reference to data.
1186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
1187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function provides for safer data access.  The parameter
1189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
1190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  function throws out_of_range if the check fails.
1191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reference
1194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       at(size_type __n) const
1195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_check(__n);
1197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return (*this)[__n];
1198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read/write reference to the data at the first
1202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element of the %vector.
1203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       reference
1206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       front() _GLIBCXX_NOEXCEPT
1207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *begin();
1210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 47


1212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
1214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element of the %vector.
1215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reference
1218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       front() const _GLIBCXX_NOEXCEPT
1219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *begin();
1222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read/write reference to the data at the last
1226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element of the %vector.
1227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       reference
1230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       back() _GLIBCXX_NOEXCEPT
 124              		.loc 2 1230 7 is_stmt 1 view -0
 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 0
 127              		@ frame_needed = 0, uses_anonymous_args = 0
 128              		@ link register save eliminated.
 129              	.LBB515:
 130              	.LBI515:
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 131              		.loc 2 890 7 view .LVU15
 132              	.LBB516:
 133              	.LBB517:
 134              	.LBI517:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 135              		.loc 3 1076 7 view .LVU16
 136              	.LBB518:
 137              	.LBB519:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 138              		.loc 3 1077 9 is_stmt 0 view .LVU17
 139 0000 4068     		ldr	r0, [r0, #4]
 140              	.LVL5:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 141              		.loc 3 1077 9 view .LVU18
 142              	.LBE519:
 143              	.LBE518:
 144              	.LBE517:
 145              	.LBE516:
 146              	.LBE515:
 147              	.LBB520:
 148              	.LBI520:
1157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 149              		.loc 3 1157 7 is_stmt 1 view .LVU19
 150              	.LBB521:
 151              	.LBB522:
 152              	.LBI522:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 153              		.loc 3 1076 7 view .LVU20
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 154              		.loc 3 1076 7 is_stmt 0 view .LVU21
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 48


 155              	.LBE522:
 156              	.LBE521:
 157              	.LBE520:
1231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *(end() - 1);
1234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 158              		.loc 2 1234 7 view .LVU22
 159 0002 3038     		subs	r0, r0, #48
 160 0004 7047     		bx	lr
 161              		.cfi_endproc
 162              	.LFE1288:
 163              		.cantunwind
 164              		.fnend
 166              		.section	.text._ZNSt15__new_allocatorI8PathStepED2Ev,"axG",%progbits,_ZNSt15__new_allocatorI8PathS
 167              		.align	1
 168              		.weak	_ZNSt15__new_allocatorI8PathStepED2Ev
 169              		.syntax unified
 170              		.thumb
 171              		.thumb_func
 173              	_ZNSt15__new_allocatorI8PathStepED2Ev:
 174              		.fnstart
 175              	.LVL6:
 176              	.LFB1311:
 177              		.file 4 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/new_allocator.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** /** @file bits/new_allocator.h
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****  *  This is an internal header file, included by other library headers.
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****  */
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #ifndef _STD_NEW_ALLOCATOR_H
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #define _STD_NEW_ALLOCATOR_H 1
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 49


  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #include <bits/c++config.h>
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #include <new>
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #include <bits/functexcept.h>
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #include <bits/move.h>
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cplusplus >= 201103L
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #include <type_traits>
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** {
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****   /**
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * @brief  An allocator that uses global `new`, as per C++03 [20.4.1].
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * @ingroup allocators
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    *
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * This is precisely the allocator defined in the C++ Standard.
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    *   - all allocation calls `operator new`
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    *   - all deallocation calls `operator delete`
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    *
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * This is the default base-class implementation of `std::allocator`,
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * and is also the base-class of the `__gnu_cxx::new_allocator` extension.
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * You should use either `std::allocator` or `__gnu_cxx::new_allocator`
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * instead of using this directly.
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    *
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * @tparam  _Tp  Type of allocated object.
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    *
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    * @headerfile memory
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****    */
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****   template<typename _Tp>
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****     class __new_allocator
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****     {
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****     public:
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef _Tp        value_type;
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef std::size_t     size_type;
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef std::ptrdiff_t  difference_type;
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cplusplus <= 201703L
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef _Tp*       pointer;
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef const _Tp* const_pointer;
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef _Tp&       reference;
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef const _Tp& const_reference;
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       template<typename _Tp1>
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	struct rebind
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	{ typedef __new_allocator<_Tp1> other; };
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cplusplus >= 201103L
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       __attribute__((__always_inline__))
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 50


  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       __attribute__((__always_inline__))
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       _GLIBCXX20_CONSTEXPR
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       template<typename _Tp1>
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	__attribute__((__always_inline__))
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	_GLIBCXX20_CONSTEXPR
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cplusplus <= 201703L
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 178              		.loc 4 100 7 is_stmt 1 view -0
 179              		.cfi_startproc
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              		@ link register save eliminated.
 183              		.loc 4 100 50 is_stmt 0 view .LVU24
 184 0000 7047     		bx	lr
 185              		.cfi_endproc
 186              	.LFE1311:
 187              		.cantunwind
 188              		.fnend
 190              		.weak	_ZNSt15__new_allocatorI8PathStepED1Ev
 191              		.thumb_set _ZNSt15__new_allocatorI8PathStepED1Ev,_ZNSt15__new_allocatorI8PathStepED2Ev
 192              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_,"axG",%progbits,_ZNSt6ve
 193              		.align	1
 194              		.weak	_ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 199              	_ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_:
 200              		.fnstart
 201              	.LVL7:
 202              	.LFB1326:
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 203              		.loc 2 501 7 is_stmt 1 view -0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 0
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 207              		.loc 2 501 7 is_stmt 0 view .LVU26
 208 0000 70B5     		push	{r4, r5, r6, lr}
 209              	.LCFI0:
 210              		.cfi_def_cfa_offset 16
 211              		.cfi_offset 4, -16
 212              		.cfi_offset 5, -12
 213              		.cfi_offset 6, -8
 214              		.cfi_offset 14, -4
 215 0002 0446     		mov	r4, r0
 216 0004 0E46     		mov	r6, r1
 217 0006 1546     		mov	r5, r2
 218              	.LVL8:
 219              	.LBB523:
 220              	.LBI523:
 221              		.file 5 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/stl_uninitialized.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 51


   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  *
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * Copyright (c) 1994
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * Hewlett-Packard Company
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  *
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  *
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  *
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  *
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  */
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****  */
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 52


  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #include <type_traits>
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #include <bits/stl_algobase.h>    // copy
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #include <ext/alloc_traits.h>     // __alloc_traits
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if __cplusplus >= 201703L
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #include <bits/stl_pair.h>
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** {
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /** @addtogroup memory
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @{
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    */
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @cond undocumented
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ValueType, typename _Tp>
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     constexpr bool
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __check_constructible()
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // Trivial types can have deleted constructors, but std::copy etc.
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // only use assignment (or memmove) not construction, so we need an
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // explicit check that construction from _Tp is actually valid,
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // otherwise some ill-formed uses of std::uninitialized_xxx would
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // compile without errors. This gives a nice clear error message.
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       static_assert(is_constructible<_ValueType, _Tp>::value,
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  "result type must be constructible from input type");
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return true;
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // If the type is trivial we don't need to construct it, just assign to it.
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // But trivial types can still have deleted or inaccessible assignment,
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // so don't try to use std::copy or std::fill etc. if we can't assign.
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** # define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __is_trivial(T) && __is_assignable(T&, U) \
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     && std::__check_constructible<T, U>()
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #else
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // No need to check if is_constructible<T, U> for C++98. Trivial types have
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // no user-declared constructors, so if the assignment is valid, construction
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** // should be too.
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** # define _GLIBCXX_USE_ASSIGN_FOR_INIT(T, U) \
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __is_trivial(T) && __is_assignable(T&, U)
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _ForwardIterator
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __do_uninit_copy(_InputIterator __first, _InputIterator __last,
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 53


 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return __cur;
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<bool _TrivialValueTypes>
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_copy
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static _ForwardIterator
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{ return std::__do_uninit_copy(__first, __last, __result); }
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<>
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_copy<true>
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static _ForwardIterator
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @endcond
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType1;
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType2;
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // _ValueType1 must be trivially-copyable to use memmove, so don't
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // bother optimizing to std::copy if it isn't.
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // XXX Unnecessary because std::copy would check it anyway?
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 54


 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       const bool __can_memmove = __is_trivial(_ValueType1);
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if __cplusplus < 201103L
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::reference _From;
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #else
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       using _From = decltype(*__first);
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       const bool __assignable
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType2, _From);
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return std::__uninitialized_copy<__can_memmove && __assignable>::
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @cond undocumented
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR void
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     const _Tp& __x)
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), __x);
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur);
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_fill
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static void
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		      const _Tp& __x)
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{ std::__do_uninit_fill(__first, __last, __x); }
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<>
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_fill<true>
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static void
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		      const _Tp& __x)
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @endcond
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 55


 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return   Nothing.
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		       const _Tp& __x)
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType;
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // Trivial types do not need a constructor to begin their lifetime,
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // so try to use std::fill to benefit from its memset optimization.
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       const bool __can_fill
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType, const _Tp&);
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       std::__uninitialized_fill<__can_fill>::
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @cond undocumented
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _ForwardIterator
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), __x);
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return __cur;
 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur);
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_fill_n
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	static _ForwardIterator
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			const _Tp& __x)
 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{ return std::__do_uninit_fill_n(__first, __n, __x); }
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 56


 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	static _ForwardIterator
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			const _Tp& __x)
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         { return std::fill_n(__first, __n, __x); }
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @endcond
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    // DR 1339. uninitialized_fill_n should return the end of its range
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __x      The source value.
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return   Nothing.
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType;
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // Trivial types do not need a constructor to begin their lifetime,
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // so try to use std::fill_n to benefit from its optimizations.
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       const bool __can_fill
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	= _GLIBCXX_USE_ASSIGN_FOR_INIT(_ValueType, const _Tp&)
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // For arbitrary class types and floating point types we can't assume
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // that __n > 0 and std::__size_to_integer(__n) > 0 are equivalent,
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // so only use std::fill_n when _Size is already an integral type.
 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	&& __is_integer<_Size>::__value;
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __uninitialized_fill_n<__can_fill>::
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #undef _GLIBCXX_USE_ASSIGN_FOR_INIT
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @cond undocumented
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  any of the POD optimizations.
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _Allocator>
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _ForwardIterator
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 57


 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __first != __last; ++__first, (void)++__cur)
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return __cur;
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if _GLIBCXX_HOSTED
 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       if (std::is_constant_evaluated())
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	return std::__do_uninit_copy(__first, __last, __result);
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return std::uninitialized_copy(__first, __last, __result);
 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _Allocator>
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 					 __result, __alloc);
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _Allocator>
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				       _InputIterator __last,
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				       _ForwardIterator __result,
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				       _Allocator& __alloc)
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return std::__uninitialized_copy_a
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 58


 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     void
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if _GLIBCXX_HOSTED
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       if (std::is_constant_evaluated())
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	return std::__do_uninit_fill(__first, __last, __x);
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       std::uninitialized_fill(__first, __last, __x);
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _Allocator>
 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****      _GLIBCXX20_CONSTEXPR
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _ForwardIterator
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return __cur;
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 59


 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if _GLIBCXX_HOSTED
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _Tp2>
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       if (std::is_constant_evaluated())
 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	return std::__do_uninit_fill_n(__first, __n, __x);
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return std::uninitialized_fill_n(__first, __n, __x);
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Extensions: __uninitialized_copy_move, __uninitialized_move_copy,
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_fill_move, __uninitialized_move_fill.
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // All of these algorithms take a user-supplied allocator, which is used
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // for construction and destruction.
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_copy_move
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Copies [first1, last1) into [result, result + (last1 - first1)), and
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  move [first2, last2) into
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_move(_InputIterator1 __first1,
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 							   __result,
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 							   __alloc);
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_move_copy
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Moves [first1, last1) into [result, result + (last1 - first1)), and
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  copies [first2, last2) into
 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  [result, result + (last1 - first1) + (last2 - first2)).
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator1, typename _InputIterator2,
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _ForwardIterator, typename _Allocator>
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 60


 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_move_copy(_InputIterator1 __first1,
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _InputIterator1 __last1,
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _InputIterator2 __first2,
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _InputIterator2 __last2,
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _ForwardIterator __result,
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 							   __result,
 525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 							   __alloc);
 526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_fill_move
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Fills [result, mid) with x, and moves [first, last) into
 539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  [mid, mid + (last - first)).
 540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
 541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _Allocator>
 542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
 544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      const _Tp& __x, _InputIterator __first,
 545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _InputIterator __last, _Allocator& __alloc)
 546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
 548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __mid, __alloc);
 555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_move_fill
 560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Moves [first1, last1) into [first2, first2 + (last1 - first1)), and
 561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   //  fills [first2 + (last1 - first1), last2) with x.
 562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
 563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _Allocator>
 564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
 565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
 566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _ForwardIterator __first2,
 567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _ForwardIterator __last2, const _Tp& __x,
 568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
 571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 							    __first2,
 572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 							    __alloc);
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 61


 573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__first2, __mid2, __alloc);
 580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @endcond
 585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
 587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @cond undocumented
 588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Extensions: __uninitialized_default, __uninitialized_default_n,
 590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default_a, __uninitialized_default_n_a.
 591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_1
 594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static void
 597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         {
 599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __try
 601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __catch(...)
 606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 608:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      __throw_exception_again;
 609:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 610:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 611:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 612:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<>
 614:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_1<true>
 615:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 616:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 617:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static void
 618:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_default(_ForwardIterator __first, _ForwardIterator __last)
 619:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         {
 620:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  if (__first == __last)
 621:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    return;
 622:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 623:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  typename iterator_traits<_ForwardIterator>::value_type* __val
 624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    = std::__addressof(*__first);
 625:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Construct(__val);
 626:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  if (++__first != __last)
 627:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::fill(__first, __last, *__val);
 628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 629:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 62


 630:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 631:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 632:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1
 633:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 634:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 635:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_GLIBCXX20_CONSTEXPR
 636:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static _ForwardIterator
 637:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 638:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         {
 639:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 640:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __try
 641:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 642:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 643:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur));
 644:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      return __cur;
 645:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 646:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __catch(...)
 647:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 648:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 649:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      __throw_exception_again;
 650:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 651:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 652:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 653:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 654:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<>
 655:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_n_1<true>
 656:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 657:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 658:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_GLIBCXX20_CONSTEXPR
 659:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static _ForwardIterator
 660:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_default_n(_ForwardIterator __first, _Size __n)
 661:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         {
 662:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  if (__n > 0)
 663:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 664:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      typename iterator_traits<_ForwardIterator>::value_type* __val
 665:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		= std::__addressof(*__first);
 666:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      std::_Construct(__val);
 667:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      ++__first;
 668:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      __first = std::fill_n(__first, __n - 1, *__val);
 669:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 670:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return __first;
 671:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 672:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 673:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 674:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default
 675:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Fills [first, last) with value-initialized value_types.
 676:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 677:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
 678:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default(_ForwardIterator __first,
 679:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			    _ForwardIterator __last)
 680:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 681:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 682:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType;
 683:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // trivial types can have deleted assignment
 684:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       const bool __assignable = is_copy_assignable<_ValueType>::value;
 685:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 686:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       std::__uninitialized_default_1<__is_trivial(_ValueType)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 63


 687:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				     && __assignable>::
 688:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_default(__first, __last);
 689:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 690:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 691:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default_n
 692:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Fills [first, first + n) with value-initialized value_types.
 693:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 694:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 695:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 696:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default_n(_ForwardIterator __first, _Size __n)
 697:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 698:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
 699:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       if (std::is_constant_evaluated())
 700:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	return __uninitialized_default_n_1<false>::
 701:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		 __uninit_default_n(__first, __n);
 702:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 703:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 704:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 705:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType;
 706:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       // See uninitialized_fill_n for the conditions for using std::fill_n.
 707:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       constexpr bool __can_fill
 708:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	= __and_<is_integral<_Size>, is_copy_assignable<_ValueType>>::value;
 709:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 710:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __uninitialized_default_n_1<__is_trivial(_ValueType)
 711:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 					 && __can_fill>::
 712:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_default_n(__first, __n);
 713:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 714:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 715:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 716:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default_a
 717:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Fills [first, last) with value_types constructed by the allocator
 718:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // alloc, with no arguments passed to the construct call.
 719:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Allocator>
 720:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     void
 721:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 722:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
 723:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _Allocator& __alloc)
 724:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 725:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 726:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 727:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 728:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 729:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 730:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 731:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 732:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 733:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 734:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 736:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 737:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 738:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 739:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if _GLIBCXX_HOSTED
 740:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 741:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
 742:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default_a(_ForwardIterator __first,
 743:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _ForwardIterator __last,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 64


 744:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      allocator<_Tp>&)
 745:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     { std::__uninitialized_default(__first, __last); }
 746:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 747:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 748:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default_n_a
 749:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Fills [first, first + n) with value_types constructed by the allocator
 750:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // alloc, with no arguments passed to the construct call.
 751:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Allocator>
 752:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR _ForwardIterator
 753:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 754:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				_Allocator& __alloc)
 755:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 756:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 757:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 758:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 759:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 760:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__cur)
 761:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur));
 762:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return __cur;
 763:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 764:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 765:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 766:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 767:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 768:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 769:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 770:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 771:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if _GLIBCXX_HOSTED
 772:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default_n_a specialization for std::allocator,
 773:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // which ignores the allocator and value-initializes the elements.
 774:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 775:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
 776:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 777:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,
 778:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				allocator<_Tp>&)
 779:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     { return std::__uninitialized_default_n(__first, __n); }
 780:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 781:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 782:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 783:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1
 784:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 785:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 786:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	static void
 787:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_default_novalue(_ForwardIterator __first,
 788:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 789:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 790:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 791:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __try
 792:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 793:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 794:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 795:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 796:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __catch(...)
 797:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 798:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 799:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      __throw_exception_again;
 800:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 65


 801:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 802:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 803:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 804:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<>
 805:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_1<true>
 806:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 807:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator>
 808:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         static void
 809:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****         __uninit_default_novalue(_ForwardIterator __first,
 810:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				 _ForwardIterator __last)
 811:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 812:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 813:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 814:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 815:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<bool _TrivialValueType>
 816:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1
 817:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 818:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 819:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	static _ForwardIterator
 820:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 821:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 822:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 823:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __try
 824:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 825:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      for (; __n > 0; --__n, (void) ++__cur)
 826:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		std::_Construct_novalue(std::__addressof(*__cur));
 827:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      return __cur;
 828:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 829:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __catch(...)
 830:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
 831:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 832:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      __throw_exception_again;
 833:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
 834:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 835:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 836:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 837:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<>
 838:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __uninitialized_default_novalue_n_1<true>
 839:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 840:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size>
 841:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	static _ForwardIterator
 842:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)
 843:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{ return std::next(__first, __n); }
 844:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 845:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 846:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default_novalue
 847:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Fills [first, last) with default-initialized value_types.
 848:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator>
 849:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
 850:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default_novalue(_ForwardIterator __first,
 851:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 852:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 853:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 854:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType;
 855:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 856:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       std::__uninitialized_default_novalue_1<
 857:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 66


 858:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_default_novalue(__first, __last);
 859:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 860:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 861:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // __uninitialized_default_novalue_n
 862:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Fills [first, first + n) with default-initialized value_types.
 863:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size>
 864:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 865:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)
 866:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 867:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 868:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType;
 869:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n_1<
 871:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	is_trivially_default_constructible<_ValueType>::value>::
 872:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	__uninit_default_novalue_n(__first, __n);
 873:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 874:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 875:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 876:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 877:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _ForwardIterator
 878:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_n(_InputIterator __first, _Size __n,
 879:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 881:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 882:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 883:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 884:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 885:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 886:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return __cur;
 887:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 888:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 889:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 891:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 892:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 893:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 894:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 895:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 896:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 897:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 898:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,
 899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 901:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __first + __n, __result); }
 902:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 903:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size,
 904:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 905:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     pair<_InputIterator, _ForwardIterator>
 906:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 907:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result, input_iterator_tag)
 908:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 909:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 910:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __try
 911:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 912:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  for (; __n > 0; --__n, (void) ++__first, ++__cur)
 913:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 914:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  return {__first, __cur};
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 67


 915:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 916:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __catch(...)
 917:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
 918:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  std::_Destroy(__result, __cur);
 919:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __throw_exception_again;
 920:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
 921:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 922:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 923:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _RandomAccessIterator, typename _Size,
 924:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	   typename _ForwardIterator>
 925:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline pair<_RandomAccessIterator, _ForwardIterator>
 926:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,
 927:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result,
 928:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   random_access_iterator_tag)
 929:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 930:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       auto __second_res = uninitialized_copy(__first, __first + __n, __result);
 931:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       auto __first_res = std::next(__first, __n);
 932:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return {__first_res, __second_res};
 933:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 934:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 935:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @endcond
 936:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 937:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
 938:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Copies the range [first,first+n) into result.
 939:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
 940:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __n      The number of elements to copy.
 941:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
 942:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return  __result + __n
 943:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @since C++11
 944:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *
 945:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  Like copy_n(), but does not require an initialized output range.
 946:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
 947:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 948:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 949:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_copy_n(_InputIterator __first, _Size __n,
 950:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
 951:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     { return std::__uninitialized_copy_n(__first, __n, __result,
 952:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 					 std::__iterator_category(__first)); }
 953:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 954:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @cond undocumented
 955:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _InputIterator, typename _Size, typename _ForwardIterator>
 956:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
 957:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,
 958:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			      _ForwardIterator __result)
 959:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 960:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return
 961:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__uninitialized_copy_n_pair(__first, __n, __result,
 962:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 					 std::__iterator_category(__first));
 963:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 964:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @endcond
 965:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
 966:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 967:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if __cplusplus >= 201703L
 968:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** # define __cpp_lib_raw_memory_algorithms 201606L
 969:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 970:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
 971:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,last).
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 68


 972:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 973:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
 974:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @since C++17
 975:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
 976:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
 977:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
 978:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_default_construct(_ForwardIterator __first,
 979:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				    _ForwardIterator __last)
 980:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 981:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __uninitialized_default_novalue(__first, __last);
 982:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 983:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 984:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
 985:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Default-initializes objects in the range [first,first+count).
 986:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
 987:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
 988:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return   __first + __count
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @since C++17
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
 991:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
 992:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
 993:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)
 994:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
 995:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __uninitialized_default_novalue_n(__first, __count);
 996:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 997:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 998:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
 999:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,last).
1000:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
1001:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __last   A forward iterator.
1002:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @since C++17
1003:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
1004:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _ForwardIterator>
1005:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
1006:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_value_construct(_ForwardIterator __first,
1007:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				  _ForwardIterator __last)
1008:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
1009:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __uninitialized_default(__first, __last);
1010:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
1011:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1012:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
1013:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Value-initializes objects in the range [first,first+count).
1014:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  A forward iterator.
1015:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to construct.
1016:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return   __result + __count
1017:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @since C++17
1018:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
1019:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _ForwardIterator, typename _Size>
1020:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
1021:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)
1022:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
1023:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __uninitialized_default_n(__first, __count);
1024:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
1025:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1026:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
1027:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,last) into result.
1028:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 69


1029:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __last   An input iterator.
1030:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
1031:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return   __result + (__first - __last)
1032:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @since C++17
1033:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
1034:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator>
1035:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
1036:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_move(_InputIterator __first, _InputIterator __last,
1037:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
1038:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
1039:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return std::uninitialized_copy
1040:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
1041:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_ITERATOR(__last), __result);
1042:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
1043:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1044:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /**
1045:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @brief Move-construct from the range [first,first+count) into result.
1046:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __first  An input iterator.
1047:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __count  The number of objects to initialize.
1048:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @param  __result An output iterator.
1049:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @return  __result + __count
1050:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****    *  @since C++17
1051:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   */
1052:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _Size, typename _ForwardIterator>
1053:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline pair<_InputIterator, _ForwardIterator>
1054:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     uninitialized_move_n(_InputIterator __first, _Size __count,
1055:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			 _ForwardIterator __result)
1056:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
1057:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       auto __res = std::__uninitialized_copy_n_pair
1058:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
1059:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	 __count, __result);
1060:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return {__res.first.base(), __res.second};
1061:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
1062:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif // C++17
1063:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1064:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if __cplusplus >= 201103L
1065:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   /// @cond undocumented
1066:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1067:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _Tp, typename _Up, typename _Allocator>
1068:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1069:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline void
1070:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
1071:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			_Allocator& __alloc)
1072:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     noexcept(noexcept(std::allocator_traits<_Allocator>::construct(__alloc,
1073:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			 __dest, std::move(*__orig)))
1074:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	     && noexcept(std::allocator_traits<_Allocator>::destroy(
1075:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			    __alloc, std::__addressof(*__orig))))
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef std::allocator_traits<_Allocator> __traits;
1078:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __traits::construct(__alloc, __dest, std::move(*__orig));
1079:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       __traits::destroy(__alloc, std::__addressof(*__orig));
1080:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
1081:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1082:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // This class may be specialized for specific types.
1083:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   // Also known as is_trivially_relocatable.
1084:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template<typename _Tp, typename = void>
1085:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     struct __is_bitwise_relocatable
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 70


1086:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     : is_trivial<_Tp> { };
1087:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1088:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
1089:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    typename _Allocator>
1090:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1091:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __relocate_a_1(_InputIterator __first, _InputIterator __last,
1093:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
1094:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result),
1095:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 					       std::addressof(*__first),
1096:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 					       __alloc)))
1097:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
1098:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
1099:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType;
1100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
1101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	_ValueType2;
1102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       static_assert(std::is_same<_ValueType, _ValueType2>::value,
1103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  "relocation is only possible for values of the same type");
1104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       _ForwardIterator __cur = __result;
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
1106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
1107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 				 std::__addressof(*__first), __alloc);
1108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __cur;
1109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
1110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #if _GLIBCXX_HOSTED
1112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _Tp, typename _Up>
1113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
1115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __relocate_a_1(_Tp* __first, _Tp* __last,
1116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   _Tp* __result,
1117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   [[__maybe_unused__]] allocator<_Up>& __alloc) noexcept
1118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     {
1119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       ptrdiff_t __count = __last - __first;
1120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       if (__count > 0)
1121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	{
1122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #ifdef __cpp_lib_is_constant_evaluated
1123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  if (std::is_constant_evaluated())
1124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    {
1125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      // Can't use memmove. Wrap the pointer so that __relocate_a_1
1126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      // resolves to the non-trivial overload above.
1127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
1128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
1129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	      return __out.base();
1130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    }
1131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
1132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
1133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	}
1134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       return __result + __count;
1135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
1136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** #endif
1137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
1138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****   template <typename _InputIterator, typename _ForwardIterator,
1139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    typename _Allocator>
1140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     _GLIBCXX20_CONSTEXPR
1141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     inline _ForwardIterator
1142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     __relocate_a(_InputIterator __first, _InputIterator __last,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 71


 222              		.loc 5 1142 5 is_stmt 1 view .LVU27
 223              	.LBB524:
 224              	.LBI524:
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
 225              		.loc 5 1092 5 view .LVU28
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
 226              		.loc 5 1092 5 is_stmt 0 view .LVU29
 227 0008 0FE0     		b	.L6
 228              	.LVL9:
 229              	.L7:
 230              	.LBB525:
 231              	.LBB526:
 232              	.LBI526:
1070:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			_Allocator& __alloc)
 233              		.loc 5 1070 5 is_stmt 1 view .LVU30
 234              	.LBB527:
 235              	.LBB528:
 236              	.LBI528:
 237              		.file 6 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/alloc_traits.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // Copyright (C) 2011-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** /** @file bits/alloc_traits.h
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****  *  This is an internal header file, included by other library headers.
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****  *  Do not attempt to use it directly. @headername{memory}
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****  */
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #ifndef _ALLOC_TRAITS_H
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #define _ALLOC_TRAITS_H 1
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #include <bits/stl_construct.h>
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #include <bits/memoryfwd.h>
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus >= 201103L
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** # include <bits/ptr_traits.h>
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** # include <ext/numeric_traits.h>
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** # if _GLIBCXX_HOSTED
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 72


  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #  include <bits/allocator.h>
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** # endif
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** {
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus >= 201103L
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #define __cpp_lib_allocator_traits_is_always_equal 201411L
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /// @cond undocumented
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   struct __allocator_traits_base
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   {
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp, typename _Up, typename = void>
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       struct __rebind : __replace_first_arg<_Tp, _Up>
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       {
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static_assert(is_same<
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  typename __replace_first_arg<_Tp, typename _Tp::value_type>::type,
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 			_Tp>::value,
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  "allocator_traits<A>::rebind_alloc<A::value_type> must be A");
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       };
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp, typename _Up>
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       struct __rebind<_Tp, _Up,
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		      __void_t<typename _Tp::template rebind<_Up>::other>>
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       {
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using type = typename _Tp::template rebind<_Up>::other;
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static_assert(is_same<
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  typename _Tp::template rebind<typename _Tp::value_type>::other,
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 			_Tp>::value,
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  "allocator_traits<A>::rebind_alloc<A::value_type> must be A");
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       };
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   protected:
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __pointer = typename _Tp::pointer;
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __c_pointer = typename _Tp::const_pointer;
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __v_pointer = typename _Tp::void_pointer;
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __cv_pointer = typename _Tp::const_void_pointer;
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __pocca = typename _Tp::propagate_on_container_copy_assignment;
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __pocma = typename _Tp::propagate_on_container_move_assignment;
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __pocs = typename _Tp::propagate_on_container_swap;
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     template<typename _Tp>
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __equal = __type_identity<typename _Tp::is_always_equal>;
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   };
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc, typename _Up>
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     using __alloc_rebind
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       = typename __allocator_traits_base::template __rebind<_Alloc, _Up>::type;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 73


  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /// @endcond
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /**
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    * @brief  Uniform interface to all allocator types.
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    * @headerfile memory
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    * @ingroup allocators
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    * @since C++11
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   */
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct allocator_traits : __allocator_traits_base
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator type
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       typedef _Alloc allocator_type;
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocated type
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       typedef typename _Alloc::value_type value_type;
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   The allocator's pointer type.
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::pointer if that type exists, otherwise @c value_type*
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     private:
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       // Select _Func<_Alloc> or pointer_traits<pointer>::rebind<_Tp>
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp, typename = void>
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	struct _Ptr
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	};
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<template<typename> class _Func, typename _Tp>
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  using type = _Func<_Alloc>;
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	};
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       // Select _A2::difference_type or pointer_traits<_Ptr>::difference_type
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _A2, typename _PtrT, typename = void>
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	struct _Diff
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ using type = typename pointer_traits<_PtrT>::difference_type; };
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _A2, typename _PtrT>
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ using type = typename _A2::difference_type; };
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       // Select _A2::size_type or make_unsigned<_DiffT>::type
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _A2, typename _DiffT, typename = void>
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	struct _Size : make_unsigned<_DiffT> { };
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _A2, typename _DiffT>
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ using type = typename _A2::size_type; };
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     public:
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   The allocator's const pointer type.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 74


 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::const_pointer if that type exists, otherwise
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const value_type> </tt>
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   The allocator's void pointer type.
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::void_pointer if that type exists, otherwise
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<void> </tt>
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using void_pointer = typename _Ptr<__v_pointer, void>::type;
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   The allocator's const void pointer type.
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::const_void_pointer if that type exists, otherwise
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::rebind<const void> </tt>
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   The allocator's difference type
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::difference_type if that type exists, otherwise
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * <tt> pointer_traits<pointer>::difference_type </tt>
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using difference_type = typename _Diff<_Alloc, pointer>::type;
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   The allocator's size type
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::size_type if that type exists, otherwise
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * <tt> make_unsigned<difference_type>::type </tt>
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using size_type = typename _Size<_Alloc, difference_type>::type;
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   How the allocator is propagated on copy assignment
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_copy_assignment if that type exists,
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * otherwise @c false_type
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_copy_assignment
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocca, _Alloc>;
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   How the allocator is propagated on move assignment
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_move_assignment if that type exists,
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * otherwise @c false_type
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_move_assignment
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocma, _Alloc>;
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 75


 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   How the allocator is propagated on swap
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::propagate_on_container_swap if that type exists,
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * otherwise @c false_type
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_swap
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	= __detected_or_t<false_type, __pocs, _Alloc>;
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @brief   Whether all instances of the allocator type compare equal.
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * @c Alloc::is_always_equal if that type exists,
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        * otherwise @c is_empty<Alloc>::type
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using is_always_equal
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	= typename __detected_or_t<is_empty<_Alloc>, __equal, _Alloc>::type;
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp>
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp>
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;
 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     private:
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2>
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static constexpr auto
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	-> decltype(__a.allocate(__n, __hint))
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ return __a.allocate(__n, __hint); }
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2>
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static constexpr pointer
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ return __a.allocate(__n); }
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	struct __construct_helper
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  template<typename _Alloc2,
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	    typename = decltype(std::declval<_Alloc2*>()->construct(
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		  std::declval<_Tp*>(), std::declval<_Args>()...))>
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	    static true_type __test(int);
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  template<typename>
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	    static false_type __test(...);
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  using type = decltype(__test<_Alloc>(0));
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	};
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using __has_construct
 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  = typename __construct_helper<_Tp, _Args...>::type;
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR _Require<__has_construct<_Tp, _Args...>>
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ __a.construct(__p, std::forward<_Args>(__args)...); }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 76


 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_Require<__and_<__not_<__has_construct<_Tp, _Args...>>,
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 			       is_constructible<_Tp, _Args...>>>
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_construct(_Alloc&, _Tp* __p, _Args&&... __args)
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Tp, _Args...>::value)
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus <= 201703L
 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	}
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR auto
 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_destroy(_Alloc2& __a, _Tp* __p, int)
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(noexcept(__a.destroy(__p)))
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	-> decltype(__a.destroy(__p))
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ __a.destroy(__p); }
 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2, typename _Tp>
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX14_CONSTEXPR void
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_destroy(_Alloc2&, _Tp* __p, ...)
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(std::is_nothrow_destructible<_Tp>::value)
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ std::_Destroy(__p); }
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2>
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static constexpr auto
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_max_size(_Alloc2& __a, int)
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	-> decltype(__a.max_size())
 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ return __a.max_size(); }
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2>
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static constexpr size_type
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_max_size(_Alloc2&, ...)
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  // 2466. allocator_traits::max_size() default behavior is incorrect
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  return __gnu_cxx::__numeric_traits<size_type>::__max
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	    / sizeof(value_type);
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	}
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2>
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static constexpr auto
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, int)
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	-> decltype(__a.select_on_container_copy_construction())
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ return __a.select_on_container_copy_construction(); }
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Alloc2>
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static constexpr _Alloc2
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	_S_select(_Alloc2& __a, ...)
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ return __a; }
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     public:
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 77


 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Allocate memory.
 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n)
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return __a.allocate(__n); }
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Allocate memory.
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *          of type @c value_type
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt> if that expression is
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  well-formed, otherwise returns @c a.allocate(n)
 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       _GLIBCXX_NODISCARD static _GLIBCXX20_CONSTEXPR pointer
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return _S_allocate(__a, __n, __hint, 0); }
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       deallocate(_Alloc& __a, pointer __p, size_type __n)
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Tp`
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for Tp
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  if that expression is well-formed, otherwise uses placement-new
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  to construct an object of type @a _Tp at location @a __p from the
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  arguments @a __args...
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp, typename... _Args>
 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR auto
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(noexcept(_S_construct(__a, __p,
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 				       std::forward<_Args>(__args)...)))
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	-> decltype(_S_construct(__a, __p, std::forward<_Args>(__args)...))
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ _S_construct(__a, __p, std::forward<_Args>(__args)...); }
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 78


 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Tp
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p) if that expression is well-formed,
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  otherwise calls @c __p->~_Tp()
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Tp>
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	destroy(_Alloc& __a, _Tp* __p)
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(noexcept(_S_destroy(__a, __p, 0)))
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ _S_destroy(__a, __p, 0); }
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @return @c __a.max_size() or @c numeric_limits<size_type>::max()
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Returns @c __a.max_size() if that expression is well-formed,
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  otherwise returns @c numeric_limits<size_type>::max()
 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       max_size(const _Alloc& __a) noexcept
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return _S_max_size(__a, 0); }
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @return @c __rhs.select_on_container_copy_construction() or @a __rhs
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Returns @c __rhs.select_on_container_copy_construction() if that
 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  expression is well-formed, otherwise returns @a __rhs
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR _Alloc
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       select_on_container_copy_construction(const _Alloc& __rhs)
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return _S_select(__rhs, 0); }
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     };
 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if _GLIBCXX_HOSTED
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus > 201703L
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** # define __cpp_lib_constexpr_dynamic_alloc 201907L
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /// Partial specialization for std::allocator.
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Tp>
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct allocator_traits<allocator<_Tp>>
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator type
 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using allocator_type = allocator<_Tp>;
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocated type
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using value_type = _Tp;
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's pointer type.
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using pointer = _Tp*;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 79


 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's const pointer type.
 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using const_pointer = const _Tp*;
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's void pointer type.
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using void_pointer = void*;
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's const void pointer type.
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using const_void_pointer = const void*;
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's difference type
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's size type
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using size_type = std::size_t;
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// How the allocator is propagated on move assignment
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// How the allocator is propagated on swap
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_swap = false_type;
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using is_always_equal = true_type;
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up>
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up>
 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Allocate memory.
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls @c a.allocate(n)
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       [[__nodiscard__,__gnu__::__always_inline__]]
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR pointer
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n)
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return __a.allocate(__n); }
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Allocate memory.
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __n  The number of objects to allocate space for.
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __hint Aid to locality.
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @return Memory of suitable size and alignment for @a n objects
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *          of type @c value_type
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Returns <tt> a.allocate(n, hint) </tt>
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       [[__nodiscard__,__gnu__::__always_inline__]]
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 80


 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR pointer
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       allocate(allocator_type& __a, size_type __n, const_void_pointer __hint)
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       {
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus <= 201703L
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	return __a.allocate(__n, __hint);
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	return __a.allocate(__n);
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       }
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Deallocate memory.
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to the memory to deallocate.
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __n  The number of objects space was allocated for.
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls <tt> a.deallocate(p, n) </tt>
 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       [[__gnu__::__always_inline__]]
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR void
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       deallocate(allocator_type& __a, pointer __p, size_type __n)
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *	       an object of type `_Up`.
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up, typename... _Args>
 530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	[[__gnu__::__always_inline__]]
 531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 238              		.loc 6 532 2 view .LVU31
 239              	.LBB529:
 240              	.LBI529:
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       pointer
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       { return std::__addressof(__x); }
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       const_pointer
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       { return std::__addressof(__x); }
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __has_builtin(__builtin_operator_new) >= 201802L
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_NEW __builtin_operator_new
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_DELETE __builtin_operator_delete
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #else
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_NEW ::operator new
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** # define _GLIBCXX_OPERATOR_DELETE ::operator delete
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 81


 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       // about what the return value is when __n == 0.
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       _GLIBCXX_NODISCARD _Tp*
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       allocate(size_type __n, const void* = static_cast<const void*>(0))
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       {
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cplusplus >= 201103L
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	// _GLIBCXX_RESOLVE_LIB_DEFECTS
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	// 3308. std::allocator<void>().allocate(n)
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	static_assert(sizeof(_Tp) != 0, "cannot allocate incomplete types");
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	if (__builtin_expect(__n > this->_M_max_size(), false))
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  {
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    // _GLIBCXX_RESOLVE_LIB_DEFECTS
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    // 3190. allocator::allocate sometimes returns too little storage
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	      std::__throw_bad_array_new_length();
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    std::__throw_bad_alloc();
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  }
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cpp_aligned_new
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  {
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 							   __al));
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  }
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       // __p is not permitted to be a null pointer.
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       void
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       {
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cpp_sized_deallocation
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** # define _GLIBCXX_SIZED_DEALLOC(p, n) (p), (n) * sizeof(_Tp)
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #else
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** # define _GLIBCXX_SIZED_DEALLOC(p, n) (p)
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cpp_aligned_new
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  {
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 				     std::align_val_t(alignof(_Tp)));
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    return;
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  }
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #endif
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #undef _GLIBCXX_SIZED_DEALLOC
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #undef _GLIBCXX_OPERATOR_DELETE
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #undef _GLIBCXX_OPERATOR_NEW
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 82


 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cplusplus <= 201703L
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       __attribute__((__always_inline__))
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       size_type
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       { return _M_max_size(); }
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** #if __cplusplus >= 201103L
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       template<typename _Up, typename... _Args>
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	__attribute__((__always_inline__))
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	void
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	construct(_Up* __p, _Args&&... __args)
 241              		.loc 4 185 2 view .LVU32
 242              	.LBB530:
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 243              		.loc 4 187 4 is_stmt 0 discriminator 1 view .LVU33
 244 000a AC46     		mov	ip, r5
 245 000c A646     		mov	lr, r4
 246 000e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 247 0012 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 248 0016 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 249 001a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 250 001e 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 251 0022 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 252              	.LVL10:
 253              		.loc 4 187 4 discriminator 1 view .LVU34
 254              	.LBE530:
 255              	.LBE529:
 256              	.LBE528:
 257              	.LBE527:
 258              	.LBE526:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 259              		.loc 5 1105 7 is_stmt 1 discriminator 2 view .LVU35
 260 0026 3034     		adds	r4, r4, #48
 261              	.LVL11:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 262              		.loc 5 1105 44 is_stmt 0 discriminator 2 view .LVU36
 263 0028 3035     		adds	r5, r5, #48
 264              	.LVL12:
 265              	.L6:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 266              		.loc 5 1105 22 is_stmt 1 discriminator 1 view .LVU37
 267 002a A642     		cmp	r6, r4
 268 002c EDD1     		bne	.L7
 269              	.LVL13:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 270              		.loc 5 1105 22 is_stmt 0 discriminator 1 view .LVU38
 271              	.LBE525:
 272              	.LBE524:
 273              	.LBE523:
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif // C++11
 274              		.loc 2 511 7 view .LVU39
 275 002e 2846     		mov	r0, r5
 276 0030 70BD     		pop	{r4, r5, r6, pc}
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif // C++11
 277              		.loc 2 511 7 view .LVU40
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 83


 278              		.cfi_endproc
 279              	.LFE1326:
 280              		.cantunwind
 281              		.fnend
 283              		.section	.text._ZSt8_DestroyIP8PathStepEvT_S2_,"axG",%progbits,_ZSt8_DestroyIP8PathStepEvT_S2_,com
 284              		.align	1
 285              		.weak	_ZSt8_DestroyIP8PathStepEvT_S2_
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 290              	_ZSt8_DestroyIP8PathStepEvT_S2_:
 291              		.fnstart
 292              	.LVL14:
 293              	.LFB1344:
 294              		.file 7 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/stl_construct.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  *
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * Copyright (c) 1994
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * Hewlett-Packard Company
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  *
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * representations about the suitability of this software for any
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  *
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  *
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * Copyright (c) 1996,1997
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  *
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 84


  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * representations about the suitability of this software for any
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  */
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** /** @file bits/stl_construct.h
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  */
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #include <new>
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #include <bits/move.h>
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #include <bits/stl_iterator_base_types.h> // for iterator_traits
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #include <bits/stl_iterator_base_funcs.h> // for advance
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** /* This file provides the C++17 functions std::destroy_at, std::destroy, and
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * std::destroy_n, and the C++20 function std::construct_at.
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * It also provides std::_Construct, std::_Destroy,and std::_Destroy_n functions
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * which are defined in all standard modes and so can be used in C++98-14 code.
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * The _Destroy functions will dispatch to destroy_at during constant
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * evaluation, because calls to that function are intercepted by the compiler
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  * to allow use in constant expressions.
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****  */
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** {
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #if __cplusplus >= 201703L
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template <typename _Tp>
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     destroy_at(_Tp* __location)
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       if constexpr (__cplusplus > 201703L && is_array_v<_Tp>)
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	{
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	  for (auto& __x : *__location)
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	    std::destroy_at(std::__addressof(__x));
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	}
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       else
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	__location->~_Tp();
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #if __cplusplus >= 202002L
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<typename _Tp, typename... _Args>
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     constexpr auto
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     construct_at(_Tp* __location, _Args&&... __args)
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #endif // C++20
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #endif// C++17
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 85


 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   /**
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    * object's constructor with an initializer.
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    */
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #if __cplusplus >= 201103L
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<typename _Tp, typename... _Args>
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _GLIBCXX20_CONSTEXPR
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     inline void
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _Construct(_Tp* __p, _Args&&... __args)
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #if __cplusplus >= 202002L
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       if (std::__is_constant_evaluated())
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	{
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	  // Allow std::_Construct to be used in constant expressions.
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	  return;
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	}
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #endif
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       ::new((void*)__p) _Tp(std::forward<_Args>(__args)...);
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #else
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<typename _T1, typename _T2>
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     inline void
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #endif
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<typename _T1>
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     inline void
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _Construct_novalue(_T1* __p)
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     { ::new((void*)__p) _T1; }
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<typename _ForwardIterator>
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _GLIBCXX20_CONSTEXPR void
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last);
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   /**
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    * Destroy the object pointed to by a pointer type.
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    */
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<typename _Tp>
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _GLIBCXX14_CONSTEXPR inline void
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _Destroy(_Tp* __pointer)
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #if __cplusplus > 201703L
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       std::destroy_at(__pointer);
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #else
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       __pointer->~_Tp();
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #endif
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<bool>
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     struct _Destroy_aux
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 86


 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       template<typename _ForwardIterator>
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	static _GLIBCXX20_CONSTEXPR void
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	{
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	  for (; __first != __last; ++__first)
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	}
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     };
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<>
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     struct _Destroy_aux<true>
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       template<typename _ForwardIterator>
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****         static void
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     };
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   /**
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****    */
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****   template<typename _ForwardIterator>
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _GLIBCXX20_CONSTEXPR inline void
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 295              		.loc 7 182 5 is_stmt 1 view -0
 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****                        _Value_type;
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #if __cplusplus >= 201103L
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       // A deleted destructor is trivial, this ensures we reject such types:
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       static_assert(is_destructible<_Value_type>::value,
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 		    "value type is destructible");
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #endif
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #if __cplusplus >= 202002L
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       if (std::__is_constant_evaluated())
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	return std::_Destroy_aux<false>::__destroy(__first, __last);
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** #endif
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h **** 	__destroy(__first, __last);
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 300              		.loc 7 197 5 is_stmt 0 view .LVU42
 301 0000 7047     		bx	lr
 302              		.cfi_endproc
 303              	.LFE1344:
 304              		.cantunwind
 305              		.fnend
 307              		.section	.text._ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc,"axG",%progbits,_ZNKSt6vectorI8P
 308              		.align	1
 309              		.weak	_ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc
 310              		.syntax unified
 311              		.thumb
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 87


 312              		.thumb_func
 314              	_ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc:
 315              		.fnstart
 316              	.LVL15:
 317              	.LFB1351:
1235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
1238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  last element of the %vector.
1239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const_reference
1242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       back() const _GLIBCXX_NOEXCEPT
1243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return *(end() - 1);
1246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
1250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // data access
1251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
1253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
1254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _Tp*
1257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
1258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       const _Tp*
1262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
1263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _M_data_ptr(this->_M_impl._M_start); }
1264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // [23.2.4.3] modifiers
1266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Add data to the end of the %vector.
1268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data to be added.
1269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This is a typical stack operation.  The function creates an
1271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  element at the end of the %vector and assigns the given data
1272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
1273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  done in constant time if the %vector has preallocated space
1274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  available.
1275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       push_back(const value_type& __x)
1279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
1281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
1282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
1283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
1284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				     __x);
1285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    ++this->_M_impl._M_finish;
1286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 88


1287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  }
1288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	else
1289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_realloc_insert(end(), __x);
1290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       push_back(value_type&& __x)
1296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { emplace_back(std::move(__x)); }
1297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename... _Args>
1299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus > 201402L
1300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	reference
1302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	emplace_back(_Args&&... __args);
1306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Removes last element.
1310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
1312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that no data is returned, and if the last element's
1314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
1315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  called.
1316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       pop_back() _GLIBCXX_NOEXCEPT
1320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_requires_nonempty();
1322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	--this->_M_impl._M_finish;
1323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
1324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
1325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
1330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __args  Arguments.
1332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert an object of type T constructed
1335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
1336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
1337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  and if it is frequently used the user should consider using
1338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  std::list.
1339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename... _Args>
1341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	iterator
1343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	emplace(const_iterator __position, _Args&&... __args)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 89


1344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ return _M_emplace_aux(__position, std::forward<_Args>(__args)...); }
1345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  used the user should consider using std::list.
1356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       insert(const_iterator __position, const value_type& __x);
1360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
1363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert a copy of the given value before
1368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  used the user should consider using std::list.
1371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       insert(iterator __position, const value_type& __x);
1374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
1379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert a copy of the given rvalue before
1384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the specified location.  Note that this kind of operation
1385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
1386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  used the user should consider using std::list.
1387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       insert(const_iterator __position, value_type&& __x)
1391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__x)); }
1392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
1395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __l  An initializer_list.
1397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert copies of the data in the
1399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  initializer_list @a l into the %vector before the location
1400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  specified by @a position.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 90


1401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  consider using std::list.
1405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       insert(const_iterator __position, initializer_list<value_type> __l)
1409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	auto __offset = __position - cbegin();
1411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_insert(begin() + __offset, __l.begin(), __l.end(),
1412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			std::random_access_iterator_tag());
1413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return begin() + __offset;
1414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  consider using std::list.
1431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       insert(const_iterator __position, size_type __n, const value_type& __x)
1435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	difference_type __offset = __position - cbegin();
1437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_fill_insert(begin() + __offset, __n, __x);
1438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return begin() + __offset;
1439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  Data to be inserted.
1446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert a specified number of copies of
1448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the given data before the location specified by @a position.
1449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  consider using std::list.
1453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 91


1458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  A const_iterator into the %vector.
1463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __first  An input iterator.
1464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __last   An input iterator.
1465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator that points to the inserted data.
1466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  by @a pos.
1470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  consider using std::list.
1474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator,
1476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	iterator
1479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	insert(const_iterator __position, _InputIterator __first,
1480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       _InputIterator __last)
1481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  difference_type __offset = __position - cbegin();
1483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_range_insert(begin() + __offset, __first, __last,
1484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			  std::__iterator_category(__first));
1485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  return begin() + __offset;
1486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
1487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __first  An input iterator.
1492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __last   An input iterator.
1493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will insert copies of the data in the range
1495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  by @a pos.
1497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  %vector and if it is frequently used the user should
1500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  consider using std::list.
1501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
1503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	insert(iterator __position, _InputIterator __first,
1505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	       _InputIterator __last)
1506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
1511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Remove element at given position.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 92


1515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will erase the element at the given position and thus
1519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  shorten the %vector by one.
1520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the pointer is the user's responsibility.
1527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       erase(const_iterator __position)
1532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _M_erase(begin() + (__position - cbegin())); }
1533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       erase(iterator __position)
1535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _M_erase(__position); }
1536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Remove a range of elements.
1540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *                  erased.
1543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *           prior to erasing (or end()).
1545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This function will erase the elements in the range
1547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note This operation could be expensive and if it is
1550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  frequently used the user should consider using std::list.
1551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  The user is also cautioned that this function only erases
1552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the elements, and that if the elements themselves are
1553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       erase(const_iterator __first, const_iterator __last)
1560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	const auto __beg = begin();
1562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	const auto __cbeg = cbegin();
1563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg));
1564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       erase(iterator __first, iterator __last)
1567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _M_erase(__first, __last); }
1568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @brief  Swaps data with another %vector.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 93


1572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *
1579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Whether the allocators are swapped depends on the allocator traits.
1580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       swap(vector& __x) _GLIBCXX_NOEXCEPT
1584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	__glibcxx_assert(_Alloc_traits::propagate_on_container_swap::value
1587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			 || _M_get_Tp_allocator() == __x._M_get_Tp_allocator());
1588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				  __x._M_get_Tp_allocator());
1592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  the user's responsibility.
1599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****     protected:
1606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       /**
1607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1608:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1609:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****        */
1610:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _ForwardIterator>
1611:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1612:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	pointer
1613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_allocate_and_copy(size_type __n,
1614:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1615:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1616:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1617:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  __try
1618:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    {
1619:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1620:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					  _M_get_Tp_allocator());
1621:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      return __result;
1622:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    }
1623:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  __catch(...)
1624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    {
1625:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      _M_deallocate(__result, __n);
1626:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      __throw_exception_again;
1627:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    }
1628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 94


1629:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1630:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1631:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Internal constructor functions follow.
1632:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1633:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1634:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1635:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus < 201103L
1636:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1637:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1638:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _Integer>
1639:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1640:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1641:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1642:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(_S_check_init_len(
1643:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		static_cast<size_type>(__n), _M_get_Tp_allocator()));
1644:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1645:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1646:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1647:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
1648:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1649:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1650:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
1651:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1652:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1653:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			       __false_type)
1654:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1655:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_range_initialize(__first, __last,
1656:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			      std::__iterator_category(__first));
1657:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
1658:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1659:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1660:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1661:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
1662:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1663:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1664:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_initialize(_InputIterator __first, _InputIterator __last,
1665:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			    std::input_iterator_tag)
1666:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1667:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  __try {
1668:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    for (; __first != __last; ++__first)
1669:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1670:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      emplace_back(*__first);
1671:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1672:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	      push_back(*__first);
1673:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1674:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  } __catch(...) {
1675:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    clear();
1676:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    __throw_exception_again;
1677:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  }
1678:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
1679:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1680:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the second initialize_dispatch above
1681:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _ForwardIterator>
1682:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1683:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1684:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
1685:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			    std::forward_iterator_tag)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 95


1686:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1687:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1688:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  this->_M_impl._M_start
1689:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
1690:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1691:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  this->_M_impl._M_finish =
1692:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1693:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					this->_M_impl._M_start,
1694:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					_M_get_Tp_allocator());
1695:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
1696:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1697:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1698:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // vector(n,value,a) constructor.
1699:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1700:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1701:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1702:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1703:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_finish =
1704:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
1705:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					_M_get_Tp_allocator());
1706:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1707:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1708:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1709:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the vector(n) constructor.
1710:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1711:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1712:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_default_initialize(size_type __n)
1713:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1714:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	this->_M_impl._M_finish =
1715:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
1716:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 					   _M_get_Tp_allocator());
1717:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
1718:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1719:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1720:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1721:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // assignment work for the range versions.
1722:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1723:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1724:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1725:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1726:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1727:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _Integer>
1728:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1729:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1730:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1731:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ _M_fill_assign(__n, __val); }
1732:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1733:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1734:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
1735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1736:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1737:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1738:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			   __false_type)
1739:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); }
1740:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1741:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the second assign_dispatch above
1742:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 96


1743:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1744:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1745:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_assign_aux(_InputIterator __first, _InputIterator __last,
1746:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		      std::input_iterator_tag);
1747:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1748:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the second assign_dispatch above
1749:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _ForwardIterator>
1750:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1751:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1752:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1753:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		      std::forward_iterator_tag);
1754:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1755:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1756:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // to be the same thing.
1757:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1758:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1759:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1760:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1761:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Internal insert functions follow.
1762:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1763:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1764:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1765:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1766:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1767:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _Integer>
1768:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1769:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1770:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1771:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			   __true_type)
1772:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ _M_fill_insert(__pos, __n, __val); }
1773:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1774:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1775:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
1776:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1777:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1778:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_insert_dispatch(iterator __pos, _InputIterator __first,
1779:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			   _InputIterator __last, __false_type)
1780:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1781:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _M_range_insert(__pos, __first, __last,
1782:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			  std::__iterator_category(__first));
1783:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	}
1784:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1785:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the second insert_dispatch above
1786:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _InputIterator>
1787:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1788:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1789:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _InputIterator __first,
1790:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1791:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1792:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by the second insert_dispatch above
1793:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _ForwardIterator>
1794:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1795:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1796:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_range_insert(iterator __pos, _ForwardIterator __first,
1797:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1798:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1799:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 97


1800:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // the same thing.
1801:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1802:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1803:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1804:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1805:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus >= 201103L
1806:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by resize(n).
1807:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1808:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1809:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_default_append(size_type __n);
1810:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1811:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1812:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       bool
1813:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_shrink_to_fit();
1814:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1815:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1816:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #if __cplusplus < 201103L
1817:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by insert(p,x)
1818:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1819:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1820:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1821:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       void
1822:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_realloc_insert(iterator __position, const value_type& __x);
1823:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
1824:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // A value_type object constructed with _Alloc_traits::construct()
1825:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // and destroyed with _Alloc_traits::destroy().
1826:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       struct _Temporary_value
1827:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1828:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	template<typename... _Args>
1829:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _GLIBCXX20_CONSTEXPR explicit
1830:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Temporary_value(vector* __vec, _Args&&... __args) : _M_this(__vec)
1831:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
1832:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _Alloc_traits::construct(_M_this->_M_impl, _M_ptr(),
1833:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 				     std::forward<_Args>(__args)...);
1834:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  }
1835:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1836:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1837:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	~_Temporary_value()
1838:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ _Alloc_traits::destroy(_M_this->_M_impl, _M_ptr()); }
1839:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1840:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR value_type&
1841:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_val() noexcept { return _M_storage._M_val; }
1842:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1843:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       private:
1844:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR _Tp*
1845:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_ptr() noexcept { return std::__addressof(_M_storage._M_val); }
1846:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1847:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	union _Storage
1848:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{
1849:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  constexpr _Storage() : _M_byte() { }
1850:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _GLIBCXX20_CONSTEXPR ~_Storage() { }
1851:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Storage& operator=(const _Storage&) = delete;
1852:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  unsigned char _M_byte;
1853:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Tp _M_val;
1854:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	};
1855:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1856:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	vector*  _M_this;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 98


1857:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_Storage _M_storage;
1858:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       };
1859:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1860:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by insert(p,x) and other functions when insertion needs to
1861:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // reallocate or move existing elements. _Arg is either _Tp& or _Tp.
1862:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename _Arg>
1863:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1864:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1865:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_insert_aux(iterator __position, _Arg&& __arg);
1866:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1867:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename... _Args>
1868:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1869:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	void
1870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_realloc_insert(iterator __position, _Args&&... __args);
1871:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1872:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Either move-construct at the end, or forward to _M_insert_aux.
1873:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1874:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1875:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_insert_rval(const_iterator __position, value_type&& __v);
1876:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1877:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Try to emplace at the end, otherwise forward to _M_insert_aux.
1878:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       template<typename... _Args>
1879:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_GLIBCXX20_CONSTEXPR
1880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	iterator
1881:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	_M_emplace_aux(const_iterator __position, _Args&&... __args);
1882:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1883:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Emplacing an rvalue of the correct type can use _M_insert_rval.
1884:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1885:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       iterator
1886:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_emplace_aux(const_iterator __position, value_type&& __v)
1887:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return _M_insert_rval(__position, std::move(__v)); }
1888:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #endif
1889:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       // Called by _M_fill_insert, _M_insert_aux etc.
1891:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _GLIBCXX20_CONSTEXPR
1892:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       size_type
1893:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 318              		.loc 2 1893 7 is_stmt 1 view -0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 16
 321              		@ frame_needed = 0, uses_anonymous_args = 0
 322              		.loc 2 1893 7 is_stmt 0 view .LVU44
 323 0000 30B5     		push	{r4, r5, lr}
 324              		.save {r4, r5, lr}
 325              	.LCFI1:
 326              		.cfi_def_cfa_offset 12
 327              		.cfi_offset 4, -12
 328              		.cfi_offset 5, -8
 329              		.cfi_offset 14, -4
 330              		.pad #20
 331 0002 85B0     		sub	sp, sp, #20
 332              	.LCFI2:
 333              		.cfi_def_cfa_offset 32
 334 0004 8446     		mov	ip, r0
 335 0006 0191     		str	r1, [sp, #4]
 336              	.LVL16:
 337              	.LBB531:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 99


 338              	.LBI531:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 339              		.loc 2 989 7 is_stmt 1 view .LVU45
 340              	.LBB532:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 341              		.loc 2 990 40 is_stmt 0 view .LVU46
 342 0008 4468     		ldr	r4, [r0, #4]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 343              		.loc 2 990 66 view .LVU47
 344 000a 0368     		ldr	r3, [r0]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 345              		.loc 2 990 50 view .LVU48
 346 000c E31A     		subs	r3, r4, r3
 347 000e 1B11     		asrs	r3, r3, #4
 348 0010 1148     		ldr	r0, .L20
 349              	.LVL17:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 350              		.loc 2 990 50 view .LVU49
 351 0012 03FB00F0 		mul	r0, r3, r0
 352              	.LVL18:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 353              		.loc 2 990 50 view .LVU50
 354              	.LBE532:
 355              	.LBE531:
1894:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
1895:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	if (max_size() - size() < __n)
 356              		.loc 2 1895 17 discriminator 2 view .LVU51
 357 0016 114D     		ldr	r5, .L20+4
 358 0018 2D1A     		subs	r5, r5, r0
 359              		.loc 2 1895 2 discriminator 2 view .LVU52
 360 001a 8D42     		cmp	r5, r1
 361 001c 13D3     		bcc	.L18
1896:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  __throw_length_error(__N(__s));
1897:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
1898:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	const size_type __len = size() + (std::max)(size(), __n);
 362              		.loc 2 1898 50 discriminator 2 view .LVU53
 363 001e 0390     		str	r0, [sp, #12]
 364              	.LVL19:
 365              	.LBB533:
 366              	.LBI533:
 367              		.file 8 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/stl_algobase.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 100


  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  *
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * Copyright (c) 1994
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * Hewlett-Packard Company
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  *
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * representations about the suitability of this software for any
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  *
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  *
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * Copyright (c) 1996-1998
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  *
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * representations about the suitability of this software for any
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  */
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** /** @file bits/stl_algobase.h
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****  */
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/c++config.h>
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/functexcept.h>
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <ext/type_traits.h>
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <ext/numeric_traits.h>
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/stl_pair.h>
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/stl_iterator.h>
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/concept_check.h>
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <debug/debug.h>
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/move.h> // For std::swap
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #include <bits/predefined_ops.h>
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus >= 201103L
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** # include <type_traits>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 101


  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus >= 201402L
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** # include <bit> // std::__bit_width
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus >= 202002L
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** # include <compare>
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** {
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /*
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    * A constexpr wrapper for __builtin_memcmp.
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    * @param __num The number of elements of type _Tp (not bytes).
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    */
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Tp, typename _Up>
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline int
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus >= 201103L
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       static_assert(sizeof(_Tp) == sizeof(_Up), "can be compared with memcmp");
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  for(; __num > 0; ++__first1, ++__first2, --__num)
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    if (*__first1 != *__first2)
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      return *__first1 < *__first2 ? -1 : 1;
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  return 0;
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       else
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num);
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus < 201103L
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _BoolType>
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct __iter_swap
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static void
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  typedef typename iterator_traits<_ForwardIterator1>::value_type
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    _ValueType1;
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  _ValueType1 __tmp = *__a;
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  *__a = *__b;
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  *__b = __tmp;
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 102


 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct __iter_swap<true>
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static void
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  swap(*__a, *__b);
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif // C++03
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /**
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __a  An iterator.
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __b  Another iterator.
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @return   Nothing.
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  iterators themselves.
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   */
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline void
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       // concept requirements
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 				  _ForwardIterator1>)
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 				  _ForwardIterator2>)
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus < 201103L
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_ValueType1;
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_ValueType2;
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 				  _ValueType2>)
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 				  _ValueType1>)
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_ReferenceType1;
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_ReferenceType2;
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	iter_swap(__a, __b);
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #else
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       // 187. iter_swap underspecified
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       swap(*__a, *__b);
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 103


 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /**
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __first1  A forward iterator.
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __last1   A forward iterator.
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __first2  A forward iterator.
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  The ranges must not overlap.
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   */
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _ForwardIterator2
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		_ForwardIterator2 __first2)
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       // concept requirements
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 				  _ForwardIterator1>)
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 				  _ForwardIterator2>)
 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       for (; __first1 != __last1; ++__first1, (void)++__first2)
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __first2;
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /**
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @brief This does what you think it does.
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  preprocessor macro.
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   */
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Tp>
 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline const _Tp&
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       // concept requirements
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       //return __b < __a ? __b : __a;
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       if (__b < __a)
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	return __b;
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __a;
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /**
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @brief This does what you think it does.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 104


 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  preprocessor macro.
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   */
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Tp>
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline const _Tp&
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 368              		.loc 8 257 5 is_stmt 1 view .LVU54
 369              	.LBB534:
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       // concept requirements
 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       //return  __a < __b ? __b : __a;
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       if (__a < __b)
 370              		.loc 8 262 7 is_stmt 0 view .LVU55
 371 0020 8142     		cmp	r1, r0
 372 0022 13D8     		bhi	.L14
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	return __b;
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __a;
 373              		.loc 8 264 14 view .LVU56
 374 0024 03AA     		add	r2, sp, #12
 375              	.LVL20:
 376              	.L12:
 377              		.loc 8 264 14 view .LVU57
 378              	.LBE534:
 379              	.LBE533:
 380              		.loc 2 1898 33 discriminator 3 view .LVU58
 381 0026 1268     		ldr	r2, [r2]
 382              		.loc 2 1898 18 discriminator 3 view .LVU59
 383 0028 1044     		add	r0, r0, r2
 384              	.LVL21:
 385              	.LBB536:
 386              	.LBI536:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 387              		.loc 2 989 7 is_stmt 1 view .LVU60
 388              	.LBB537:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 389              		.loc 2 990 66 is_stmt 0 view .LVU61
 390 002a DCF80030 		ldr	r3, [ip]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 391              		.loc 2 990 50 view .LVU62
 392 002e E41A     		subs	r4, r4, r3
 393 0030 2411     		asrs	r4, r4, #4
 394 0032 094B     		ldr	r3, .L20
 395 0034 03FB04F4 		mul	r4, r3, r4
 396              	.LVL22:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 397              		.loc 2 990 50 view .LVU63
 398              	.LBE537:
 399              	.LBE536:
1899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 105


 400              		.loc 2 1899 48 discriminator 1 view .LVU64
 401 0038 A042     		cmp	r0, r4
 402 003a 09D3     		bcc	.L15
 403              		.loc 2 1899 25 discriminator 1 view .LVU65
 404 003c 074B     		ldr	r3, .L20+4
 405 003e 9842     		cmp	r0, r3
 406 0040 08D8     		bhi	.L19
 407              	.LVL23:
 408              	.L10:
1900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 409              		.loc 2 1900 7 view .LVU66
 410 0042 05B0     		add	sp, sp, #20
 411              	.LCFI3:
 412              		.cfi_remember_state
 413              		.cfi_def_cfa_offset 12
 414              		@ sp needed
 415 0044 30BD     		pop	{r4, r5, pc}
 416              	.LVL24:
 417              	.L18:
 418              	.LCFI4:
 419              		.cfi_restore_state
1896:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 420              		.loc 2 1896 24 view .LVU67
 421 0046 1046     		mov	r0, r2
 422 0048 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 423              	.LVL25:
 424              	.L14:
 425              	.LBB538:
 426              	.LBB535:
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __a;
 427              		.loc 8 263 9 view .LVU68
 428 004c 01AA     		add	r2, sp, #4
 429              	.LVL26:
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __a;
 430              		.loc 8 263 9 view .LVU69
 431 004e EAE7     		b	.L12
 432              	.LVL27:
 433              	.L15:
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __a;
 434              		.loc 8 263 9 view .LVU70
 435              	.LBE535:
 436              	.LBE538:
1899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 437              		.loc 2 1899 58 discriminator 3 view .LVU71
 438 0050 0248     		ldr	r0, .L20+4
 439              	.LVL28:
1899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 440              		.loc 2 1899 58 discriminator 3 view .LVU72
 441 0052 F6E7     		b	.L10
 442              	.LVL29:
 443              	.L19:
1899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 444              		.loc 2 1899 58 discriminator 3 view .LVU73
 445 0054 0148     		ldr	r0, .L20+4
 446              	.LVL30:
1899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 447              		.loc 2 1899 63 view .LVU74
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 106


 448 0056 F4E7     		b	.L10
 449              	.L21:
 450              		.align	2
 451              	.L20:
 452 0058 ABAAAAAA 		.word	-1431655765
 453 005c AAAAAA02 		.word	44739242
 454              		.cfi_endproc
 455              	.LFE1351:
 456              		.fnend
 458              		.section	.text._ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j,"axG",%progbits,_ZNSt15__new_al
 459              		.align	1
 460              		.weak	_ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 465              	_ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j:
 466              		.fnstart
 467              	.LVL31:
 468              	.LFB1367:
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       {
 469              		.loc 4 152 7 is_stmt 1 view -0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       {
 473              		.loc 4 152 7 is_stmt 0 view .LVU76
 474 0000 08B5     		push	{r3, lr}
 475              	.LCFI5:
 476              		.cfi_def_cfa_offset 8
 477              		.cfi_offset 3, -8
 478              		.cfi_offset 14, -4
 479 0002 0846     		mov	r0, r1
 480              	.LVL32:
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 481              		.loc 4 168 26 view .LVU77
 482 0004 02EB4202 		add	r2, r2, r2, lsl #1
 483              	.LVL33:
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 484              		.loc 4 168 26 view .LVU78
 485 0008 1101     		lsls	r1, r2, #4
 486              	.LVL34:
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 487              		.loc 4 168 26 view .LVU79
 488 000a FFF7FEFF 		bl	_ZdlPvj
 489              	.LVL35:
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 490              		.loc 4 169 7 view .LVU80
 491 000e 08BD     		pop	{r3, pc}
 492              		.cfi_endproc
 493              	.LFE1367:
 494              		.cantunwind
 495              		.fnend
 497              		.section	.text._ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev,"axG",%progbits,_ZNSt12_Vector_baseI8Path
 498              		.align	1
 499              		.weak	_ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev
 500              		.syntax unified
 501              		.thumb
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 107


 502              		.thumb_func
 504              	_ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev:
 505              		.fnstart
 506              	.LVL36:
 507              	.LFB1281:
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 508              		.loc 2 364 7 is_stmt 1 view -0
 509              		.cfi_startproc
 510              		@ args = 0, pretend = 0, frame = 0
 511              		@ frame_needed = 0, uses_anonymous_args = 0
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 512              		.loc 2 364 7 is_stmt 0 view .LVU82
 513 0000 10B5     		push	{r4, lr}
 514              	.LCFI6:
 515              		.cfi_def_cfa_offset 8
 516              		.cfi_offset 4, -8
 517              		.cfi_offset 14, -4
 518 0002 0446     		mov	r4, r0
 519              	.LBB539:
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		      _M_impl._M_end_of_storage - _M_impl._M_start);
 520              		.loc 2 366 15 view .LVU83
 521 0004 0168     		ldr	r1, [r0]
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 522              		.loc 2 367 17 view .LVU84
 523 0006 8268     		ldr	r2, [r0, #8]
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 524              		.loc 2 367 35 view .LVU85
 525 0008 521A     		subs	r2, r2, r1
 526 000a 1211     		asrs	r2, r2, #4
 527 000c 034B     		ldr	r3, .L27
 528 000e 03FB02F2 		mul	r2, r3, r2
 529              	.LVL37:
 530              	.LBB540:
 531              	.LBI540:
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 532              		.loc 2 383 7 is_stmt 1 view .LVU86
 533              	.LBB541:
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 534              		.loc 2 386 2 is_stmt 0 view .LVU87
 535 0012 09B1     		cbz	r1, .L25
 536              	.LVL38:
 537              	.LBB542:
 538              	.LBI542:
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 539              		.loc 6 515 7 is_stmt 1 view .LVU88
 540              	.LBB543:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 541              		.loc 6 516 23 is_stmt 0 view .LVU89
 542 0014 FFF7FEFF 		bl	_ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j
 543              	.LVL39:
 544              	.L25:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 545              		.loc 6 516 23 view .LVU90
 546              	.LBE543:
 547              	.LBE542:
 548              	.LBE541:
 549              	.LBE540:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 108


 550              	.LBB544:
 551              	.LBI544:
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: public _Tp_alloc_type, public _Vector_impl_data
 552              		.loc 2 133 14 is_stmt 1 view .LVU91
 553              	.LBB545:
 554              	.LBI545:
 555              		.file 9 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/allocator.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // Allocators -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * Copyright (c) 1996-1997
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  *
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * that both that copyright notice and this permission notice appear
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * representations about the suitability of this software for any
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  */
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** /** @file bits/allocator.h
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  *  This is an internal header file, included by other library headers.
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****  */
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #ifndef _ALLOCATOR_H
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #define _ALLOCATOR_H 1
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #include <bits/memoryfwd.h>
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cplusplus >= 201103L
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #include <type_traits>
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 109


  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #define __cpp_lib_incomplete_container_elements 201505L
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** {
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   /**
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *  @addtogroup allocators
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *  @{
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    */
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   // Since C++20 the primary template should be used for allocator<void>,
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   // but then it would have a non-trivial default ctor and dtor for C++20,
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   // but trivial for C++98-17, which would be an ABI incompatibility between
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   // different standard dialects. So C++20 still uses the allocator<void>
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   // explicit specialization, with the historical ABI properties, but with
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   // the same members that are present in the primary template.
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   /** std::allocator<void> specialization.
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    * @headerfile memory
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    */
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   template<>
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****     class allocator<void>
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****     {
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****     public:
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef void        value_type;
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef size_t      size_type;
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef ptrdiff_t   difference_type;
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cplusplus <= 201703L
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // These were removed for C++20, allocator_traits does the right thing.
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef void*       pointer;
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef const void* const_pointer;
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       template<typename _Tp1>
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	struct rebind
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cplusplus >= 201103L
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       using propagate_on_container_move_assignment = true_type;
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       using is_always_equal
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	= true_type;
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cplusplus >= 202002L
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // As noted above, these members are present for C++20 to provide the
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // same API as the primary template, but still trivial as in pre-C++20.
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       allocator() = default;
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       ~allocator() = default;
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       template<typename _Up>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 110


 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	__attribute__((__always_inline__))
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	constexpr
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	allocator(const allocator<_Up>&) noexcept { }
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // No allocate member because it's ill-formed by LWG 3307.
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // No deallocate member because it would be undefined to call it
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // with any pointer which wasn't obtained from allocate.
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif // C++20
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif // C++11
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****     };
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   /**
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    * @brief  The @a standard allocator, as per C++03 [20.4.1].
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *  See https://gcc.gnu.org/onlinedocs/libstdc++/manual/memory.html#std.util.memory.allocator
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *  for further details.
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *  @tparam  _Tp  Type of allocated object.
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    *  @headerfile memory
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****    */
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****   template<typename _Tp>
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****     class allocator : public __allocator_base<_Tp>
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****     {
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****     public:
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef _Tp        value_type;
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef size_t     size_type;
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef ptrdiff_t  difference_type;
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cplusplus <= 201703L
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // These were removed for C++20.
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef _Tp*       pointer;
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef const _Tp* const_pointer;
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef _Tp&       reference;
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       typedef const _Tp& const_reference;
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       template<typename _Tp1>
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	struct rebind
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	{ typedef allocator<_Tp1> other; };
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cplusplus >= 201103L
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       using propagate_on_container_move_assignment = true_type;
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       using is_always_equal
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	_GLIBCXX20_DEPRECATED_SUGGEST("std::allocator_traits::is_always_equal")
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	= true_type;
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // 3035. std::allocator's constructors should be constexpr
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       __attribute__((__always_inline__))
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       allocator() _GLIBCXX_NOTHROW { }
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 111


 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       __attribute__((__always_inline__))
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       _GLIBCXX20_CONSTEXPR
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       allocator(const allocator& __a) _GLIBCXX_NOTHROW
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       : __allocator_base<_Tp>(__a) { }
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cplusplus >= 201103L
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       // Avoid implicit deprecation.
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       allocator& operator=(const allocator&) = default;
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       template<typename _Tp1>
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	__attribute__((__always_inline__))
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	_GLIBCXX20_CONSTEXPR
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       __attribute__((__always_inline__))
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #if __cpp_constexpr_dynamic_alloc
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       constexpr
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** #endif
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h ****       ~allocator() _GLIBCXX_NOTHROW { }
 556              		.loc 9 184 7 view .LVU92
 557              		.loc 9 184 7 is_stmt 0 view .LVU93
 558              	.LBE545:
 559              	.LBE544:
 560              	.LBE539:
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 561              		.loc 2 368 7 view .LVU94
 562 0018 2046     		mov	r0, r4
 563 001a 10BD     		pop	{r4, pc}
 564              	.LVL40:
 565              	.L28:
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 566              		.loc 2 368 7 view .LVU95
 567              		.align	2
 568              	.L27:
 569 001c ABAAAAAA 		.word	-1431655765
 570              		.cfi_endproc
 571              	.LFE1281:
 572              		.cantunwind
 573              		.fnend
 575              		.weak	_ZNSt12_Vector_baseI8PathStepSaIS0_EED1Ev
 576              		.thumb_set _ZNSt12_Vector_baseI8PathStepSaIS0_EED1Ev,_ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev
 577              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EED2Ev,"axG",%progbits,_ZNSt6vectorI8PathStepSaIS0_EED5
 578              		.align	1
 579              		.weak	_ZNSt6vectorI8PathStepSaIS0_EED2Ev
 580              		.syntax unified
 581              		.thumb
 582              		.thumb_func
 584              	_ZNSt6vectorI8PathStepSaIS0_EED2Ev:
 585              		.fnstart
 586              	.LVL41:
 587              	.LFB1284:
 730:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 588              		.loc 2 730 7 is_stmt 1 view -0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 112


 730:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 592              		.loc 2 730 7 is_stmt 0 view .LVU97
 593 0000 10B5     		push	{r4, lr}
 594              	.LCFI7:
 595              		.cfi_def_cfa_offset 8
 596              		.cfi_offset 4, -8
 597              		.cfi_offset 14, -4
 598 0002 0446     		mov	r4, r0
 599              	.LVL42:
 600              	.LBB546:
 601              	.LBB547:
 602              	.LBI547:
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return this->_M_impl; }
 603              		.loc 2 298 7 is_stmt 1 view .LVU98
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return this->_M_impl; }
 604              		.loc 2 298 7 is_stmt 0 view .LVU99
 605              	.LBE547:
 606              	.LBB548:
 607              	.LBI548:
 533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		  _Args&&... __args)
 534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus <= 201703L
 537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  __a.construct(__p, std::forward<_Args>(__args)...);
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  std::construct_at(__p, std::forward<_Args>(__args)...);
 540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	}
 542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Destroy an object of type @a _Up
 545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls @c __a.destroy(__p).
 549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up>
 551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	[[__gnu__::__always_inline__]]
 552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus <= 201703L
 557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  __a.destroy(__p);
 558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  std::destroy_at(__p);
 560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	}
 562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  The maximum supported allocation size
 565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @return @c __a.max_size()
 567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       [[__gnu__::__always_inline__]]
 569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR size_type
 570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 113


 571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       {
 572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus <= 201703L
 573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	return __a.max_size();
 574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	return size_t(-1) / sizeof(value_type);
 576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       }
 578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @return @c __rhs
 583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       [[__gnu__::__always_inline__]]
 585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return __rhs; }
 588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     };
 589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /// Explicit specialization for std::allocator<void>.
 591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<>
 592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct allocator_traits<allocator<void>>
 593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator type
 595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using allocator_type = allocator<void>;
 596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocated type
 598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using value_type = void;
 599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's pointer type.
 601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using pointer = void*;
 602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's const pointer type.
 604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using const_pointer = const void*;
 605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's void pointer type.
 607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using void_pointer = void*;
 608:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 609:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's const void pointer type.
 610:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using const_void_pointer = const void*;
 611:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 612:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's difference type
 613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using difference_type = std::ptrdiff_t;
 614:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 615:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// The allocator's size type
 616:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using size_type = std::size_t;
 617:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 618:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// How the allocator is propagated on copy assignment
 619:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_copy_assignment = false_type;
 620:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 621:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// How the allocator is propagated on move assignment
 622:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_move_assignment = true_type;
 623:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// How the allocator is propagated on swap
 625:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using propagate_on_container_swap = false_type;
 626:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 627:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// Whether all instances of the allocator type compare equal.
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 114


 628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using is_always_equal = true_type;
 629:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 630:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up>
 631:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using rebind_alloc = allocator<_Up>;
 632:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 633:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up>
 634:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	using rebind_traits = allocator_traits<allocator<_Up>>;
 635:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 636:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// allocate is ill-formed for allocator<void>
 637:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static void*
 638:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       allocate(allocator_type&, size_type, const void* = nullptr) = delete;
 639:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 640:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// deallocate is ill-formed for allocator<void>
 641:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static void
 642:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       deallocate(allocator_type&, void*, size_type) = delete;
 643:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 644:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 645:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Construct an object of type `_Up`
 646:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 647:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to memory of suitable size and alignment for
 648:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *	       an object of type `_Up`.
 649:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __args Constructor arguments.
 650:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 651:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Calls `__a.construct(__p, std::forward<_Args>(__args)...)`
 652:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  in C++11, C++14 and C++17. Changed in C++20 to call
 653:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
 654:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 655:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up, typename... _Args>
 656:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	[[__gnu__::__always_inline__]]
 657:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 658:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	construct(allocator_type&, _Up* __p, _Args&&... __args)
 659:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 660:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ std::_Construct(__p, std::forward<_Args>(__args)...); }
 661:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 662:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 663:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Destroy an object of type `_Up`
 664:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __a  An allocator.
 665:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __p  Pointer to the object to destroy
 666:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *
 667:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  Invokes the destructor for `*__p`.
 668:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
 669:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       template<typename _Up>
 670:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	[[__gnu__::__always_inline__]]
 671:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	static _GLIBCXX20_CONSTEXPR void
 672:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	destroy(allocator_type&, _Up* __p)
 673:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	noexcept(is_nothrow_destructible<_Up>::value)
 674:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{ std::_Destroy(__p); }
 675:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 676:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /// max_size is ill-formed for allocator<void>
 677:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static size_type
 678:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       max_size(const allocator_type&) = delete;
 679:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 680:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       /**
 681:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @brief  Obtain an allocator to use when copying a container.
 682:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @param  __rhs  An allocator.
 683:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****        *  @return `__rhs`
 684:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       */
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 115


 685:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       [[__gnu__::__always_inline__]]
 686:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static _GLIBCXX20_CONSTEXPR allocator_type
 687:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       select_on_container_copy_construction(const allocator_type& __rhs)
 688:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return __rhs; }
 689:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     };
 690:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 691:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 692:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /// @cond undocumented
 693:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus < 201703L
 694:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 695:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 696:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     inline void
 697:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)
 698:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { __one = __two; }
 699:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 700:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 701:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 702:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     inline void
 703:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)
 704:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { }
 705:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 706:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 707:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 708:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 709:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 710:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     __alloc_on_copy(_Alloc& __one, const _Alloc& __two)
 711:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 712:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __traits = allocator_traits<_Alloc>;
 713:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __pocca =
 714:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	typename __traits::propagate_on_container_copy_assignment::type;
 715:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus >= 201703L
 716:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       if constexpr (__pocca::value)
 717:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	__one = __two;
 718:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 719:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       __do_alloc_on_copy(__one, __two, __pocca());
 720:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 721:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     }
 722:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 723:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 724:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 725:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     constexpr _Alloc
 726:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     __alloc_on_copy(const _Alloc& __a)
 727:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 728:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       typedef allocator_traits<_Alloc> __traits;
 729:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       return __traits::select_on_container_copy_construction(__a);
 730:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     }
 731:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 732:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus < 201703L
 733:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 734:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)
 736:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { __one = std::move(__two); }
 737:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 738:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 739:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 740:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)
 741:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 116


 742:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 743:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 744:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 745:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 746:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 747:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     __alloc_on_move(_Alloc& __one, _Alloc& __two)
 748:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 749:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __traits = allocator_traits<_Alloc>;
 750:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __pocma
 751:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	= typename __traits::propagate_on_container_move_assignment::type;
 752:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus >= 201703L
 753:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       if constexpr (__pocma::value)
 754:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	__one = std::move(__two);
 755:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 756:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       __do_alloc_on_move(__one, __two, __pocma());
 757:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 758:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     }
 759:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 760:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus < 201703L
 761:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 762:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 763:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)
 764:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 765:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using std::swap;
 766:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       swap(__one, __two);
 767:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     }
 768:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 769:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 770:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 771:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)
 772:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { }
 773:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 774:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 775:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 776:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     [[__gnu__::__always_inline__]]
 777:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     _GLIBCXX14_CONSTEXPR inline void
 778:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     __alloc_on_swap(_Alloc& __one, _Alloc& __two)
 779:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 780:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __traits = allocator_traits<_Alloc>;
 781:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       using __pocs = typename __traits::propagate_on_container_swap::type;
 782:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus >= 201703L
 783:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       if constexpr (__pocs::value)
 784:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	{
 785:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  using std::swap;
 786:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  swap(__one, __two);
 787:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	}
 788:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 789:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       __do_alloc_on_swap(__one, __two, __pocs());
 790:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 791:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     }
 792:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 793:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp,
 794:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	   typename _ValueT = __remove_cvref_t<typename _Alloc::value_type>,
 795:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	   typename = void>
 796:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_alloc_insertable_impl
 797:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     : false_type
 798:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { };
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 117


 799:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 800:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc, typename _Tp, typename _ValueT>
 801:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,
 802:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       __void_t<decltype(allocator_traits<_Alloc>::construct(
 803:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		   std::declval<_Alloc&>(), std::declval<_ValueT*>(),
 804:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		   std::declval<_Tp>()))>>
 805:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     : true_type
 806:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { };
 807:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 808:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // true if _Alloc::value_type is CopyInsertable into containers using _Alloc
 809:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 810:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 811:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 812:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_copy_insertable
 813:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc,
 814:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 				 typename _Alloc::value_type const&>::type
 815:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { };
 816:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 817:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if _GLIBCXX_HOSTED
 818:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // std::allocator<_Tp> just requires CopyConstructible
 819:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Tp>
 820:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_copy_insertable<allocator<_Tp>>
 821:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     : is_copy_constructible<_Tp>
 822:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { };
 823:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 824:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 825:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // true if _Alloc::value_type is MoveInsertable into containers using _Alloc
 826:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // (might be wrong if _Alloc::construct exists but is not constrained,
 827:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // i.e. actually trying to use it would still be invalid. Use with caution.)
 828:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 829:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_move_insertable
 830:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     : __is_alloc_insertable_impl<_Alloc, typename _Alloc::value_type>::type
 831:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { };
 832:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 833:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if _GLIBCXX_HOSTED
 834:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // std::allocator<_Tp> just requires MoveConstructible
 835:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Tp>
 836:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_move_insertable<allocator<_Tp>>
 837:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     : is_move_constructible<_Tp>
 838:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { };
 839:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 840:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 841:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // Trait to detect Allocator-like types.
 842:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc, typename = void>
 843:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_allocator : false_type { };
 844:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 845:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 846:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __is_allocator<_Alloc,
 847:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       __void_t<typename _Alloc::value_type,
 848:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	       decltype(std::declval<_Alloc&>().allocate(size_t{}))>>
 849:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     : true_type { };
 850:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 851:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 852:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     using _RequireAllocator
 853:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       = typename enable_if<__is_allocator<_Alloc>::value, _Alloc>::type;
 854:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 855:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 118


 856:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     using _RequireNotAllocator
 857:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       = typename enable_if<!__is_allocator<_Alloc>::value, _Alloc>::type;
 858:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 859:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cpp_concepts >= 201907L
 860:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 861:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     concept __allocator_like = requires (_Alloc& __a) {
 862:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       typename _Alloc::value_type;
 863:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       __a.deallocate(__a.allocate(1u), 1u);
 864:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     };
 865:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 866:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /// @endcond
 867:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif // C++11
 868:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 869:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /// @cond undocumented
 870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 871:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   // To implement Option 3 of DR 431.
 872:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc, bool = __is_empty(_Alloc)>
 873:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __alloc_swap
 874:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };
 875:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 876:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Alloc>
 877:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __alloc_swap<_Alloc, false>
 878:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 879:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static void
 880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT
 881:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       {
 882:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	// Precondition: swappable allocators.
 883:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	if (__one != __two)
 884:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  swap(__one, __two);
 885:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       }
 886:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     };
 887:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 888:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus >= 201103L
 889:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Tp, bool
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     = __or_<is_copy_constructible<typename _Tp::value_type>,
 891:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****             is_nothrow_move_constructible<typename _Tp::value_type>>::value>
 892:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __shrink_to_fit_aux
 893:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     { static bool _S_do_it(_Tp&) noexcept { return false; } };
 894:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 895:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _Tp>
 896:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     struct __shrink_to_fit_aux<_Tp, true>
 897:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 898:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       _GLIBCXX20_CONSTEXPR
 899:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       static bool
 900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       _S_do_it(_Tp& __c) noexcept
 901:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       {
 902:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cpp_exceptions
 903:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	try
 904:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  {
 905:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	    _Tp(__make_move_if_noexcept_iterator(__c.begin()),
 906:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		__make_move_if_noexcept_iterator(__c.end()),
 907:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		__c.get_allocator()).swap(__c);
 908:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	    return true;
 909:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  }
 910:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	catch(...)
 911:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	  { return false; }
 912:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 119


 913:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	return false;
 914:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 915:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       }
 916:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     };
 917:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 918:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 919:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   /**
 920:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    * Destroy a range of objects using the supplied allocator.  For
 921:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    * non-default allocators we do not optimize away invocation of
 922:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    * destroy() even if _Tp has a trivial destructor.
 923:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****    */
 924:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 925:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Allocator>
 926:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     _GLIBCXX20_CONSTEXPR
 927:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     void
 928:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 929:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	     _Allocator& __alloc)
 930:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     {
 931:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       for (; __first != __last; ++__first)
 932:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if __cplusplus < 201103L
 933:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	__alloc.destroy(std::__addressof(*__first));
 934:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #else
 935:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 	allocator_traits<_Allocator>::destroy(__alloc,
 936:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 					      std::__addressof(*__first));
 937:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #endif
 938:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     }
 939:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 940:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** #if _GLIBCXX_HOSTED
 941:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****   template<typename _ForwardIterator, typename _Tp>
 942:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     __attribute__((__always_inline__)) _GLIBCXX20_CONSTEXPR
 943:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     inline void
 944:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 608              		.loc 6 944 5 is_stmt 1 view .LVU100
 609              		.loc 6 944 5 is_stmt 0 view .LVU101
 610              	.LBE548:
 735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 611              		.loc 2 735 7 view .LVU102
 612 0004 FFF7FEFF 		bl	_ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev
 613              	.LVL43:
 735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 614              		.loc 2 735 7 view .LVU103
 615              	.LBE546:
 616 0008 2046     		mov	r0, r4
 617 000a 10BD     		pop	{r4, pc}
 735:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 618              		.loc 2 735 7 view .LVU104
 619              		.cfi_endproc
 620              	.LFE1284:
 621              		.cantunwind
 622              		.fnend
 624              		.weak	_ZNSt6vectorI8PathStepSaIS0_EED1Ev
 625              		.thumb_set _ZNSt6vectorI8PathStepSaIS0_EED1Ev,_ZNSt6vectorI8PathStepSaIS0_EED2Ev
 626              		.section	.text._ZNSt15__new_allocatorI8PathStepE8allocateEjPKv,"axG",%progbits,_ZNSt15__new_alloca
 627              		.align	1
 628              		.weak	_ZNSt15__new_allocatorI8PathStepE8allocateEjPKv
 629              		.syntax unified
 630              		.thumb
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 120


 631              		.thumb_func
 633              	_ZNSt15__new_allocatorI8PathStepE8allocateEjPKv:
 634              		.fnstart
 635              	.LVL44:
 636              	.LFB1372:
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       {
 637              		.loc 4 122 7 is_stmt 1 view -0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       {
 641              		.loc 4 122 7 is_stmt 0 view .LVU106
 642 0000 08B5     		push	{r3, lr}
 643              		.save {r3, lr}
 644              	.LCFI8:
 645              		.cfi_def_cfa_offset 8
 646              		.cfi_offset 3, -8
 647              		.cfi_offset 14, -4
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  {
 648              		.loc 4 130 2 discriminator 2 view .LVU107
 649 0002 084B     		ldr	r3, .L36
 650 0004 9942     		cmp	r1, r3
 651 0006 05D8     		bhi	.L35
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 652              		.loc 4 147 48 view .LVU108
 653 0008 01EB4101 		add	r1, r1, r1, lsl #1
 654              	.LVL45:
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 655              		.loc 4 147 48 view .LVU109
 656 000c 0801     		lsls	r0, r1, #4
 657              	.LVL46:
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h ****       }
 658              		.loc 4 147 48 view .LVU110
 659 000e FFF7FEFF 		bl	_Znwj
 660              	.LVL47:
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 661              		.loc 4 148 7 view .LVU111
 662 0012 08BD     		pop	{r3, pc}
 663              	.LVL48:
 664              	.L35:
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	      std::__throw_bad_array_new_length();
 665              		.loc 4 134 6 view .LVU112
 666 0014 044B     		ldr	r3, .L36+4
 667 0016 9942     		cmp	r1, r3
 668 0018 01D9     		bls	.L33
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	    std::__throw_bad_alloc();
 669              		.loc 4 135 41 view .LVU113
 670 001a FFF7FEFF 		bl	_ZSt28__throw_bad_array_new_lengthv
 671              	.LVL49:
 672              	.L33:
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  }
 673              		.loc 4 136 28 view .LVU114
 674 001e FFF7FEFF 		bl	_ZSt17__throw_bad_allocv
 675              	.LVL50:
 676              	.L37:
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	  }
 677              		.loc 4 136 28 view .LVU115
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 121


 678 0022 00BF     		.align	2
 679              	.L36:
 680 0024 AAAAAA02 		.word	44739242
 681 0028 55555505 		.word	89478485
 682              		.cfi_endproc
 683              	.LFE1372:
 684              		.fnend
 686              		.section	.rodata._ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal
 687              		.align	2
 688              	.LC0:
 689 0000 76656374 		.ascii	"vector::_M_realloc_insert\000"
 689      6F723A3A 
 689      5F4D5F72 
 689      65616C6C 
 689      6F635F69 
 690              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_i
 691              		.align	1
 692              		.weak	_ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIP
 693              		.syntax unified
 694              		.thumb
 695              		.thumb_func
 697              	_ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_E
 698              		.fnstart
 699              	.LVL51:
 700              	.LFB1322:
 701              		.file 10 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/vector.tcc"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // Copyright (C) 2001-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** /*
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  *
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * Copyright (c) 1994
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * Hewlett-Packard Company
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  *
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 122


  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * representations about the suitability of this software for any
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  *
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  *
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * Copyright (c) 1996
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  *
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * representations about the suitability of this  software for any
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  */
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** /** @file bits/vector.tcc
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****  */
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #ifndef _VECTOR_TCC
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #define _VECTOR_TCC 1
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** {
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     void
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     reserve(size_type __n)
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (__n > this->max_size())
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (this->capacity() < __n)
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  const size_type __old_size = size();
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  pointer __tmp;
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      __tmp = this->_M_allocate(__n);
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  else
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      __tmp = _M_allocate_and_copy(__n,
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 123


  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    _M_get_Tp_allocator());
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			this->_M_impl._M_end_of_storage
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			- this->_M_impl._M_start);
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     template<typename... _Args>
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus > 201402L
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       typename vector<_Tp, _Alloc>::reference
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       void
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       vector<_Tp, _Alloc>::
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       emplace_back(_Args&&... __args)
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       {
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  {
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				     std::forward<_Args>(__args)...);
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  }
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	else
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus > 201402L
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	return back();
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       }
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     insert(const_iterator __position, const value_type& __x)
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     insert(iterator __position, const value_type& __x)
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       const size_type __n = __position - begin();
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  __glibcxx_assert(__position != const_iterator());
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if (!(__position != const_iterator()))
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    __builtin_unreachable(); // PR 106434
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 124


 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if (__position == end())
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				       __x);
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      ++this->_M_impl._M_finish;
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  else
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      const auto __pos = begin() + (__position - cbegin());
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      // __x could be an existing element of this vector, so make a
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      // copy of it before _M_insert_aux moves elements around.
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _Temporary_value __x_copy(this, __x);
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _M_insert_aux(__pos, std::move(__x_copy._M_val()));
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _M_insert_aux(__position, __x);
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       else
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	_M_realloc_insert(begin() + (__position - cbegin()), __x);
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	_M_realloc_insert(__position, __x);
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _M_erase(iterator __position)
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (__position + 1 != end())
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       --this->_M_impl._M_finish;
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_SHRINK(1);
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       return __position;
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _M_erase(iterator __first, iterator __last)
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (__first != __last)
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if (__last != end())
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 125


 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       return __first;
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>&
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (std::__addressof(__x) != this)
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_REINIT;
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	        {
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		  // replacement allocator cannot free existing storage
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		  this->clear();
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				this->_M_impl._M_end_of_storage
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				- this->_M_impl._M_start);
 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		}
 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				   __x._M_get_Tp_allocator());
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  const size_type __xlen = __x.size();
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if (__xlen > capacity())
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 						   __x.end());
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    _M_get_Tp_allocator());
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    this->_M_impl._M_end_of_storage
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    - this->_M_impl._M_start);
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  else if (size() >= __xlen)
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    end(), _M_get_Tp_allocator());
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  else
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			this->_M_impl._M_start);
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					  __x._M_impl._M_finish,
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					  this->_M_impl._M_finish,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 126


 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					  _M_get_Tp_allocator());
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       return *this;
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     void
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (__n > capacity())
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  __tmp._M_impl._M_swap_data(this->_M_impl);
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       else if (__n > size())
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  std::fill(begin(), end(), __val);
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  const size_type __add = __n - size();
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GROW(__add);
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_finish =
 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					  __add, __val, _M_get_Tp_allocator());
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _GLIBCXX_ASAN_ANNOTATE_GREW(__add);
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       else
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     template<typename _InputIterator>
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       void
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       vector<_Tp, _Alloc>::
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		    std::input_iterator_tag)
 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       {
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	     ++__cur, (void)++__first)
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  *__cur = *__first;
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	if (__first == __last)
 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_erase_at_end(__cur);
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	else
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_range_insert(end(), __first, __last,
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			  std::__iterator_category(__first));
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       }
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     template<typename _ForwardIterator>
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       void
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       vector<_Tp, _Alloc>::
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 127


 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		    std::forward_iterator_tag)
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       {
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	if (__len > capacity())
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  {
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _S_check_init_len(__len, _M_get_Tp_allocator());
 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			  _M_get_Tp_allocator());
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_REINIT;
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			  this->_M_impl._M_end_of_storage
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			  - this->_M_impl._M_start);
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  }
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	else if (size() >= __len)
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	else
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  {
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _ForwardIterator __mid = __first;
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    std::advance(__mid, size());
 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    const size_type __attribute__((__unused__)) __n = __len - size();
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(__n);
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    this->_M_impl._M_finish =
 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					  this->_M_impl._M_finish,
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					  _M_get_Tp_allocator());
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(__n);
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  }
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       }
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _GLIBCXX20_CONSTEXPR
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     auto
 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _M_insert_rval(const_iterator __position, value_type&& __v) -> iterator
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       const auto __n = __position - cbegin();
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	if (__position == cend())
 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  {
 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				     std::move(__v));
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    ++this->_M_impl._M_finish;
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  }
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	else
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_insert_aux(begin() + __n, std::move(__v));
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       else
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	_M_realloc_insert(begin() + __n, std::move(__v));
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 128


 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     template<typename... _Args>
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       auto
 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       vector<_Tp, _Alloc>::
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _M_emplace_aux(const_iterator __position, _Args&&... __args)
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       -> iterator
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       {
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	const auto __n = __position - cbegin();
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if (__position == cend())
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				       std::forward<_Args>(__args)...);
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      ++this->_M_impl._M_finish;
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  else
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      // We need to construct a temporary because something in __args...
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      // could alias one of the elements of the container and so we
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      // need to use it before _M_insert_aux moves elements around.
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _Temporary_value __tmp(this, std::forward<_Args>(__args)...);
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      _M_insert_aux(begin() + __n, std::move(__tmp._M_val()));
 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	else
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_realloc_insert(begin() + __n, std::forward<_Args>(__args)...);
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       }
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     template<typename _Arg>
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       void
 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       vector<_Tp, _Alloc>::
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _M_insert_aux(iterator __position, _Arg&& __arg)
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     void
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GROW(1);
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			       _GLIBCXX_MOVE(*(this->_M_impl._M_finish - 1)));
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       ++this->_M_impl._M_finish;
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus < 201103L
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _Tp __x_copy = __x;
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX_MOVE_BACKWARD3(__position.base(),
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 129


 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			      this->_M_impl._M_finish - 2,
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			      this->_M_impl._M_finish - 1);
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus < 201103L
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       *__position = __x_copy;
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       *__position = std::forward<_Arg>(__arg);
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     template<typename... _Args>
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX20_CONSTEXPR
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       void
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       vector<_Tp, _Alloc>::
 702              		.loc 10 445 7 is_stmt 1 view -0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              		.loc 10 445 7 is_stmt 0 view .LVU117
 707 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 708              		.save {r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 709              	.LCFI9:
 710              		.cfi_def_cfa_offset 40
 711              		.cfi_offset 3, -40
 712              		.cfi_offset 4, -36
 713              		.cfi_offset 5, -32
 714              		.cfi_offset 6, -28
 715              		.cfi_offset 7, -24
 716              		.cfi_offset 8, -20
 717              		.cfi_offset 9, -16
 718              		.cfi_offset 10, -12
 719              		.cfi_offset 11, -8
 720              		.cfi_offset 14, -4
 721 0004 0746     		mov	r7, r0
 722 0006 0C46     		mov	r4, r1
 723              	.LVL52:
 724              		.loc 10 445 7 view .LVU118
 725 0008 9346     		mov	fp, r2
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _M_realloc_insert(iterator __position, _Args&&... __args)
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****   template<typename _Tp, typename _Alloc>
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     void
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     vector<_Tp, _Alloc>::
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     _M_realloc_insert(iterator __position, const _Tp& __x)
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     {
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       const size_type __len =
 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 726              		.loc 10 455 14 view .LVU119
 727 000a 314A     		ldr	r2, .L47
 728              	.LVL53:
 729              		.loc 10 455 14 view .LVU120
 730 000c 0121     		movs	r1, #1
 731 000e FFF7FEFF 		bl	_ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc
 732              	.LVL54:
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       pointer __old_start = this->_M_impl._M_start;
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 130


 733              		.loc 10 456 15 view .LVU121
 734 0012 D7F800A0 		ldr	r10, [r7]
 735              	.LVL55:
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       pointer __old_finish = this->_M_impl._M_finish;
 736              		.loc 10 457 15 view .LVU122
 737 0016 7E68     		ldr	r6, [r7, #4]
 738              	.LVL56:
 739              	.LBB549:
 740              	.LBI549:
 870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 741              		.loc 2 870 7 is_stmt 1 view .LVU123
 742              	.LBB550:
 743              	.LBB551:
 744              	.LBI551:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 745              		.loc 3 1076 7 view .LVU124
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 746              		.loc 3 1076 7 is_stmt 0 view .LVU125
 747              	.LBE551:
 748              	.LBE550:
 749              	.LBE549:
 750              	.LBB552:
 751              	.LBI552:
1226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
1229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
1242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
1245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // Random access iterator requirements
1247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
1251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
1259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 131


1260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
1262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
1267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
1275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
1278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
1291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
1294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
1296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD
1297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
1299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
1300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline bool
1306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
1307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
1308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
1310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif // three-way comparison
1311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
1313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
1314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
1315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   // parameters.
1316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 132


1317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #if __cplusplus >= 201103L
1318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     // DR 685.
1319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     [[__nodiscard__]] _GLIBCXX20_CONSTEXPR
1320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline auto
1321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs) noexcept
1323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
1324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #else
1325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
1326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
1327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
1328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** #endif
1329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
1330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
1334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 752              		.loc 3 1334 5 is_stmt 1 view .LVU126
 753              	.LBB553:
1335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
1336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 754              		.loc 3 1337 27 is_stmt 0 discriminator 1 view .LVU127
 755 0018 2546     		mov	r5, r4
 756              		.loc 3 1337 27 discriminator 2 view .LVU128
 757 001a A4EB0A04 		sub	r4, r4, r10
 758              	.LVL57:
 759              		.loc 3 1337 27 discriminator 2 view .LVU129
 760              	.LBE553:
 761              	.LBE552:
 762              	.LBB554:
 763              	.LBI554:
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 764              		.loc 2 375 7 is_stmt 1 view .LVU130
 765              	.LBB555:
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 766              		.loc 2 378 18 is_stmt 0 view .LVU131
 767 001e 8146     		mov	r9, r0
 768 0020 A0B1     		cbz	r0, .L45
 769              	.LVL58:
 770              	.LBB556:
 771              	.LBI556:
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return __a.allocate(__n); }
 772              		.loc 6 481 7 is_stmt 1 view .LVU132
 773              	.LBB557:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 774              		.loc 6 482 28 is_stmt 0 view .LVU133
 775 0022 0022     		movs	r2, #0
 776 0024 0146     		mov	r1, r0
 777 0026 3846     		mov	r0, r7
 778              	.LVL59:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 779              		.loc 6 482 28 view .LVU134
 780 0028 FFF7FEFF 		bl	_ZNSt15__new_allocatorI8PathStepE8allocateEjPKv
 781              	.LVL60:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 133


 782              		.loc 6 482 28 view .LVU135
 783 002c 8046     		mov	r8, r0
 784              	.LVL61:
 785              	.L39:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 786              		.loc 6 482 28 view .LVU136
 787              	.LBE557:
 788              	.LBE556:
 789              	.LBE555:
 790              	.LBE554:
 791              	.LBB559:
 792              	.LBI559:
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		  _Args&&... __args)
 793              		.loc 6 532 2 is_stmt 1 view .LVU137
 794              	.LBB560:
 795              	.LBI560:
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 796              		.loc 4 185 2 view .LVU138
 797              	.LBB561:
 798              		.loc 4 187 4 is_stmt 0 discriminator 1 view .LVU139
 799 002e 4444     		add	r4, r4, r8
 800              	.LVL62:
 801              		.loc 4 187 4 discriminator 1 view .LVU140
 802 0030 DC46     		mov	ip, fp
 803 0032 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 804 0036 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 805              	.LVL63:
 806              		.loc 4 187 4 discriminator 1 view .LVU141
 807 0038 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 808 003c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 809              	.LVL64:
 810              		.loc 4 187 4 discriminator 1 view .LVU142
 811 003e 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 812 0042 84E80F00 		stm	r4, {r0, r1, r2, r3}
 813              	.LVL65:
 814              		.loc 4 187 4 discriminator 1 view .LVU143
 815              	.LBE561:
 816              	.LBE560:
 817              	.LBE559:
 818              	.LBB564:
 819              	.LBI564:
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 820              		.loc 2 501 7 is_stmt 1 view .LVU144
 821              	.LBB565:
 822              	.LBI565:
 823              		.loc 5 1142 5 view .LVU145
 824              	.LBB566:
 825              	.LBI566:
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
 826              		.loc 5 1092 5 view .LVU146
 827              	.LBB567:
1104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****       for (; __first != __last; ++__first, (void)++__cur)
 828              		.loc 5 1104 24 is_stmt 0 view .LVU147
 829 0046 4446     		mov	r4, r8
 830              	.LBE567:
 831              	.LBE566:
 832              	.LBE565:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 134


 833              	.LBE564:
 834              	.LBB576:
 835              	.LBB563:
 836              	.LBB562:
 837              		.loc 4 187 4 discriminator 1 view .LVU148
 838 0048 D346     		mov	fp, r10
 839              	.LVL66:
 840              		.loc 4 187 4 discriminator 1 view .LVU149
 841 004a 13E0     		b	.L40
 842              	.LVL67:
 843              	.L45:
 844              		.loc 4 187 4 discriminator 1 view .LVU150
 845              	.LBE562:
 846              	.LBE563:
 847              	.LBE576:
 848              	.LBB577:
 849              	.LBB558:
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 850              		.loc 2 378 18 discriminator 2 view .LVU151
 851 004c 4FF00008 		mov	r8, #0
 852 0050 EDE7     		b	.L39
 853              	.LVL68:
 854              	.L41:
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 855              		.loc 2 378 18 discriminator 2 view .LVU152
 856              	.LBE558:
 857              	.LBE577:
 858              	.LBB578:
 859              	.LBB575:
 860              	.LBB574:
 861              	.LBB573:
 862              	.LBB568:
 863              	.LBI568:
1070:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			_Allocator& __alloc)
 864              		.loc 5 1070 5 is_stmt 1 view .LVU153
 865              	.LBB569:
 866              	.LBB570:
 867              	.LBI570:
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		  _Args&&... __args)
 868              		.loc 6 532 2 view .LVU154
 869              	.LBB571:
 870              	.LBI571:
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 871              		.loc 4 185 2 view .LVU155
 872              	.LBB572:
 873              		.loc 4 187 4 is_stmt 0 discriminator 1 view .LVU156
 874 0052 A446     		mov	ip, r4
 875 0054 DE46     		mov	lr, fp
 876 0056 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 877 005a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 878 005e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 879 0062 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 880 0066 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 881 006a 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 882              	.LVL69:
 883              		.loc 4 187 4 discriminator 1 view .LVU157
 884              	.LBE572:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 135


 885              	.LBE571:
 886              	.LBE570:
 887              	.LBE569:
 888              	.LBE568:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 889              		.loc 5 1105 7 is_stmt 1 discriminator 2 view .LVU158
 890 006e 0BF1300B 		add	fp, fp, #48
 891              	.LVL70:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 892              		.loc 5 1105 44 is_stmt 0 discriminator 2 view .LVU159
 893 0072 3034     		adds	r4, r4, #48
 894              	.LVL71:
 895              	.L40:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 896              		.loc 5 1105 22 is_stmt 1 discriminator 1 view .LVU160
 897 0074 5D45     		cmp	r5, fp
 898 0076 ECD1     		bne	.L41
 899              	.LVL72:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 900              		.loc 5 1105 22 is_stmt 0 discriminator 1 view .LVU161
 901              	.LBE573:
 902              	.LBE574:
 903              	.LBE575:
 904              	.LBE578:
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       const size_type __elems_before = __position - begin();
 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       pointer __new_start(this->_M_allocate(__len));
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       pointer __new_finish(__new_start);
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       __try
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  // The order of the three operations is dictated by the C++11
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  // case, where the moves could alter a new element belonging
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  // to the existing vector.  This is an issue only for callers
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  // taking the element by lvalue ref (see last bullet of C++11
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  // [res.on.arguments]).
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl,
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				   __new_start + __elems_before,
 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				   std::forward<_Args>(__args)...);
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #else
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				   __x);
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  __new_finish = pointer();
 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      __new_finish = _S_relocate(__old_start, __position.base(),
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					 __new_start, _M_get_Tp_allocator());
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      ++__new_finish;
 905              		.loc 10 483 8 view .LVU162
 906 0078 3034     		adds	r4, r4, #48
 907              	.LVL73:
 908              	.LBB579:
 909              	.LBI579:
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 		  _Tp_alloc_type& __alloc) noexcept
 910              		.loc 2 501 7 is_stmt 1 view .LVU163
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 136


 911              	.LBB580:
 912              	.LBI580:
 913              		.loc 5 1142 5 view .LVU164
 914              	.LBB581:
 915              	.LBI581:
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
 916              		.loc 5 1092 5 view .LVU165
1092:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		   _ForwardIterator __result, _Allocator& __alloc)
 917              		.loc 5 1092 5 is_stmt 0 view .LVU166
 918 007a 0FE0     		b	.L42
 919              	.LVL74:
 920              	.L43:
 921              	.LBB582:
 922              	.LBB583:
 923              	.LBI583:
1070:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			_Allocator& __alloc)
 924              		.loc 5 1070 5 is_stmt 1 view .LVU167
 925              	.LBB584:
 926              	.LBB585:
 927              	.LBI585:
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		  _Args&&... __args)
 928              		.loc 6 532 2 view .LVU168
 929              	.LBB586:
 930              	.LBI586:
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 931              		.loc 4 185 2 view .LVU169
 932              	.LBB587:
 933              		.loc 4 187 4 is_stmt 0 discriminator 1 view .LVU170
 934 007c A446     		mov	ip, r4
 935 007e AE46     		mov	lr, r5
 936 0080 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 937 0084 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 938 0088 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 939 008c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 940 0090 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 941 0094 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 942              	.LVL75:
 943              		.loc 4 187 4 discriminator 1 view .LVU171
 944              	.LBE587:
 945              	.LBE586:
 946              	.LBE585:
 947              	.LBE584:
 948              	.LBE583:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 949              		.loc 5 1105 7 is_stmt 1 discriminator 2 view .LVU172
 950 0098 3035     		adds	r5, r5, #48
 951              	.LVL76:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 952              		.loc 5 1105 44 is_stmt 0 discriminator 2 view .LVU173
 953 009a 3034     		adds	r4, r4, #48
 954              	.LVL77:
 955              	.L42:
1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 956              		.loc 5 1105 22 is_stmt 1 discriminator 1 view .LVU174
 957 009c AE42     		cmp	r6, r5
 958 009e EDD1     		bne	.L43
 959              	.LVL78:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 137


1105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	std::__relocate_object_a(std::__addressof(*__cur),
 960              		.loc 5 1105 22 is_stmt 0 discriminator 1 view .LVU175
 961              	.LBE582:
 962              	.LBE581:
 963              	.LBE580:
 964              	.LBE579:
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      __new_finish = _S_relocate(__position.base(), __old_finish,
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					 __new_finish, _M_get_Tp_allocator());
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  else
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      __new_finish
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		(__old_start, __position.base(),
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      ++__new_finish;
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      __new_finish
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		(__position.base(), __old_finish,
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       __catch(...)
 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  if (!__new_finish)
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    _Alloc_traits::destroy(this->_M_impl,
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 				   __new_start + __elems_before);
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  else
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  _M_deallocate(__new_start, __len);
 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  __throw_exception_again;
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #if __cplusplus >= 201103L
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** #endif
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _GLIBCXX_ASAN_ANNOTATE_REINIT;
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       _M_deallocate(__old_start,
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 		    this->_M_impl._M_end_of_storage - __old_start);
 965              		.loc 10 520 21 view .LVU176
 966 00a0 BB68     		ldr	r3, [r7, #8]
 967              		.loc 10 520 39 view .LVU177
 968 00a2 A3EB0A03 		sub	r3, r3, r10
 969 00a6 1B11     		asrs	r3, r3, #4
 970 00a8 0A4A     		ldr	r2, .L47+4
 971 00aa 03FB02F2 		mul	r2, r3, r2
 972              	.LVL79:
 973              	.LBB588:
 974              	.LBI588:
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 975              		.loc 2 383 7 is_stmt 1 view .LVU178
 976              	.LBB589:
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 138


 977              		.loc 2 386 2 is_stmt 0 view .LVU179
 978 00ae BAF1000F 		cmp	r10, #0
 979 00b2 03D0     		beq	.L44
 980              	.LVL80:
 981              	.LBB590:
 982              	.LBI590:
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 983              		.loc 6 515 7 is_stmt 1 view .LVU180
 984              	.LBB591:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 985              		.loc 6 516 23 is_stmt 0 view .LVU181
 986 00b4 5146     		mov	r1, r10
 987 00b6 3846     		mov	r0, r7
 988 00b8 FFF7FEFF 		bl	_ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j
 989              	.LVL81:
 990              	.L44:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 991              		.loc 6 516 23 view .LVU182
 992              	.LBE591:
 993              	.LBE590:
 994              	.LBE589:
 995              	.LBE588:
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       this->_M_impl._M_start = __new_start;
 996              		.loc 10 521 30 view .LVU183
 997 00bc C7F80080 		str	r8, [r7]
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       this->_M_impl._M_finish = __new_finish;
 998              		.loc 10 522 31 view .LVU184
 999 00c0 7C60     		str	r4, [r7, #4]
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       this->_M_impl._M_end_of_storage = __new_start + __len;
 1000              		.loc 10 523 53 view .LVU185
 1001 00c2 09EB4909 		add	r9, r9, r9, lsl #1
 1002              	.LVL82:
 1003              		.loc 10 523 53 view .LVU186
 1004 00c6 08EB0913 		add	r3, r8, r9, lsl #4
 1005              		.loc 10 523 39 view .LVU187
 1006 00ca BB60     		str	r3, [r7, #8]
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     }
 1007              		.loc 10 524 5 view .LVU188
 1008 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1009              	.LVL83:
 1010              	.L48:
 1011              		.loc 10 524 5 view .LVU189
 1012              		.align	2
 1013              	.L47:
 1014 00d0 00000000 		.word	.LC0
 1015 00d4 ABAAAAAA 		.word	-1431655765
 1016              		.cfi_endproc
 1017              	.LFE1322:
 1018              		.fnend
 1020              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_,"axG",%progbits,_ZNSt6vectorI8PathSt
 1021              		.align	1
 1022              		.weak	_ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_
 1023              		.syntax unified
 1024              		.thumb
 1025              		.thumb_func
 1027              	_ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_:
 1028              		.fnstart
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 139


 1029              	.LVL84:
 1030              	.LFB1289:
1278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 1031              		.loc 2 1278 7 is_stmt 1 view -0
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 0
 1034              		@ frame_needed = 0, uses_anonymous_args = 0
1278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 1035              		.loc 2 1278 7 is_stmt 0 view .LVU191
 1036 0000 10B5     		push	{r4, lr}
 1037              		.save {r4, lr}
 1038              	.LCFI10:
 1039              		.cfi_def_cfa_offset 8
 1040              		.cfi_offset 4, -8
 1041              		.cfi_offset 14, -4
 1042 0002 0446     		mov	r4, r0
 1043 0004 8C46     		mov	ip, r1
1280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
 1044              		.loc 2 1280 20 view .LVU192
 1045 0006 4168     		ldr	r1, [r0, #4]
 1046              	.LVL85:
1280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
 1047              		.loc 2 1280 47 view .LVU193
 1048 0008 8368     		ldr	r3, [r0, #8]
1280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  {
 1049              		.loc 2 1280 2 view .LVU194
 1050 000a 9942     		cmp	r1, r3
 1051 000c 10D0     		beq	.L50
 1052              	.LVL86:
 1053              	.LBB592:
 1054              	.LBI592:
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 		  _Args&&... __args)
 1055              		.loc 6 532 2 is_stmt 1 view .LVU195
 1056              	.LBB593:
 1057              	.LBI593:
 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
 1058              		.loc 4 185 2 view .LVU196
 1059              	.LBB594:
 1060              		.loc 4 187 4 is_stmt 0 discriminator 1 view .LVU197
 1061 000e 8E46     		mov	lr, r1
 1062 0010 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1063              	.LVL87:
 1064              		.loc 4 187 4 discriminator 1 view .LVU198
 1065 0014 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1066              	.LVL88:
 1067              		.loc 4 187 4 discriminator 1 view .LVU199
 1068 0018 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1069              	.LVL89:
 1070              		.loc 4 187 4 discriminator 1 view .LVU200
 1071 001c AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1072              	.LVL90:
 1073              		.loc 4 187 4 discriminator 1 view .LVU201
 1074 0020 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 1075 0024 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 1076              	.LVL91:
 1077              		.loc 4 187 4 discriminator 1 view .LVU202
 1078              	.LBE594:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 140


 1079              	.LBE593:
 1080              	.LBE592:
1285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1081              		.loc 2 1285 22 view .LVU203
 1082 0028 6368     		ldr	r3, [r4, #4]
1285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
 1083              		.loc 2 1285 6 view .LVU204
 1084 002a 3033     		adds	r3, r3, #48
 1085 002c 6360     		str	r3, [r4, #4]
 1086              	.LVL92:
 1087              	.L49:
1290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1088              		.loc 2 1290 7 view .LVU205
 1089 002e 10BD     		pop	{r4, pc}
 1090              	.LVL93:
 1091              	.L50:
 1092              	.LBB595:
 1093              	.LBI595:
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1094              		.loc 2 890 7 is_stmt 1 view .LVU206
 1095              	.LBB596:
 1096              	.LBB597:
 1097              	.LBI597:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 1098              		.loc 3 1076 7 view .LVU207
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 1099              		.loc 3 1076 7 is_stmt 0 view .LVU208
 1100              	.LBE597:
 1101              	.LBE596:
 1102              	.LBE595:
1289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 1103              		.loc 2 1289 21 discriminator 1 view .LVU209
 1104 0030 6246     		mov	r2, ip
 1105 0032 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_
 1106              	.LVL94:
1290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1107              		.loc 2 1290 7 view .LVU210
 1108 0036 FAE7     		b	.L49
 1109              		.cfi_endproc
 1110              	.LFE1289:
 1111              		.fnend
 1113              		.section	.text._ZN4Path11addStraightEf,"ax",%progbits
 1114              		.align	1
 1115              		.global	_ZN4Path11addStraightEf
 1116              		.syntax unified
 1117              		.thumb
 1118              		.thumb_func
 1120              	_ZN4Path11addStraightEf:
 1121              		.fnstart
 1122              	.LVL95:
 1123              	.LFB1267:
   3:Core/RobotController/Src/Path.cpp ****     // „ÇÇ„ÅóÈÄ£Á∂ö„Åß Straight „ÇíËøΩÂä†„Åô„Çã„Å™„Çâ„ÄÅÂæå„Çç„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Å®„Éû„Éº„Ç∏„Åó„Å¶„ÇÇ„
 1124              		.loc 1 3 40 is_stmt 1 view -0
 1125              		.cfi_startproc
 1126              		@ args = 0, pretend = 0, frame = 48
 1127              		@ frame_needed = 0, uses_anonymous_args = 0
   3:Core/RobotController/Src/Path.cpp ****     // „ÇÇ„ÅóÈÄ£Á∂ö„Åß Straight „ÇíËøΩÂä†„Åô„Çã„Å™„Çâ„ÄÅÂæå„Çç„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„Å®„Éû„Éº„Ç∏„Åó„Å¶„ÇÇ„
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 141


 1128              		.loc 1 3 40 is_stmt 0 view .LVU212
 1129 0000 10B5     		push	{r4, lr}
 1130              		.save {r4, lr}
 1131              	.LCFI11:
 1132              		.cfi_def_cfa_offset 8
 1133              		.cfi_offset 4, -8
 1134              		.cfi_offset 14, -4
 1135 0002 2DED028B 		vpush.64	{d8}
 1136              		.vsave {d8}
 1137              	.LCFI12:
 1138              		.cfi_def_cfa_offset 16
 1139              		.cfi_offset 80, -16
 1140              		.cfi_offset 81, -12
 1141              		.pad #48
 1142 0006 8CB0     		sub	sp, sp, #48
 1143              	.LCFI13:
 1144              		.cfi_def_cfa_offset 64
 1145 0008 0446     		mov	r4, r0
 1146 000a B0EE408A 		vmov.f32	s16, s0
   6:Core/RobotController/Src/Path.cpp ****         PathStep& last = m_steps.back();
 1147              		.loc 1 6 5 is_stmt 1 view .LVU213
 1148              	.LBB598:
   6:Core/RobotController/Src/Path.cpp ****         PathStep& last = m_steps.back();
 1149              		.loc 1 6 23 is_stmt 0 view .LVU214
 1150 000e FFF7FEFF 		bl	_ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv
 1151              	.LVL96:
   6:Core/RobotController/Src/Path.cpp ****         PathStep& last = m_steps.back();
 1152              		.loc 1 6 5 discriminator 1 view .LVU215
 1153 0012 20B9     		cbnz	r0, .L54
 1154              	.LBB599:
   7:Core/RobotController/Src/Path.cpp ****         if (last.stepType == StepType::Straight) {
 1155              		.loc 1 7 9 is_stmt 1 view .LVU216
   7:Core/RobotController/Src/Path.cpp ****         if (last.stepType == StepType::Straight) {
 1156              		.loc 1 7 38 is_stmt 0 view .LVU217
 1157 0014 2046     		mov	r0, r4
 1158 0016 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE4backEv
 1159              	.LVL97:
   8:Core/RobotController/Src/Path.cpp ****             // Âæå„Çç„Åå Straight „Å™„ÇâË∑ùÈõ¢„ÇíÂä†ÁÆó
 1160              		.loc 1 8 9 is_stmt 1 view .LVU218
   8:Core/RobotController/Src/Path.cpp ****             // Âæå„Çç„Åå Straight „Å™„ÇâË∑ùÈõ¢„ÇíÂä†ÁÆó
 1161              		.loc 1 8 18 is_stmt 0 view .LVU219
 1162 001a 0368     		ldr	r3, [r0]
   8:Core/RobotController/Src/Path.cpp ****             // Âæå„Çç„Åå Straight „Å™„ÇâË∑ùÈõ¢„ÇíÂä†ÁÆó
 1163              		.loc 1 8 9 view .LVU220
 1164 001c BBB1     		cbz	r3, .L57
 1165              	.LVL98:
 1166              	.L54:
   8:Core/RobotController/Src/Path.cpp ****             // Âæå„Çç„Åå Straight „Å™„ÇâË∑ùÈõ¢„ÇíÂä†ÁÆó
 1167              		.loc 1 8 9 view .LVU221
 1168              	.LBE599:
 1169              	.LBE598:
  15:Core/RobotController/Src/Path.cpp ****     step.stepType = StepType::Straight;
 1170              		.loc 1 15 5 is_stmt 1 view .LVU222
 1171              	.LBB601:
 1172              	.LBI601:
 1173              		.file 11 "Core/RobotController/Src/../Inc/Path.hpp"
   1:Core/RobotController/Src/../Inc/Path.hpp **** #pragma once
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 142


   2:Core/RobotController/Src/../Inc/Path.hpp **** 
   3:Core/RobotController/Src/../Inc/Path.hpp **** #include <vector>
   4:Core/RobotController/Src/../Inc/Path.hpp **** #include <cstdint>
   5:Core/RobotController/Src/../Inc/Path.hpp **** 
   6:Core/RobotController/Src/../Inc/Path.hpp **** enum class StepType {
   7:Core/RobotController/Src/../Inc/Path.hpp ****     Straight,      // Áõ¥ÈÄ≤
   8:Core/RobotController/Src/../Inc/Path.hpp ****     TurnLeft90,    // Â∑¶ 90¬∞„Çø„Éº„É≥
   9:Core/RobotController/Src/../Inc/Path.hpp ****     TurnRight90,   // Âè≥ 90¬∞„Çø„Éº„É≥
  10:Core/RobotController/Src/../Inc/Path.hpp ****     Turn180,       // 180¬∞„Åù„ÅÆÂ†¥ÂõûËª¢
  11:Core/RobotController/Src/../Inc/Path.hpp ****     // ‰ª•‰∏ã„ÅØÈ´òÂ∫¶„Å™„Çø„Éº„É≥Ôºà„Çπ„É©„É≠„Éº„É†„ÇÑÂ§ßÂõû„ÇäÁ≠âÔºâ„ÇíËøΩÂä†„Åó„Å¶„ÇÇOK
  12:Core/RobotController/Src/../Inc/Path.hpp ****     // SlalomLeft90,
  13:Core/RobotController/Src/../Inc/Path.hpp ****     // SlalomRight90,
  14:Core/RobotController/Src/../Inc/Path.hpp ****     // ...
  15:Core/RobotController/Src/../Inc/Path.hpp **** };
  16:Core/RobotController/Src/../Inc/Path.hpp **** 
  17:Core/RobotController/Src/../Inc/Path.hpp **** /**
  18:Core/RobotController/Src/../Inc/Path.hpp ****  * @brief „É≠„Éú„ÉÉ„Éà„Åå1„Çπ„ÉÜ„ÉÉ„Éó„ÅßË°å„ÅÜÂãï‰Ωú(Áõ¥ÈÄ≤ or „Çø„Éº„É≥)„ÇíË°®„Åô„Éá„Éº„Çø
  19:Core/RobotController/Src/../Inc/Path.hpp ****  */
  20:Core/RobotController/Src/../Inc/Path.hpp **** struct PathStep {
  21:Core/RobotController/Src/../Inc/Path.hpp ****     StepType stepType;    ///< Âãï‰Ωú„ÅÆÁ®ÆÈ°û
  22:Core/RobotController/Src/../Inc/Path.hpp **** 
  23:Core/RobotController/Src/../Inc/Path.hpp ****     float distance;  // „Åì„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÅßÈÄ≤„ÇÄË∑ùÈõ¢
  24:Core/RobotController/Src/../Inc/Path.hpp ****     float angle;  // „Çø„Éº„É≥ÊôÇ„ÅÆÂõûËª¢ËßíÂ∫¶
  25:Core/RobotController/Src/../Inc/Path.hpp **** 
  26:Core/RobotController/Src/../Inc/Path.hpp ****     // „Åì„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó„ÇíË°å„ÅÜÈöõ„ÅÆÊÉ≥ÂÆöÈÄüÂ∫¶(ÈÄöÈÅéÈÄüÂ∫¶„Å™„Å©)
  27:Core/RobotController/Src/../Inc/Path.hpp ****     float speed;
  28:Core/RobotController/Src/../Inc/Path.hpp ****     float speedSaturation;  // ÈÄüÂ∫¶„ÅÆÊúÄÂ§ßÂÄ§(È£ΩÂíåÂÄ§)
  29:Core/RobotController/Src/../Inc/Path.hpp ****     float angularVelocity;  // ËßíÈÄüÂ∫¶(ÊóãÂõûÊôÇ„ÅÆ„Åø)
  30:Core/RobotController/Src/../Inc/Path.hpp ****     float angularSaturation;  // ËßíÈÄüÂ∫¶„ÅÆÊúÄÂ§ßÂÄ§(È£ΩÂíåÂÄ§)
  31:Core/RobotController/Src/../Inc/Path.hpp **** 
  32:Core/RobotController/Src/../Inc/Path.hpp ****     // „Çø„Éº„É≥Áî®„ÅÆËøΩÂä†„Éë„É©„É°„Éº„Çø(ÊóãÂõûÂçäÂæÑ, ÂõûËª¢‰∏≠ÂøÉ, ÈÄ≤ÂÖ•/ÈÄÄÂá∫ÈÄüÂ∫¶„Å™„Å©)
  33:Core/RobotController/Src/../Inc/Path.hpp ****     // ÂøÖË¶Å„Å´Âøú„Åò„Å¶Êã°Âºµ
  34:Core/RobotController/Src/../Inc/Path.hpp ****     float turnRadius;     ///< „Çπ„É©„É≠„Éº„É†„Çø„Éº„É≥„ÇíË°å„ÅÜÂ†¥Âêà„ÅÆÊóãÂõûÂçäÂæÑ(Â§ßÂõû„Çä/Â∞è
  35:Core/RobotController/Src/../Inc/Path.hpp ****     float inVelocity;   ///< ÈÄ≤ÂÖ•ÈÄüÂ∫¶(‰æã)
  36:Core/RobotController/Src/../Inc/Path.hpp ****     float outVelocity;  ///< ÈÄÄÂá∫ÈÄüÂ∫¶(‰æã)
  37:Core/RobotController/Src/../Inc/Path.hpp ****     float inDistance;   ///< ÈÄ≤ÂÖ•Ë∑ùÈõ¢(‰æã)  
  38:Core/RobotController/Src/../Inc/Path.hpp ****     float outDistance;  ///< ÈÄÄÂá∫Ë∑ùÈõ¢(‰æã)
  39:Core/RobotController/Src/../Inc/Path.hpp **** 
  40:Core/RobotController/Src/../Inc/Path.hpp ****     // „Ç≥„É≥„Çπ„Éà„É©„ÇØ„Çø („Éá„Éï„Ç©„É´„Éà)
  41:Core/RobotController/Src/../Inc/Path.hpp ****     PathStep()
 1174              		.loc 11 41 5 view .LVU223
 1175              	.LBB602:
 1176              	.LBB603:
  42:Core/RobotController/Src/../Inc/Path.hpp ****         : stepType(StepType::Straight)
 1177              		.loc 11 42 11 is_stmt 0 view .LVU224
 1178 001e 0023     		movs	r3, #0
 1179 0020 0093     		str	r3, [sp]
  43:Core/RobotController/Src/../Inc/Path.hpp ****         , distance(0)
 1180              		.loc 11 43 11 view .LVU225
 1181 0022 0023     		movs	r3, #0
 1182 0024 0193     		str	r3, [sp, #4]	@ float
  44:Core/RobotController/Src/../Inc/Path.hpp ****         , angle(0)
 1183              		.loc 11 44 11 view .LVU226
 1184 0026 0293     		str	r3, [sp, #8]	@ float
  45:Core/RobotController/Src/../Inc/Path.hpp ****         , speed(0.0f)
 1185              		.loc 11 45 11 view .LVU227
 1186 0028 0393     		str	r3, [sp, #12]	@ float
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 143


  46:Core/RobotController/Src/../Inc/Path.hpp ****         , speedSaturation(0.0f)
 1187              		.loc 11 46 11 view .LVU228
 1188 002a 0493     		str	r3, [sp, #16]	@ float
  47:Core/RobotController/Src/../Inc/Path.hpp ****         , angularVelocity(0.0f)
 1189              		.loc 11 47 11 view .LVU229
 1190 002c 0593     		str	r3, [sp, #20]	@ float
  48:Core/RobotController/Src/../Inc/Path.hpp ****         , angularSaturation(0.0f)
 1191              		.loc 11 48 11 view .LVU230
 1192 002e 0693     		str	r3, [sp, #24]	@ float
  49:Core/RobotController/Src/../Inc/Path.hpp ****         , turnRadius(0.0f)
 1193              		.loc 11 49 11 view .LVU231
 1194 0030 0793     		str	r3, [sp, #28]	@ float
  50:Core/RobotController/Src/../Inc/Path.hpp ****         , inVelocity(0.0f)
 1195              		.loc 11 50 11 view .LVU232
 1196 0032 0893     		str	r3, [sp, #32]	@ float
  51:Core/RobotController/Src/../Inc/Path.hpp ****         , outVelocity(0.0f)
 1197              		.loc 11 51 11 view .LVU233
 1198 0034 0993     		str	r3, [sp, #36]	@ float
  52:Core/RobotController/Src/../Inc/Path.hpp ****         , inDistance(0.0f)
 1199              		.loc 11 52 11 view .LVU234
 1200 0036 0A93     		str	r3, [sp, #40]	@ float
  53:Core/RobotController/Src/../Inc/Path.hpp ****         , outDistance(0.0f)
 1201              		.loc 11 53 11 view .LVU235
 1202 0038 0B93     		str	r3, [sp, #44]	@ float
 1203              	.LVL99:
 1204              		.loc 11 53 11 view .LVU236
 1205              	.LBE603:
 1206              	.LBE602:
 1207              	.LBE601:
  16:Core/RobotController/Src/Path.cpp ****     step.distance = distance;
 1208              		.loc 1 16 5 is_stmt 1 view .LVU237
  17:Core/RobotController/Src/Path.cpp ****     m_steps.push_back(step);
 1209              		.loc 1 17 5 view .LVU238
  17:Core/RobotController/Src/Path.cpp ****     m_steps.push_back(step);
 1210              		.loc 1 17 19 is_stmt 0 view .LVU239
 1211 003a 8DED018A 		vstr.32	s16, [sp, #4]
  18:Core/RobotController/Src/Path.cpp **** }
 1212              		.loc 1 18 5 is_stmt 1 view .LVU240
  18:Core/RobotController/Src/Path.cpp **** }
 1213              		.loc 1 18 22 is_stmt 0 view .LVU241
 1214 003e 6946     		mov	r1, sp
 1215 0040 2046     		mov	r0, r4
 1216 0042 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_
 1217              	.LVL100:
 1218              	.L53:
  19:Core/RobotController/Src/Path.cpp **** 
 1219              		.loc 1 19 1 view .LVU242
 1220 0046 0CB0     		add	sp, sp, #48
 1221              	.LCFI14:
 1222              		.cfi_remember_state
 1223              		.cfi_def_cfa_offset 16
 1224              		@ sp needed
 1225 0048 BDEC028B 		vldm	sp!, {d8}
 1226              	.LCFI15:
 1227              		.cfi_restore 80
 1228              		.cfi_restore 81
 1229              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 144


 1230              	.LVL101:
  19:Core/RobotController/Src/Path.cpp **** 
 1231              		.loc 1 19 1 view .LVU243
 1232 004c 10BD     		pop	{r4, pc}
 1233              	.LVL102:
 1234              	.L57:
 1235              	.LCFI16:
 1236              		.cfi_restore_state
 1237              	.LBB604:
 1238              	.LBB600:
  10:Core/RobotController/Src/Path.cpp ****             return;
 1239              		.loc 1 10 13 is_stmt 1 view .LVU244
  10:Core/RobotController/Src/Path.cpp ****             return;
 1240              		.loc 1 10 18 is_stmt 0 view .LVU245
 1241 004e D0ED017A 		vldr.32	s15, [r0, #4]
  10:Core/RobotController/Src/Path.cpp ****             return;
 1242              		.loc 1 10 27 view .LVU246
 1243 0052 77EE887A 		vadd.f32	s15, s15, s16
 1244 0056 C0ED017A 		vstr.32	s15, [r0, #4]
  11:Core/RobotController/Src/Path.cpp ****         }
 1245              		.loc 1 11 13 is_stmt 1 view .LVU247
 1246 005a F4E7     		b	.L53
 1247              	.LBE600:
 1248              	.LBE604:
 1249              		.cfi_endproc
 1250              	.LFE1267:
 1251              		.fnend
 1253              		.section	.text._ZN4Path7addTurnE8StepType,"ax",%progbits
 1254              		.align	1
 1255              		.global	_ZN4Path7addTurnE8StepType
 1256              		.syntax unified
 1257              		.thumb
 1258              		.thumb_func
 1260              	_ZN4Path7addTurnE8StepType:
 1261              		.fnstart
 1262              	.LVL103:
 1263              	.LFB1268:
  21:Core/RobotController/Src/Path.cpp ****     // „Åì„Åì„Åß„ÅØ distance=0 „Å®„Åó„Å¶Ê†ºÁ¥ç
 1264              		.loc 1 21 39 view -0
 1265              		.cfi_startproc
 1266              		@ args = 0, pretend = 0, frame = 48
 1267              		@ frame_needed = 0, uses_anonymous_args = 0
  21:Core/RobotController/Src/Path.cpp ****     // „Åì„Åì„Åß„ÅØ distance=0 „Å®„Åó„Å¶Ê†ºÁ¥ç
 1268              		.loc 1 21 39 is_stmt 0 view .LVU249
 1269 0000 00B5     		push	{lr}
 1270              		.save {lr}
 1271              	.LCFI17:
 1272              		.cfi_def_cfa_offset 4
 1273              		.cfi_offset 14, -4
 1274              		.pad #52
 1275 0002 8DB0     		sub	sp, sp, #52
 1276              	.LCFI18:
 1277              		.cfi_def_cfa_offset 56
  23:Core/RobotController/Src/Path.cpp ****     step.stepType = turnType;
 1278              		.loc 1 23 5 is_stmt 1 view .LVU250
 1279              	.LVL104:
 1280              	.LBB605:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 145


 1281              	.LBI605:
  41:Core/RobotController/Src/../Inc/Path.hpp ****         : stepType(StepType::Straight)
 1282              		.loc 11 41 5 view .LVU251
 1283              	.LBB606:
 1284              	.LBB607:
  42:Core/RobotController/Src/../Inc/Path.hpp ****         , distance(0)
 1285              		.loc 11 42 11 is_stmt 0 view .LVU252
 1286 0004 0023     		movs	r3, #0
 1287 0006 0093     		str	r3, [sp]
  43:Core/RobotController/Src/../Inc/Path.hpp ****         , angle(0)
 1288              		.loc 11 43 11 view .LVU253
 1289 0008 0023     		movs	r3, #0
 1290 000a 0193     		str	r3, [sp, #4]	@ float
  44:Core/RobotController/Src/../Inc/Path.hpp ****         , speed(0.0f)
 1291              		.loc 11 44 11 view .LVU254
 1292 000c 0293     		str	r3, [sp, #8]	@ float
  45:Core/RobotController/Src/../Inc/Path.hpp ****         , speedSaturation(0.0f)
 1293              		.loc 11 45 11 view .LVU255
 1294 000e 0393     		str	r3, [sp, #12]	@ float
  46:Core/RobotController/Src/../Inc/Path.hpp ****         , angularVelocity(0.0f)
 1295              		.loc 11 46 11 view .LVU256
 1296 0010 0493     		str	r3, [sp, #16]	@ float
  47:Core/RobotController/Src/../Inc/Path.hpp ****         , angularSaturation(0.0f)
 1297              		.loc 11 47 11 view .LVU257
 1298 0012 0593     		str	r3, [sp, #20]	@ float
  48:Core/RobotController/Src/../Inc/Path.hpp ****         , turnRadius(0.0f)
 1299              		.loc 11 48 11 view .LVU258
 1300 0014 0693     		str	r3, [sp, #24]	@ float
  49:Core/RobotController/Src/../Inc/Path.hpp ****         , inVelocity(0.0f)
 1301              		.loc 11 49 11 view .LVU259
 1302 0016 0793     		str	r3, [sp, #28]	@ float
  50:Core/RobotController/Src/../Inc/Path.hpp ****         , outVelocity(0.0f)
 1303              		.loc 11 50 11 view .LVU260
 1304 0018 0893     		str	r3, [sp, #32]	@ float
  51:Core/RobotController/Src/../Inc/Path.hpp ****         , inDistance(0.0f)
 1305              		.loc 11 51 11 view .LVU261
 1306 001a 0993     		str	r3, [sp, #36]	@ float
  52:Core/RobotController/Src/../Inc/Path.hpp ****         , outDistance(0.0f)
 1307              		.loc 11 52 11 view .LVU262
 1308 001c 0A93     		str	r3, [sp, #40]	@ float
 1309              		.loc 11 53 11 view .LVU263
 1310 001e 0B93     		str	r3, [sp, #44]	@ float
 1311              	.LVL105:
 1312              		.loc 11 53 11 view .LVU264
 1313              	.LBE607:
 1314              	.LBE606:
 1315              	.LBE605:
  24:Core/RobotController/Src/Path.cpp ****     step.distance = 0;
 1316              		.loc 1 24 5 is_stmt 1 view .LVU265
  24:Core/RobotController/Src/Path.cpp ****     step.distance = 0;
 1317              		.loc 1 24 19 is_stmt 0 view .LVU266
 1318 0020 0091     		str	r1, [sp]
  25:Core/RobotController/Src/Path.cpp ****     m_steps.push_back(step);
 1319              		.loc 1 25 5 is_stmt 1 view .LVU267
  26:Core/RobotController/Src/Path.cpp **** }
 1320              		.loc 1 26 5 view .LVU268
  26:Core/RobotController/Src/Path.cpp **** }
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 146


 1321              		.loc 1 26 22 is_stmt 0 view .LVU269
 1322 0022 6946     		mov	r1, sp
 1323              	.LVL106:
  26:Core/RobotController/Src/Path.cpp **** }
 1324              		.loc 1 26 22 view .LVU270
 1325 0024 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_
 1326              	.LVL107:
  27:Core/RobotController/Src/Path.cpp **** 
 1327              		.loc 1 27 1 view .LVU271
 1328 0028 0DB0     		add	sp, sp, #52
 1329              	.LCFI19:
 1330              		.cfi_def_cfa_offset 4
 1331              		@ sp needed
 1332 002a 5DF804FB 		ldr	pc, [sp], #4
 1333              		.cfi_endproc
 1334              	.LFE1268:
 1335              		.fnend
 1337              		.section	.rodata._ZNSt6vectorI8PathStepSaIS0_EE7reserveEj.str1.4,"aMS",%progbits,1
 1338              		.align	2
 1339              	.LC1:
 1340 0000 76656374 		.ascii	"vector::reserve\000"
 1340      6F723A3A 
 1340      72657365 
 1340      72766500 
 1341              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EE7reserveEj,"axG",%progbits,_ZNSt6vectorI8PathStepSaIS
 1342              		.align	1
 1343              		.weak	_ZNSt6vectorI8PathStepSaIS0_EE7reserveEj
 1344              		.syntax unified
 1345              		.thumb
 1346              		.thumb_func
 1348              	_ZNSt6vectorI8PathStepSaIS0_EE7reserveEj:
 1349              		.fnstart
 1350              	.LVL108:
 1351              	.LFB1292:
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     reserve(size_type __n)
 1352              		.loc 10 67 5 is_stmt 1 view -0
 1353              		.cfi_startproc
 1354              		@ args = 0, pretend = 0, frame = 0
 1355              		@ frame_needed = 0, uses_anonymous_args = 0
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     reserve(size_type __n)
 1356              		.loc 10 67 5 is_stmt 0 view .LVU273
 1357 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1358              		.save {r3, r4, r5, r6, r7, lr}
 1359              	.LCFI20:
 1360              		.cfi_def_cfa_offset 24
 1361              		.cfi_offset 3, -24
 1362              		.cfi_offset 4, -20
 1363              		.cfi_offset 5, -16
 1364              		.cfi_offset 6, -12
 1365              		.cfi_offset 7, -8
 1366              		.cfi_offset 14, -4
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
 1367              		.loc 10 70 7 discriminator 1 view .LVU274
 1368 0002 1A4B     		ldr	r3, .L68
 1369 0004 9942     		cmp	r1, r3
 1370 0006 2CD8     		bhi	.L67
 1371 0008 0446     		mov	r4, r0
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 147


 1372 000a 0D46     		mov	r5, r1
 1373              	.LVL109:
 1374              	.LBB608:
 1375              	.LBB609:
 1376              	.LBI609:
1075:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 1377              		.loc 2 1075 7 is_stmt 1 view .LVU275
 1378              	.LBB610:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			 - this->_M_impl._M_start); }
 1379              		.loc 2 1076 40 is_stmt 0 view .LVU276
 1380 000c 8368     		ldr	r3, [r0, #8]
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1381              		.loc 2 1077 21 view .LVU277
 1382 000e 0268     		ldr	r2, [r0]
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1383              		.loc 2 1077 5 view .LVU278
 1384 0010 9B1A     		subs	r3, r3, r2
 1385 0012 1B11     		asrs	r3, r3, #4
 1386 0014 1649     		ldr	r1, .L68+4
 1387              	.LVL110:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1388              		.loc 2 1077 5 view .LVU279
 1389 0016 01FB03F3 		mul	r3, r1, r3
 1390              	.LVL111:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1391              		.loc 2 1077 5 view .LVU280
 1392              	.LBE610:
 1393              	.LBE609:
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 1394              		.loc 10 72 7 discriminator 1 view .LVU281
 1395 001a 9D42     		cmp	r5, r3
 1396 001c 20D9     		bls	.L60
 1397              	.LVL112:
 1398              	.LBB611:
 1399              	.LBB612:
 1400              	.LBI612:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1401              		.loc 2 989 7 is_stmt 1 view .LVU282
 1402              	.LBB613:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1403              		.loc 2 990 40 is_stmt 0 view .LVU283
 1404 001e 4768     		ldr	r7, [r0, #4]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1405              		.loc 2 990 50 view .LVU284
 1406 0020 BF1A     		subs	r7, r7, r2
 1407              	.LVL113:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1408              		.loc 2 990 50 view .LVU285
 1409              	.LBE613:
 1410              	.LBE612:
 1411              	.LBB614:
 1412              	.LBI614:
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 1413              		.loc 2 375 7 is_stmt 1 view .LVU286
 1414              	.LBB615:
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 1415              		.loc 2 378 18 is_stmt 0 view .LVU287
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 148


 1416 0022 0DB3     		cbz	r5, .L65
 1417              	.LVL114:
 1418              	.LBB616:
 1419              	.LBI616:
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return __a.allocate(__n); }
 1420              		.loc 6 481 7 is_stmt 1 view .LVU288
 1421              	.LBB617:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1422              		.loc 6 482 28 is_stmt 0 view .LVU289
 1423 0024 0022     		movs	r2, #0
 1424 0026 2946     		mov	r1, r5
 1425 0028 FFF7FEFF 		bl	_ZNSt15__new_allocatorI8PathStepE8allocateEjPKv
 1426              	.LVL115:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1427              		.loc 6 482 28 view .LVU290
 1428 002c 0646     		mov	r6, r0
 1429              	.LVL116:
 1430              	.L63:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1431              		.loc 6 482 28 view .LVU291
 1432              	.LBE617:
 1433              	.LBE616:
 1434              	.LBE615:
 1435              	.LBE614:
 1436              	.LBB619:
 1437              	.LBI619:
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return this->_M_impl; }
 1438              		.loc 2 298 7 is_stmt 1 view .LVU292
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return this->_M_impl; }
 1439              		.loc 2 298 7 is_stmt 0 view .LVU293
 1440              	.LBE619:
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			  __tmp, _M_get_Tp_allocator());
 1441              		.loc 10 80 19 view .LVU294
 1442 002e 2346     		mov	r3, r4
 1443 0030 3246     		mov	r2, r6
 1444 0032 6168     		ldr	r1, [r4, #4]
 1445 0034 2068     		ldr	r0, [r4]
 1446 0036 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
 1447              	.LVL117:
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			this->_M_impl._M_end_of_storage
 1448              		.loc 10 93 17 view .LVU295
 1449 003a 2168     		ldr	r1, [r4]
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			- this->_M_impl._M_start);
 1450              		.loc 10 94 18 view .LVU296
 1451 003c A268     		ldr	r2, [r4, #8]
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_start = __tmp;
 1452              		.loc 10 95 4 view .LVU297
 1453 003e 521A     		subs	r2, r2, r1
 1454 0040 1211     		asrs	r2, r2, #4
 1455 0042 0B4B     		ldr	r3, .L68+4
 1456 0044 03FB02F2 		mul	r2, r3, r2
 1457              	.LVL118:
 1458              	.LBB620:
 1459              	.LBI620:
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 1460              		.loc 2 383 7 is_stmt 1 view .LVU298
 1461              	.LBB621:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 149


 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 1462              		.loc 2 386 2 is_stmt 0 view .LVU299
 1463 0048 11B1     		cbz	r1, .L64
 1464              	.LVL119:
 1465              	.LBB622:
 1466              	.LBI622:
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 1467              		.loc 6 515 7 is_stmt 1 view .LVU300
 1468              	.LBB623:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1469              		.loc 6 516 23 is_stmt 0 view .LVU301
 1470 004a 2046     		mov	r0, r4
 1471 004c FFF7FEFF 		bl	_ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j
 1472              	.LVL120:
 1473              	.L64:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1474              		.loc 6 516 23 view .LVU302
 1475              	.LBE623:
 1476              	.LBE622:
 1477              	.LBE621:
 1478              	.LBE620:
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
 1479              		.loc 10 96 27 view .LVU303
 1480 0050 2660     		str	r6, [r4]
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 1481              		.loc 10 97 36 view .LVU304
 1482 0052 3744     		add	r7, r7, r6
 1483              	.LVL121:
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 1484              		.loc 10 97 28 view .LVU305
 1485 0054 6760     		str	r7, [r4, #4]
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 1486              		.loc 10 98 61 view .LVU306
 1487 0056 05EB4505 		add	r5, r5, r5, lsl #1
 1488              	.LVL122:
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 1489              		.loc 10 98 61 view .LVU307
 1490 005a 06EB0516 		add	r6, r6, r5, lsl #4
 1491              	.LVL123:
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 1492              		.loc 10 98 36 view .LVU308
 1493 005e A660     		str	r6, [r4, #8]
 1494              	.LVL124:
 1495              	.L60:
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 1496              		.loc 10 98 36 view .LVU309
 1497              	.LBE611:
 1498              	.LBE608:
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 1499              		.loc 10 100 5 view .LVU310
 1500 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1501              	.LVL125:
 1502              	.L67:
  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (this->capacity() < __n)
 1503              		.loc 10 71 22 view .LVU311
 1504 0062 0448     		ldr	r0, .L68+8
 1505              	.LVL126:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 150


  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****       if (this->capacity() < __n)
 1506              		.loc 10 71 22 view .LVU312
 1507 0064 FFF7FEFF 		bl	_ZSt20__throw_length_errorPKc
 1508              	.LVL127:
 1509              	.L65:
 1510              	.LBB626:
 1511              	.LBB625:
 1512              	.LBB624:
 1513              	.LBB618:
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 1514              		.loc 2 378 18 discriminator 2 view .LVU313
 1515 0068 0026     		movs	r6, #0
 1516 006a E0E7     		b	.L63
 1517              	.L69:
 1518              		.align	2
 1519              	.L68:
 1520 006c AAAAAA02 		.word	44739242
 1521 0070 ABAAAAAA 		.word	-1431655765
 1522 0074 00000000 		.word	.LC1
 1523              	.LBE618:
 1524              	.LBE624:
 1525              	.LBE625:
 1526              	.LBE626:
 1527              		.cfi_endproc
 1528              	.LFE1292:
 1529              		.fnend
 1531              		.section	.text._ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iterato
 1532              		.align	1
 1533              		.weak	_ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_E
 1534              		.syntax unified
 1535              		.thumb
 1536              		.thumb_func
 1538              	_ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE:
 1539              		.fnstart
 1540              	.LVL128:
 1541              	.LFB1377:
1338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
1341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     inline __normal_iterator<_Iterator, _Container>
1342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
1343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	      __n, const __normal_iterator<_Iterator, _Container>& __i)
1344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT
1345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }
1346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
1348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** } // namespace
1349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
1351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** {
1352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
1353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
1354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****   template<typename _Iterator, typename _Container>
1355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX20_CONSTEXPR
1356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _Iterator
1357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 1542              		.loc 3 1357 5 is_stmt 1 view -0
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 151


 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 0
 1545              		@ frame_needed = 0, uses_anonymous_args = 0
 1546              		@ link register save eliminated.
 1547              	.LVL129:
1358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
1359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     { return __it.base(); }
 1548              		.loc 3 1359 27 is_stmt 0 view .LVU315
 1549 0000 7047     		bx	lr
 1550              		.cfi_endproc
 1551              	.LFE1377:
 1552              		.cantunwind
 1553              		.fnend
 1555              		.section	.text._ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iterator
 1556              		.align	1
 1557              		.weak	_ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1562              	_ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE:
 1563              		.fnstart
 1564              	.LVL130:
 1565              	.LFB1378:
1357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 1566              		.loc 3 1357 5 is_stmt 1 view -0
 1567              		.cfi_startproc
 1568              		@ args = 0, pretend = 0, frame = 0
 1569              		@ frame_needed = 0, uses_anonymous_args = 0
 1570              		@ link register save eliminated.
 1571              	.LVL131:
 1572              		.loc 3 1359 27 is_stmt 0 view .LVU317
 1573 0000 7047     		bx	lr
 1574              		.cfi_endproc
 1575              	.LFE1378:
 1576              		.cantunwind
 1577              		.fnend
 1579              		.section	.text._ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEE
 1580              		.align	1
 1581              		.weak	_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEES3_ET_S8_
 1582              		.syntax unified
 1583              		.thumb
 1584              		.thumb_func
 1586              	_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_:
 1587              		.fnstart
 1588              	.LVL132:
 1589              	.LFB1380:
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /**
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @brief This does what you think it does.
 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @return   The lesser of the parameters.
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 152


 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   */
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline const _Tp&
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       if (__comp(__b, __a))
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	return __b;
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __a;
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /**
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @brief This does what you think it does.
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @ingroup sorting_algorithms
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @return   The greater of the parameters.
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  once, unlike a preprocessor macro.
 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   */
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Tp, typename _Compare>
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX14_CONSTEXPR
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline const _Tp&
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       if (__comp(__a, __b))
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	return __b;
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __a;
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // remove the __normal_iterator wrapper. See copy, fill, ...
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Iterator>
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline _Iterator
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __niter_base(_Iterator __it)
 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     { return __it; }
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Ite, typename _Seq>
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _Ite
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		 std::random_access_iterator_tag>&);
 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // Reverse the __niter_base transformation to get a
 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // __normal_iterator back again (this assumes that __normal_iterator
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // is only used to wrap random access iterators, like pointers).
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _From, typename _To>
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline _From
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __niter_wrap(_From __from, _To __res)
 1590              		.loc 8 331 5 is_stmt 1 view -0
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 153


 1591              		.cfi_startproc
 1592              		@ args = 0, pretend = 0, frame = 0
 1593              		@ frame_needed = 0, uses_anonymous_args = 0
 1594              		.loc 8 331 5 is_stmt 0 view .LVU319
 1595 0000 38B5     		push	{r3, r4, r5, lr}
 1596              	.LCFI21:
 1597              		.cfi_def_cfa_offset 16
 1598              		.cfi_offset 3, -16
 1599              		.cfi_offset 4, -12
 1600              		.cfi_offset 5, -8
 1601              		.cfi_offset 14, -4
 1602 0002 0546     		mov	r5, r0
 1603              	.LVL133:
 1604              		.loc 8 331 5 view .LVU320
 1605 0004 0C46     		mov	r4, r1
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     { return __from + (__res - std::__niter_base(__from)); }
 1606              		.loc 8 332 49 view .LVU321
 1607 0006 FFF7FEFF 		bl	_ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
 1608              	.LVL134:
 1609              		.loc 8 332 30 discriminator 1 view .LVU322
 1610 000a 201A     		subs	r0, r4, r0
 1611              	.LVL135:
 1612              	.LBB627:
 1613              	.LBI627:
1147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 1614              		.loc 3 1147 7 is_stmt 1 view .LVU323
 1615              	.LBB628:
 1616              	.LBB629:
 1617              	.LBI629:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 1618              		.loc 3 1076 7 view .LVU324
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 1619              		.loc 3 1076 7 is_stmt 0 view .LVU325
 1620              	.LBE629:
 1621              	.LBE628:
 1622              	.LBE627:
 1623              		.loc 8 332 60 view .LVU326
 1624 000c 2844     		add	r0, r0, r5
 1625 000e 38BD     		pop	{r3, r4, r5, pc}
 1626              		.loc 8 332 60 view .LVU327
 1627              		.cfi_endproc
 1628              	.LFE1380:
 1629              		.cantunwind
 1630              		.fnend
 1632              		.section	.text._ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_,"axG",%progbits,_ZSt16__do_uninit_
 1633              		.align	1
 1634              		.weak	_ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_
 1635              		.syntax unified
 1636              		.thumb
 1637              		.thumb_func
 1639              	_ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_:
 1640              		.fnstart
 1641              	.LVL136:
 1642              	.LFB1393:
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 1643              		.loc 5 113 5 is_stmt 1 view -0
 1644              		.cfi_startproc
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 154


 1645              		@ args = 0, pretend = 0, frame = 0
 1646              		@ frame_needed = 0, uses_anonymous_args = 0
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 1647              		.loc 5 113 5 is_stmt 0 view .LVU329
 1648 0000 70B5     		push	{r4, r5, r6, lr}
 1649              	.LCFI22:
 1650              		.cfi_def_cfa_offset 16
 1651              		.cfi_offset 4, -16
 1652              		.cfi_offset 5, -12
 1653              		.cfi_offset 6, -8
 1654              		.cfi_offset 14, -4
 1655 0002 0446     		mov	r4, r0
 1656 0004 0E46     		mov	r6, r1
 1657 0006 1546     		mov	r5, r2
 1658              	.LVL137:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1659              		.loc 5 119 4 view .LVU330
 1660 0008 0FE0     		b	.L75
 1661              	.LVL138:
 1662              	.L76:
 1663              	.LBB630:
 1664              	.LBI630:
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 1665              		.loc 7 109 5 is_stmt 1 view .LVU331
 1666              	.LBB631:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 1667              		.loc 7 119 7 is_stmt 0 discriminator 1 view .LVU332
 1668 000a AC46     		mov	ip, r5
 1669 000c A646     		mov	lr, r4
 1670 000e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1671 0012 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1672 0016 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1673 001a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1674 001e 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 1675 0022 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 1676              	.LVL139:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 1677              		.loc 7 119 7 discriminator 1 view .LVU333
 1678              	.LBE631:
 1679              	.LBE630:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1680              		.loc 5 119 4 is_stmt 1 discriminator 2 view .LVU334
 1681 0026 3034     		adds	r4, r4, #48
 1682              	.LVL140:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1683              		.loc 5 119 41 is_stmt 0 discriminator 2 view .LVU335
 1684 0028 3035     		adds	r5, r5, #48
 1685              	.LVL141:
 1686              	.L75:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1687              		.loc 5 119 19 is_stmt 1 discriminator 1 view .LVU336
 1688 002a B442     		cmp	r4, r6
 1689 002c EDD1     		bne	.L76
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 1690              		.loc 5 128 5 is_stmt 0 view .LVU337
 1691 002e 2846     		mov	r0, r5
 1692 0030 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 155


 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 1693              		.loc 5 128 5 view .LVU338
 1694              		.cfi_endproc
 1695              	.LFE1393:
 1696              		.cantunwind
 1697              		.fnend
 1699              		.section	.text._ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2
 1700              		.align	1
 1701              		.weak	_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_
 1702              		.syntax unified
 1703              		.thumb
 1704              		.thumb_func
 1706              	_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_S
 1707              		.fnstart
 1708              	.LVL142:
 1709              	.LFB1396:
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 1710              		.loc 5 113 5 is_stmt 1 view -0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 0
 1713              		@ frame_needed = 0, uses_anonymous_args = 0
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 1714              		.loc 5 113 5 is_stmt 0 view .LVU340
 1715 0000 70B5     		push	{r4, r5, r6, lr}
 1716              	.LCFI23:
 1717              		.cfi_def_cfa_offset 16
 1718              		.cfi_offset 4, -16
 1719              		.cfi_offset 5, -12
 1720              		.cfi_offset 6, -8
 1721              		.cfi_offset 14, -4
 1722 0002 0446     		mov	r4, r0
 1723              	.LVL143:
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 1724              		.loc 5 113 5 view .LVU341
 1725 0004 0E46     		mov	r6, r1
 1726              	.LVL144:
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		     _ForwardIterator __result)
 1727              		.loc 5 113 5 view .LVU342
 1728 0006 1546     		mov	r5, r2
 1729              	.LVL145:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1730              		.loc 5 119 4 view .LVU343
 1731 0008 0FE0     		b	.L79
 1732              	.LVL146:
 1733              	.L80:
 1734              	.LBB632:
 1735              	.LBI632:
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 1736              		.loc 7 109 5 is_stmt 1 view .LVU344
 1737              	.LBB633:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 1738              		.loc 7 119 7 is_stmt 0 discriminator 1 view .LVU345
 1739 000a AC46     		mov	ip, r5
 1740 000c A646     		mov	lr, r4
 1741 000e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 1742 0012 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1743 0016 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 156


 1744 001a ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 1745 001e 9EE80F00 		ldm	lr, {r0, r1, r2, r3}
 1746 0022 8CE80F00 		stm	ip, {r0, r1, r2, r3}
 1747              	.LVL147:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     }
 1748              		.loc 7 119 7 discriminator 1 view .LVU346
 1749              	.LBE633:
 1750              	.LBE632:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1751              		.loc 5 119 4 is_stmt 1 discriminator 2 view .LVU347
 1752              	.LBB634:
 1753              	.LBI634:
1109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 1754              		.loc 3 1109 7 view .LVU348
 1755              	.LBB635:
1111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 1756              		.loc 3 1111 2 is_stmt 0 view .LVU349
 1757 0026 3034     		adds	r4, r4, #48
 1758              	.LVL148:
1111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 1759              		.loc 3 1111 2 view .LVU350
 1760              	.LBE635:
 1761              	.LBE634:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1762              		.loc 5 119 41 discriminator 2 view .LVU351
 1763 0028 3035     		adds	r5, r5, #48
 1764              	.LVL149:
 1765              	.L79:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1766              		.loc 5 119 19 is_stmt 1 discriminator 1 view .LVU352
 1767              	.LBB636:
 1768              	.LBI636:
1241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1769              		.loc 3 1241 5 view .LVU353
1241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1770              		.loc 3 1241 5 is_stmt 0 view .LVU354
 1771              	.LBE636:
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 	    std::_Construct(std::__addressof(*__cur), *__first);
 1772              		.loc 5 119 19 discriminator 1 view .LVU355
 1773 002a B442     		cmp	r4, r6
 1774 002c EDD1     		bne	.L80
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 1775              		.loc 5 128 5 view .LVU356
 1776 002e 2846     		mov	r0, r5
 1777 0030 70BD     		pop	{r4, r5, r6, pc}
 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 1778              		.loc 5 128 5 view .LVU357
 1779              		.cfi_endproc
 1780              	.LFE1396:
 1781              		.cantunwind
 1782              		.fnend
 1784              		.section	.text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaI
 1785              		.align	1
 1786              		.weak	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS
 1787              		.syntax unified
 1788              		.thumb
 1789              		.thumb_func
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 157


 1791              	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T
 1792              		.fnstart
 1793              	.LVL150:
 1794              	.LFB1375:
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 1795              		.loc 5 163 5 is_stmt 1 view -0
 1796              		.cfi_startproc
 1797              		@ args = 0, pretend = 0, frame = 0
 1798              		@ frame_needed = 0, uses_anonymous_args = 0
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 1799              		.loc 5 163 5 is_stmt 0 view .LVU359
 1800 0000 08B5     		push	{r3, lr}
 1801              	.LCFI24:
 1802              		.cfi_def_cfa_offset 8
 1803              		.cfi_offset 3, -8
 1804              		.cfi_offset 14, -4
 1805              	.LVL151:
 1806              	.LBB637:
 1807              	.LBI637:
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 1808              		.loc 5 135 9 is_stmt 1 view .LVU360
 1809              	.LBB638:
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 1810              		.loc 5 137 32 is_stmt 0 view .LVU361
 1811 0002 FFF7FEFF 		bl	_ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0
 1812              	.LVL152:
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 1813              		.loc 5 137 32 view .LVU362
 1814              	.LBE638:
 1815              	.LBE637:
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 
 1816              		.loc 5 186 5 view .LVU363
 1817 0006 08BD     		pop	{r3, pc}
 1818              		.cfi_endproc
 1819              	.LFE1375:
 1820              		.cantunwind
 1821              		.fnend
 1823              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iterator
 1824              		.align	1
 1825              		.weak	_ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_
 1826              		.syntax unified
 1827              		.thumb
 1828              		.thumb_func
 1830              	_ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0
 1831              		.fnstart
 1832              	.LVL153:
 1833              	.LFB1335:
1613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 1834              		.loc 2 1613 2 is_stmt 1 view -0
 1835              		.cfi_startproc
 1836              		@ args = 0, pretend = 0, frame = 0
 1837              		@ frame_needed = 0, uses_anonymous_args = 0
1613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 1838              		.loc 2 1613 2 is_stmt 0 view .LVU365
 1839 0000 70B5     		push	{r4, r5, r6, lr}
 1840              		.save {r4, r5, r6, lr}
 1841              	.LCFI25:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 158


 1842              		.cfi_def_cfa_offset 16
 1843              		.cfi_offset 4, -16
 1844              		.cfi_offset 5, -12
 1845              		.cfi_offset 6, -8
 1846              		.cfi_offset 14, -4
 1847 0002 1546     		mov	r5, r2
 1848              	.LVL154:
1613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 1849              		.loc 2 1613 2 view .LVU366
 1850 0004 1E46     		mov	r6, r3
 1851              	.LVL155:
 1852              	.LBB639:
 1853              	.LBI639:
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 1854              		.loc 2 375 7 is_stmt 1 view .LVU367
 1855              	.LBB640:
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 1856              		.loc 2 378 18 is_stmt 0 view .LVU368
 1857 0006 51B1     		cbz	r1, .L86
 1858              	.LVL156:
 1859              	.LBB641:
 1860              	.LBI641:
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { return __a.allocate(__n); }
 1861              		.loc 6 481 7 is_stmt 1 view .LVU369
 1862              	.LBB642:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1863              		.loc 6 482 28 is_stmt 0 view .LVU370
 1864 0008 0022     		movs	r2, #0
 1865 000a FFF7FEFF 		bl	_ZNSt15__new_allocatorI8PathStepE8allocateEjPKv
 1866              	.LVL157:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1867              		.loc 6 482 28 view .LVU371
 1868 000e 0446     		mov	r4, r0
 1869              	.LVL158:
 1870              	.L85:
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 1871              		.loc 6 482 28 view .LVU372
 1872              	.LBE642:
 1873              	.LBE641:
 1874              	.LBE640:
 1875              	.LBE639:
 1876              	.LBB644:
 1877              	.LBI644:
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 1878              		.loc 5 366 5 is_stmt 1 view .LVU373
 1879              	.LBB645:
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 1880              		.loc 5 373 37 is_stmt 0 view .LVU374
 1881 0010 2246     		mov	r2, r4
 1882 0012 3146     		mov	r1, r6
 1883 0014 2846     		mov	r0, r5
 1884 0016 FFF7FEFF 		bl	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_E
 1885              	.LVL159:
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 1886              		.loc 5 373 37 view .LVU375
 1887              	.LBE645:
 1888              	.LBE644:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 159


1628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 1889              		.loc 2 1628 2 view .LVU376
 1890 001a 2046     		mov	r0, r4
 1891 001c 70BD     		pop	{r4, r5, r6, pc}
 1892              	.LVL160:
 1893              	.L86:
 1894              	.LBB646:
 1895              	.LBB643:
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       }
 1896              		.loc 2 378 18 discriminator 2 view .LVU377
 1897 001e 0024     		movs	r4, #0
 1898 0020 F6E7     		b	.L85
 1899              	.LBE643:
 1900              	.LBE646:
 1901              		.cfi_endproc
 1902              	.LFE1335:
 1903              		.fnend
 1905              		.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EE
 1906              		.align	1
 1907              		.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EEPT0_PT_S8
 1908              		.syntax unified
 1909              		.thumb
 1910              		.thumb_func
 1912              	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EEPT0_PT_S8_S6_:
 1913              		.fnstart
 1914              	.LVL161:
 1915              	.LFB1397:
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // No need to wrap, iterator already has the right type.
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Iterator>
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline _Iterator
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __niter_wrap(const _Iterator&, _Iterator __res)
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     { return __res; }
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // a for loop with an explicit count.
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, bool _IsSimple, typename _Category>
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct __copy_move
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _II, typename _OI>
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static _OI
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    *__result = *__first;
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  return __result;
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus >= 201103L
 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Category>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 160


 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct __copy_move<true, false, _Category>
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _II, typename _OI>
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static _OI
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  for (; __first != __last; ++__result, (void)++__first)
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    *__result = std::move(*__first);
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  return __result;
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<>
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _II, typename _OI>
 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static _OI
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    {
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      *__result = *__first;
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      ++__first;
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      ++__result;
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    }
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  return __result;
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _Tp, typename _Up>
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static void
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	__assign_one(_Tp* __to, _Up* __from)
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{ *__to = *__from; }
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if __cplusplus >= 201103L
 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<>
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _II, typename _OI>
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static _OI
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	__copy_m(_II __first, _II __last, _OI __result)
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    {
 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      *__result = std::move(*__first);
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      ++__first;
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      ++__result;
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    }
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  return __result;
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 161


 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _Tp, typename _Up>
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static void
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	__assign_one(_Tp* __to, _Up* __from)
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{ *__to = std::move(*__from); }
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove>
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       template<typename _Tp, typename _Up>
 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_GLIBCXX20_CONSTEXPR
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	static _Up*
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
 1916              		.loc 8 433 2 is_stmt 1 view -0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 0
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920              		.loc 8 433 2 is_stmt 0 view .LVU379
 1921 0000 38B5     		push	{r3, r4, r5, lr}
 1922              	.LCFI26:
 1923              		.cfi_def_cfa_offset 16
 1924              		.cfi_offset 3, -16
 1925              		.cfi_offset 4, -12
 1926              		.cfi_offset 5, -8
 1927              		.cfi_offset 14, -4
 1928 0002 1546     		mov	r5, r2
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 1929              		.loc 8 435 34 view .LVU380
 1930 0004 0C1A     		subs	r4, r1, r0
 1931              	.LVL162:
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  if (__builtin_expect(_Num > 1, true))
 1932              		.loc 8 436 4 discriminator 1 view .LVU381
 1933 0006 302C     		cmp	r4, #48
 1934 0008 06DD     		ble	.L89
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 1935              		.loc 8 437 23 view .LVU382
 1936 000a 2246     		mov	r2, r4
 1937              	.LVL163:
 1938              		.loc 8 437 23 view .LVU383
 1939 000c 0146     		mov	r1, r0
 1940              	.LVL164:
 1941              		.loc 8 437 23 view .LVU384
 1942 000e 2846     		mov	r0, r5
 1943              	.LVL165:
 1944              		.loc 8 437 23 view .LVU385
 1945 0010 FFF7FEFF 		bl	memmove
 1946              	.LVL166:
 1947              	.L90:
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  else if (_Num == 1)
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      __assign_one(__result, __first);
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  return __result + _Num;
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 1948              		.loc 8 442 2 view .LVU386
 1949 0014 2819     		adds	r0, r5, r4
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 162


 1950 0016 38BD     		pop	{r3, r4, r5, pc}
 1951              	.LVL167:
 1952              	.L89:
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  else if (_Num == 1)
 1953              		.loc 8 438 9 view .LVU387
 1954 0018 302C     		cmp	r4, #48
 1955 001a FBD1     		bne	.L90
 1956              	.LVL168:
 1957              	.LBB647:
 1958              	.LBI647:
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{ *__to = *__from; }
 1959              		.loc 8 397 2 is_stmt 1 view .LVU388
 1960              	.LBB648:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 1961              		.loc 8 398 4 is_stmt 0 view .LVU389
 1962 001c 9646     		mov	lr, r2
 1963 001e 8446     		mov	ip, r0
 1964 0020 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1965              	.LVL169:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 1966              		.loc 8 398 4 view .LVU390
 1967 0024 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1968              	.LVL170:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 1969              		.loc 8 398 4 view .LVU391
 1970 0028 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 1971              	.LVL171:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 1972              		.loc 8 398 4 view .LVU392
 1973 002c AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 1974 0030 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 1975 0034 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 1976              	.LVL172:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 1977              		.loc 8 398 21 view .LVU393
 1978 0038 ECE7     		b	.L90
 1979              	.LBE648:
 1980              	.LBE647:
 1981              		.cfi_endproc
 1982              	.LFE1397:
 1983              		.cantunwind
 1984              		.fnend
 1986              		.section	.text._ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS
 1987              		.align	1
 1988              		.weak	_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1
 1989              		.syntax unified
 1990              		.thumb
 1991              		.thumb_func
 1993              	_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S
 1994              		.fnstart
 1995              	.LVL173:
 1996              	.LFB1360:
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _Tp, typename _Ref, typename _Ptr>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 163


 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct _Deque_iterator;
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   struct _Bit_iterator;
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** _GLIBCXX_END_NAMESPACE_CONTAINER
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if _GLIBCXX_HOSTED
 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _CharT>
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     struct char_traits;
 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     class istreambuf_iterator;
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _CharT, typename _Traits>
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     class ostreambuf_iterator;
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 				    _CharT*>::__type
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __is_char<_CharT>::__value,
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a2(
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	istreambuf_iterator<_CharT, char_traits<_CharT> >,
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	istreambuf_iterator<_CharT, char_traits<_CharT> >,
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif // HOSTED
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline _OI
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #ifdef __cpp_lib_is_constant_evaluated
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       if (std::is_constant_evaluated())
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	return std::__copy_move<_IsMove, false, _Category>::
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  __copy_m(__first, __last, __result);
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 164


 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 			      _Category>::__copy_m(__first, __last, __result);
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove,
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _OI
 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		   _OI);
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove,
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	   typename _ITp, typename _IRef, typename _IPtr, typename _OTp>
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		   _GLIBCXX_STD_C::_Deque_iterator<_OTp, _OTp&, _OTp*>);
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _Tp>
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __is_random_access_iter<_II>::__value,
 526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
 527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline _OI
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a1(_II __first, _II __last, _OI __result)
 533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline _OI
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 1997              		.loc 8 538 5 is_stmt 1 view -0
 1998              		.cfi_startproc
 1999              		@ args = 0, pretend = 0, frame = 0
 2000              		@ frame_needed = 0, uses_anonymous_args = 0
 2001              		.loc 8 538 5 is_stmt 0 view .LVU395
 2002 0000 70B5     		push	{r4, r5, r6, lr}
 2003              	.LCFI27:
 2004              		.cfi_def_cfa_offset 16
 2005              		.cfi_offset 4, -16
 2006              		.cfi_offset 5, -12
 2007              		.cfi_offset 6, -8
 2008              		.cfi_offset 14, -4
 2009 0002 0E46     		mov	r6, r1
 2010              	.LVL174:
 2011              		.loc 8 538 5 view .LVU396
 2012 0004 1446     		mov	r4, r2
 2013              	.LVL175:
 539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return std::__niter_wrap(__result,
 2014              		.loc 8 540 31 view .LVU397
 2015 0006 FFF7FEFF 		bl	_ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE
 2016              	.LVL176:
 2017              		.loc 8 540 31 view .LVU398
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 165


 2018 000a 0546     		mov	r5, r0
 2019              		.loc 8 540 31 discriminator 1 view .LVU399
 2020 000c 3046     		mov	r0, r6
 2021 000e FFF7FEFF 		bl	_ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE
 2022              	.LVL177:
 2023 0012 0646     		mov	r6, r0
 2024              	.LVL178:
 2025              		.loc 8 540 31 discriminator 2 view .LVU400
 2026 0014 2046     		mov	r0, r4
 2027 0016 FFF7FEFF 		bl	_ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
 2028              	.LVL179:
 2029 001a 0246     		mov	r2, r0
 2030              	.LVL180:
 2031              	.LBB649:
 2032              	.LBI649:
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 2033              		.loc 8 532 5 is_stmt 1 view .LVU401
 2034              	.LBB650:
 2035              	.LBI650:
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 2036              		.loc 8 497 5 view .LVU402
 2037              	.LBB651:
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2038              		.loc 8 506 30 is_stmt 0 view .LVU403
 2039 001c 3146     		mov	r1, r6
 2040 001e 2846     		mov	r0, r5
 2041              	.LVL181:
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2042              		.loc 8 506 30 view .LVU404
 2043 0020 FFF7FEFF 		bl	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EEPT0_PT_S8_S6
 2044              	.LVL182:
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2045              		.loc 8 506 30 view .LVU405
 2046 0024 0146     		mov	r1, r0
 2047              	.LVL183:
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2048              		.loc 8 506 30 view .LVU406
 2049              	.LBE651:
 2050              	.LBE650:
 2051              	.LBE649:
 2052              		.loc 8 540 31 discriminator 4 view .LVU407
 2053 0026 2046     		mov	r0, r4
 2054 0028 FFF7FEFF 		bl	_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_
 2055              	.LVL184:
 541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
 542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 					     std::__niter_base(__last),
 543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 					     std::__niter_base(__result)));
 544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2056              		.loc 8 544 5 view .LVU408
 2057 002c 70BD     		pop	{r4, r5, r6, pc}
 2058              		.loc 8 544 5 view .LVU409
 2059              		.cfi_endproc
 2060              	.LFE1360:
 2061              		.cantunwind
 2062              		.fnend
 2064              		.section	.text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2
 2065              		.align	1
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 166


 2066              		.weak	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0
 2067              		.syntax unified
 2068              		.thumb
 2069              		.thumb_func
 2071              	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_S
 2072              		.fnstart
 2073              	.LVL185:
 2074              	.LFB1336:
 545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove,
 547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
 548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _OI
 549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
 551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		  _OI);
 552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove,
 554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	   typename _II, typename _Ite, typename _Seq, typename _Cat>
 555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>
 556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a(_II, _II,
 557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&);
 558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<bool _IsMove,
 560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	   typename _IIte, typename _ISeq, typename _ICat,
 561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	   typename _OIte, typename _OSeq, typename _OCat>
 562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
 563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
 565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
 566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _InputIterator, typename _Size, typename _OutputIterator>
 568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _OutputIterator
 570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,
 571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	       bool)
 572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       if (__n > 0)
 574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  while (true)
 576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    {
 577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      *__result = *__first;
 578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      ++__result;
 579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      if (--__n > 0)
 580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		++__first;
 581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	      else
 582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 		break;
 583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    }
 584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	}
 585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return __result;
 586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #if _GLIBCXX_HOSTED
 589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _CharT, typename _Size>
 590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __is_char<_CharT>::__value, _CharT*>::__type
 592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	       _Size, _CharT*, bool);
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 167


 594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _CharT, typename _Size>
 596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     typename __gnu_cxx::__enable_if<
 597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __is_char<_CharT>::__value,
 598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*> >::__type
 599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,
 600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	       _GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>,
 601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	       bool);
 602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** #endif
 603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   /**
 605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @ingroup mutating_algorithms
 607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __first  An input iterator.
 608:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __last   An input iterator.
 609:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @param  __result An output iterator.
 610:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  @return   result + (last - first)
 611:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 612:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 613:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 614:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 615:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 616:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 617:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *
 618:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 619:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****    *  within [first,last).
 620:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   */
 621:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****   template<typename _II, typename _OI>
 622:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     _GLIBCXX20_CONSTEXPR
 623:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     inline _OI
 624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 2075              		.loc 8 624 5 is_stmt 1 view -0
 2076              		.cfi_startproc
 2077              		@ args = 0, pretend = 0, frame = 0
 2078              		@ frame_needed = 0, uses_anonymous_args = 0
 2079              		.loc 8 624 5 is_stmt 0 view .LVU411
 2080 0000 08B5     		push	{r3, lr}
 2081              	.LCFI28:
 2082              		.cfi_def_cfa_offset 8
 2083              		.cfi_offset 3, -8
 2084              		.cfi_offset 14, -4
 2085              	.LBB652:
 2086              	.LBI652:
 2087              		.file 12 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/cpp_type_traits.h"
   1:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // The  -*- C++ -*- type traits classes for internal use in libstdc++
   2:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
   3:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Copyright (C) 2000-2023 Free Software Foundation, Inc.
   4:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** //
   5:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // software; you can redistribute it and/or modify it under the
   7:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // terms of the GNU General Public License as published by the
   8:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // any later version.
  10:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  11:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // This library is distributed in the hope that it will be useful,
  12:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 168


  14:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // GNU General Public License for more details.
  15:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  16:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  20:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // You should have received a copy of the GNU General Public License and
  21:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // <http://www.gnu.org/licenses/>.
  24:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  25:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** /** @file bits/cpp_type_traits.h
  26:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****  *  This is an internal header file, included by other library headers.
  27:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****  *  Do not attempt to use it directly. @headername{ext/type_traits}
  28:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****  */
  29:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  30:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Written by Gabriel Dos Reis <dosreis@cmla.ens-cachan.fr>
  31:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  32:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifndef _CPP_TYPE_TRAITS_H
  33:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #define _CPP_TYPE_TRAITS_H 1
  34:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  35:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #pragma GCC system_header
  36:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  37:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #include <bits/c++config.h>
  38:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  39:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** //
  40:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // This file provides some compile-time information about various types.
  41:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // These representations were designed, on purpose, to be constant-expressions
  42:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // and not types as found in <bits/type_traits.h>.  In particular, they
  43:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // can be used in control structures and the optimizer hopefully will do
  44:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // the obvious thing.
  45:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** //
  46:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Why integral expressions, and not functions nor types?
  47:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Firstly, these compile-time entities are used as template-arguments
  48:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // so function return values won't work:  We need compile-time entities.
  49:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // We're left with types and constant  integral expressions.
  50:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Secondly, from the point of view of ease of use, type-based compile-time
  51:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // information is -not- *that* convenient.  One has to write lots of
  52:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // overloaded functions and to hope that the compiler will select the right
  53:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // one. As a net effect, the overall structure isn't very clear at first
  54:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // glance.
  55:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Thirdly, partial ordering and overload resolution (of function templates)
  56:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // is highly costly in terms of compiler-resource.  It is a Good Thing to
  57:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // keep these resource consumption as least as possible.
  58:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** //
  59:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // See valarray_array.h for a case use.
  60:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** //
  61:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // -- Gaby (dosreis@cmla.ens-cachan.fr) 2000-03-06.
  62:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** //
  63:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // Update 2005: types are also provided and <bits/type_traits.h> has been
  64:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** // removed.
  65:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** //
  66:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  67:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** extern "C++" {
  68:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  69:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** namespace std _GLIBCXX_VISIBILITY(default)
  70:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** {
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 169


  71:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  72:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  73:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   struct __true_type { };
  74:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   struct __false_type { };
  75:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  76:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<bool>
  77:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __truth_type
  78:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { typedef __false_type __type; };
  79:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  80:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
  81:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __truth_type<true>
  82:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { typedef __true_type __type; };
  83:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  84:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // N.B. The conversions to bool are needed due to the issue
  85:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // explained in c++/19404.
  86:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<class _Sp, class _Tp>
  87:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __traitor
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
  89:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
  90:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef typename __truth_type<__value>::__type __type;
  91:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
  92:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
  93:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Compare for equality of types.
  94:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename, typename>
  95:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __are_same
  96:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
  97:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
  98:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 101:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 102:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __are_same<_Tp, _Tp>
 103:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 104:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 105:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 106:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 107:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 108:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Holds if the template-argument is a void type.
 109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 110:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_void
 111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 112:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 113:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
 114:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 115:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 116:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 117:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_void<void>
 118:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 119:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 120:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 121:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 122:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 123:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 124:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Integer types
 125:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 126:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 127:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 170


 128:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 129:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 130:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
 131:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 132:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 133:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Thirteen specializations (yes there are eleven standard integer
 134:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // types; <em>long long</em> and <em>unsigned long long</em> are
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // supported as extensions).  Up to four target-specific __int<N>
 136:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // types are supported as well.
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 138:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<bool>
 139:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 140:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 141:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 142:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 143:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 144:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 145:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<char>
 146:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 147:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 148:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 149:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 150:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 151:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 152:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<signed char>
 153:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 154:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 155:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 156:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 157:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 158:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 159:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<unsigned char>
 160:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 161:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 162:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 164:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 165:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** # ifdef __WCHAR_TYPE__
 166:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 167:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<wchar_t>
 168:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 169:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 170:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 171:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** # endif
 173:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 174:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef _GLIBCXX_USE_CHAR8_T
 175:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 176:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<char8_t>
 177:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 178:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 179:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 180:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 181:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 183:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #if __cplusplus >= 201103L
 184:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 171


 185:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<char16_t>
 186:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 187:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 188:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 189:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 190:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 191:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 192:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<char32_t>
 193:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 194:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 195:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 196:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 197:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 198:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 199:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 200:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<short>
 201:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 202:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 203:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 204:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 205:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 206:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 207:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<unsigned short>
 208:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 209:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 211:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 212:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 214:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<int>
 215:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 216:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 217:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 218:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 219:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 220:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 221:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<unsigned int>
 222:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 223:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 224:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 225:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 226:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 227:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 228:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<long>
 229:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 230:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 231:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 232:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 233:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 234:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 235:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<unsigned long>
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 237:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 239:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 240:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 172


 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<long long>
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 247:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 249:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<unsigned long long>
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 251:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 252:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 253:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 254:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 255:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #define __INT_N(TYPE) 			\
 256:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   __extension__				\
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>				\
 258:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<TYPE>		\
 259:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {					\
 260:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };		\
 261:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;	\
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };					\
 263:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   __extension__				\
 264:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>				\
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_integer<unsigned TYPE>	\
 266:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {					\
 267:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };		\
 268:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;	\
 269:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 270:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 271:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_0
 272:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_0)
 273:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 274:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_1
 275:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_1)
 276:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 277:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_2
 278:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_2)
 279:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 280:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __GLIBCXX_TYPE_INT_N_3
 281:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** __INT_N(__GLIBCXX_TYPE_INT_N_3)
 282:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 283:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 284:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #undef __INT_N
 285:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 286:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 287:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Floating point types
 288:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 289:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 290:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating
 291:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 292:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 293:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
 294:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 295:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 296:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // three specializations (float, double and 'long double')
 297:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 298:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<float>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 173


 299:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 300:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 301:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 302:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 303:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 304:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 305:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<double>
 306:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 307:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 308:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 309:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 310:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 311:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<long double>
 313:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 314:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 315:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 316:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 317:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 318:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __STDCPP_FLOAT16_T__
 319:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 320:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<_Float16>
 321:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 322:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 323:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 324:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 325:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 326:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 327:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __STDCPP_FLOAT32_T__
 328:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 329:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<_Float32>
 330:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 331:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 332:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 333:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 334:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 335:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 336:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __STDCPP_FLOAT64_T__
 337:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 338:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<_Float64>
 339:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 340:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 341:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 342:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 343:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 344:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 345:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __STDCPP_FLOAT128_T__
 346:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 347:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<_Float128>
 348:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 349:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 350:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 351:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 352:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 353:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 354:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __STDCPP_BFLOAT16_T__
 355:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 174


 356:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_floating<__gnu_cxx::__bfloat16_t>
 357:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 358:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 359:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 360:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 361:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 362:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 363:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 364:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Pointer types
 365:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 367:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_pointer
 368:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 369:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 370:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
 371:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 372:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 374:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_pointer<_Tp*>
 375:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 376:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 377:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 378:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 379:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 380:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 381:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // An arithmetic type is an integer type or a floating point type
 382:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 384:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_arithmetic
 385:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { };
 387:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 388:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 389:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // A scalar type is an arithmetic type or a pointer type
 390:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // 
 391:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 392:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_scalar
 393:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
 394:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { };
 395:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 396:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // For use in std::copy and std::find overloads for streambuf iterators.
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 399:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 400:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_char
 401:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 402:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 403:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
 404:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 405:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 406:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 407:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_char<char>
 408:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 409:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 410:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 411:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 412:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 175


 413:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef __WCHAR_TYPE__
 414:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 415:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_char<wchar_t>
 416:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 417:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 418:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 419:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 420:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 421:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 422:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 423:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_byte
 424:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 425:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 426:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
 427:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 428:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 429:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 430:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_byte<char>
 431:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 432:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 434:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_byte<signed char>
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 439:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 440:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 441:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 443:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 444:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_byte<unsigned char>
 445:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 446:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 447:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 448:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 449:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 450:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #if __cplusplus >= 201703L
 451:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   enum class byte : unsigned char;
 452:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 453:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 454:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_byte<byte>
 455:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 456:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 457:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 458:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 459:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif // C++17
 460:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 461:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #ifdef _GLIBCXX_USE_CHAR8_T
 462:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 463:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_byte<char8_t>
 464:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 465:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 1 };
 466:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __true_type __type;
 467:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 468:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 469:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 176


 470:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename> struct iterator_traits;
 471:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 472:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // A type that is safe for use with memcpy, memmove, memcmp etc.
 473:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 474:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_nonvolatile_trivially_copyable
 475:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 476:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = __is_trivially_copyable(_Tp) };
 477:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 478:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 479:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Cannot use memcpy/memmove/memcmp on volatile types even if they are
 480:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // trivially copyable, so ensure __memcpyable<volatile int*, volatile int*>
 481:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // and similar will be false.
 482:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 483:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_nonvolatile_trivially_copyable<volatile _Tp>
 484:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 485:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 486:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 487:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 488:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Whether two iterator types can be used with memcpy/memmove.
 489:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _OutputIter, typename _InputIter>
 490:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __memcpyable
 491:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 492:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 493:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 494:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 495:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 496:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __memcpyable<_Tp*, _Tp*>
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     : __is_nonvolatile_trivially_copyable<_Tp>
 498:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { };
 499:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 500:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 501:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __memcpyable<_Tp*, const _Tp*>
 502:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     : __is_nonvolatile_trivially_copyable<_Tp>
 503:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { };
 504:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 505:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Whether two iterator types can be used with memcmp.
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // This trait only says it's well-formed to use memcmp, not that it
 507:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // gives the right answer for a given algorithm. So for example, std::equal
 508:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // needs to add additional checks that the types are integers or pointers,
 509:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // because other trivially copyable types can overload operator==.
 510:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Iter1, typename _Iter2>
 511:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __memcmpable
 512:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 513:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 514:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // OK to use memcmp with pointers to trivially copyable types.
 517:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 518:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __memcmpable<_Tp*, _Tp*>
 519:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     : __is_nonvolatile_trivially_copyable<_Tp>
 520:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { };
 521:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 522:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 523:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __memcmpable<const _Tp*, _Tp*>
 524:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     : __is_nonvolatile_trivially_copyable<_Tp>
 525:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { };
 526:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 177


 527:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __memcmpable<_Tp*, const _Tp*>
 529:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     : __is_nonvolatile_trivially_copyable<_Tp>
 530:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { };
 531:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Whether memcmp can be used to determine ordering for a type
 533:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // e.g. in std::lexicographical_compare or three-way comparisons.
 534:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // True for unsigned integer-like types where comparing each byte in turn
 535:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // as an unsigned char yields the right result. This is true for all
 536:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // unsigned integers on big endian targets, but only unsigned narrow
 537:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // character types (and std::byte) on little endian targets.
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp, bool _TreatAsBytes =
 539:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 540:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 	__is_integer<_Tp>::__value
 541:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #else
 542:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 	__is_byte<_Tp>::__value
 543:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 544:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     >
 545:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered
 546:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 547:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       static const bool __value = _Tp(-1) > _Tp(1); // is unsigned
 548:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 549:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 550:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 551:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered<_Tp, false>
 552:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 553:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       static const bool __value = false;
 554:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 555:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 556:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Whether two types can be compared using memcmp.
 557:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp, typename _Up, bool = sizeof(_Tp) == sizeof(_Up)>
 558:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered_with
 559:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 560:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       static const bool __value = __is_memcmp_ordered<_Tp>::__value
 561:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 	&& __is_memcmp_ordered<_Up>::__value;
 562:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 563:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 564:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp, typename _Up>
 565:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered_with<_Tp, _Up, false>
 566:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 567:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       static const bool __value = false;
 568:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 569:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 570:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #if __cplusplus >= 201703L
 571:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #if __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__
 572:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // std::byte is not an integer, but it can be compared using memcmp.
 573:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 574:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered<std::byte, false>
 575:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { static constexpr bool __value = true; };
 576:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 577:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 578:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // std::byte can only be compared to itself, not to other types.
 579:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<>
 580:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered_with<std::byte, std::byte, true>
 581:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { static constexpr bool __value = true; };
 582:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 583:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp, bool _SameSize>
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 178


 584:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered_with<_Tp, std::byte, _SameSize>
 585:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { static constexpr bool __value = false; };
 586:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 587:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Up, bool _SameSize>
 588:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_memcmp_ordered_with<std::byte, _Up, _SameSize>
 589:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     { static constexpr bool __value = false; };
 590:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** #endif
 591:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 592:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 593:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Move iterator type
 594:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   //
 595:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Tp>
 596:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     struct __is_move_iterator
 597:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     {
 598:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       enum { __value = 0 };
 599:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****       typedef __false_type __type;
 600:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     };
 601:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h **** 
 602:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // Fallback implementation of the function in bits/stl_iterator.h used to
 603:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   // remove the move_iterator wrapper.
 604:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****   template<typename _Iterator>
 605:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     _GLIBCXX20_CONSTEXPR
 606:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     inline _Iterator
 607:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\cpp_type_traits.h ****     __miter_base(_Iterator __it)
 2088              		.loc 12 607 5 is_stmt 1 view .LVU412
 2089              	.LBE652:
 2090              	.LBB653:
 2091              	.LBI653:
 2092              		.loc 12 607 5 view .LVU413
 2093              	.LBE653:
 625:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 626:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       // concept requirements
 627:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 628:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 629:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    typename iterator_traits<_II>::reference>)
 630:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       __glibcxx_requires_can_increment_range(__first, __last, __result);
 631:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 
 632:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****       return std::__copy_move_a<__is_move_iterator<_II>::__value>
 633:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 2094              		.loc 8 633 7 is_stmt 0 discriminator 2 view .LVU414
 2095 0002 FFF7FEFF 		bl	_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IP
 2096              	.LVL186:
 634:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2097              		.loc 8 634 5 view .LVU415
 2098 0006 08BD     		pop	{r3, pc}
 2099              		.cfi_endproc
 2100              	.LFE1336:
 2101              		.cantunwind
 2102              		.fnend
 2104              		.section	.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEP
 2105              		.align	1
 2106              		.weak	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEPT0_PT_S7_
 2107              		.syntax unified
 2108              		.thumb
 2109              		.thumb_func
 2111              	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEPT0_PT_S7_S5_:
 2112              		.fnstart
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 179


 2113              	.LVL187:
 2114              	.LFB1398:
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 2115              		.loc 8 433 2 is_stmt 1 view -0
 2116              		.cfi_startproc
 2117              		@ args = 0, pretend = 0, frame = 0
 2118              		@ frame_needed = 0, uses_anonymous_args = 0
 433:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{
 2119              		.loc 8 433 2 is_stmt 0 view .LVU417
 2120 0000 38B5     		push	{r3, r4, r5, lr}
 2121              	.LCFI29:
 2122              		.cfi_def_cfa_offset 16
 2123              		.cfi_offset 3, -16
 2124              		.cfi_offset 4, -12
 2125              		.cfi_offset 5, -8
 2126              		.cfi_offset 14, -4
 2127 0002 1546     		mov	r5, r2
 435:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  if (__builtin_expect(_Num > 1, true))
 2128              		.loc 8 435 34 view .LVU418
 2129 0004 0C1A     		subs	r4, r1, r0
 2130              	.LVL188:
 436:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 2131              		.loc 8 436 4 discriminator 1 view .LVU419
 2132 0006 302C     		cmp	r4, #48
 2133 0008 06DD     		ble	.L97
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  else if (_Num == 1)
 2134              		.loc 8 437 23 view .LVU420
 2135 000a 2246     		mov	r2, r4
 2136              	.LVL189:
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  else if (_Num == 1)
 2137              		.loc 8 437 23 view .LVU421
 2138 000c 0146     		mov	r1, r0
 2139              	.LVL190:
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  else if (_Num == 1)
 2140              		.loc 8 437 23 view .LVU422
 2141 000e 2846     		mov	r0, r5
 2142              	.LVL191:
 437:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	  else if (_Num == 1)
 2143              		.loc 8 437 23 view .LVU423
 2144 0010 FFF7FEFF 		bl	memmove
 2145              	.LVL192:
 2146              	.L98:
 442:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 2147              		.loc 8 442 2 view .LVU424
 2148 0014 2819     		adds	r0, r5, r4
 2149 0016 38BD     		pop	{r3, r4, r5, pc}
 2150              	.LVL193:
 2151              	.L97:
 438:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
 2152              		.loc 8 438 9 view .LVU425
 2153 0018 302C     		cmp	r4, #48
 2154 001a FBD1     		bne	.L98
 2155              	.LVL194:
 2156              	.LBB654:
 2157              	.LBI654:
 397:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h **** 	{ *__to = *__from; }
 2158              		.loc 8 397 2 is_stmt 1 view .LVU426
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 180


 2159              	.LBB655:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 2160              		.loc 8 398 4 is_stmt 0 view .LVU427
 2161 001c 9646     		mov	lr, r2
 2162 001e 8446     		mov	ip, r0
 2163 0020 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 2164              	.LVL195:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 2165              		.loc 8 398 4 view .LVU428
 2166 0024 AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 2167              	.LVL196:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 2168              		.loc 8 398 4 view .LVU429
 2169 0028 BCE80F00 		ldmia	ip!, {r0, r1, r2, r3}
 2170              	.LVL197:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 2171              		.loc 8 398 4 view .LVU430
 2172 002c AEE80F00 		stmia	lr!, {r0, r1, r2, r3}
 2173 0030 9CE80F00 		ldm	ip, {r0, r1, r2, r3}
 2174 0034 8EE80F00 		stm	lr, {r0, r1, r2, r3}
 2175              	.LVL198:
 398:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     };
 2176              		.loc 8 398 21 view .LVU431
 2177 0038 ECE7     		b	.L98
 2178              	.LBE655:
 2179              	.LBE654:
 2180              		.cfi_endproc
 2181              	.LFE1398:
 2182              		.cantunwind
 2183              		.fnend
 2185              		.section	.text._ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_,"axG",%progbits,_ZNSt6vectorI8PathStepSaIS0_
 2186              		.align	1
 2187              		.weak	_ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_
 2188              		.syntax unified
 2189              		.thumb
 2190              		.thumb_func
 2192              	_ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_:
 2193              		.fnstart
 2194              	.LVL199:
 2195              	.LFB1301:
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 2196              		.loc 10 210 5 is_stmt 1 view -0
 2197              		.cfi_startproc
 2198              		@ args = 0, pretend = 0, frame = 0
 2199              		@ frame_needed = 0, uses_anonymous_args = 0
 210:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 2200              		.loc 10 210 5 is_stmt 0 view .LVU433
 2201 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2202              		.save {r3, r4, r5, r6, r7, lr}
 2203              	.LCFI30:
 2204              		.cfi_def_cfa_offset 24
 2205              		.cfi_offset 3, -24
 2206              		.cfi_offset 4, -20
 2207              		.cfi_offset 5, -16
 2208              		.cfi_offset 6, -12
 2209              		.cfi_offset 7, -8
 2210              		.cfi_offset 14, -4
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 181


 2211 0002 0446     		mov	r4, r0
 2212              	.LBB656:
 213:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	{
 2213              		.loc 10 213 7 view .LVU434
 2214 0004 8142     		cmp	r1, r0
 2215 0006 17D0     		beq	.L101
 2216 0008 0D46     		mov	r5, r1
 2217              	.LVL200:
 2218              	.LBB657:
 2219              	.LBB658:
 2220              	.LBI658:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2221              		.loc 2 989 7 is_stmt 1 view .LVU435
 2222              	.LBB659:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2223              		.loc 2 990 40 is_stmt 0 view .LVU436
 2224 000a 4B68     		ldr	r3, [r1, #4]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2225              		.loc 2 990 66 view .LVU437
 2226 000c 0868     		ldr	r0, [r1]
 2227              	.LVL201:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2228              		.loc 2 990 50 view .LVU438
 2229 000e 1E1A     		subs	r6, r3, r0
 2230 0010 3211     		asrs	r2, r6, #4
 2231 0012 1A49     		ldr	r1, .L108
 2232              	.LVL202:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2233              		.loc 2 990 50 view .LVU439
 2234 0014 02FB01F1 		mul	r1, r2, r1
 2235              	.LVL203:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2236              		.loc 2 990 50 view .LVU440
 2237              	.LBE659:
 2238              	.LBE658:
 2239              	.LBB660:
 2240              	.LBB661:
 2241              	.LBI661:
1075:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 2242              		.loc 2 1075 7 is_stmt 1 view .LVU441
 2243              	.LBB662:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2244              		.loc 2 1077 21 is_stmt 0 view .LVU442
 2245 0018 2268     		ldr	r2, [r4]
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2246              		.loc 2 1077 5 view .LVU443
 2247 001a A768     		ldr	r7, [r4, #8]
 2248 001c A7EB020C 		sub	ip, r7, r2
 2249              	.LVL204:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2250              		.loc 2 1077 5 view .LVU444
 2251              	.LBE662:
 2252              	.LBE661:
 236:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 2253              		.loc 10 236 4 discriminator 1 view .LVU445
 2254 0020 6645     		cmp	r6, ip
 2255 0022 0BD8     		bhi	.L107
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 182


 2256              	.LVL205:
 2257              	.LBB663:
 2258              	.LBI663:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2259              		.loc 2 989 7 is_stmt 1 view .LVU446
 2260              	.LBB664:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2261              		.loc 2 990 40 is_stmt 0 view .LVU447
 2262 0024 6168     		ldr	r1, [r4, #4]
 2263              	.LVL206:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2264              		.loc 2 990 50 view .LVU448
 2265 0026 891A     		subs	r1, r1, r2
 2266              	.LVL207:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2267              		.loc 2 990 50 view .LVU449
 2268              	.LBE664:
 2269              	.LBE663:
 248:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    {
 2270              		.loc 10 248 9 discriminator 1 view .LVU450
 2271 0028 8E42     		cmp	r6, r1
 2272 002a 1BD8     		bhi	.L105
 2273              	.LVL208:
 2274              	.LBB665:
 2275              	.LBI665:
 880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 2276              		.loc 2 880 7 is_stmt 1 view .LVU451
 2277              	.LBB666:
 2278              	.LBB667:
 2279              	.LBI667:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2280              		.loc 3 1076 7 view .LVU452
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2281              		.loc 3 1076 7 is_stmt 0 view .LVU453
 2282              	.LBE667:
 2283              	.LBE666:
 2284              	.LBE665:
 2285              	.LBB668:
 2286              	.LBI668:
 900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 2287              		.loc 2 900 7 is_stmt 1 view .LVU454
 2288              	.LBB669:
 2289              	.LBB670:
 2290              	.LBI670:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2291              		.loc 3 1076 7 view .LVU455
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2292              		.loc 3 1076 7 is_stmt 0 view .LVU456
 2293              	.LBE670:
 2294              	.LBE669:
 2295              	.LBE668:
 2296              	.LBB671:
 2297              	.LBI671:
 870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2298              		.loc 2 870 7 is_stmt 1 view .LVU457
 2299              	.LBB672:
 2300              	.LBB673:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 183


 2301              	.LBI673:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2302              		.loc 3 1076 7 view .LVU458
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2303              		.loc 3 1076 7 is_stmt 0 view .LVU459
 2304              	.LBE673:
 2305              	.LBE672:
 2306              	.LBE671:
 250:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    end(), _M_get_Tp_allocator());
 2307              		.loc 10 250 21 discriminator 3 view .LVU460
 2308 002c 1946     		mov	r1, r3
 2309 002e FFF7FEFF 		bl	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_
 2310              	.LVL209:
 2311              	.LBB674:
 2312              	.LBI674:
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 2313              		.loc 2 890 7 is_stmt 1 view .LVU461
 2314              	.LBB675:
 2315              	.LBB676:
 2316              	.LBI676:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2317              		.loc 3 1076 7 view .LVU462
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2318              		.loc 3 1076 7 is_stmt 0 view .LVU463
 2319              	.LBE676:
 2320              	.LBE675:
 2321              	.LBE674:
 2322              	.LBB677:
 2323              	.LBI677:
 2324              		.loc 6 944 5 is_stmt 1 view .LVU464
 2325              	.LBB678:
 2326              	.LBB679:
 2327              	.LBI679:
 182:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     {
 2328              		.loc 7 182 5 view .LVU465
 2329              	.LBB680:
 2330              	.LBB681:
 2331              	.LBI681:
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     };
 2332              		.loc 7 172 9 view .LVU466
 2333              	.L104:
 172:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_construct.h ****     };
 2334              		.loc 7 172 9 is_stmt 0 view .LVU467
 2335              	.LBE681:
 2336              	.LBE680:
 2337              	.LBE679:
 2338              	.LBE678:
 2339              	.LBE677:
 2340              	.LBE660:
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 2341              		.loc 10 262 44 view .LVU468
 2342 0032 2368     		ldr	r3, [r4]
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 2343              		.loc 10 262 53 view .LVU469
 2344 0034 3344     		add	r3, r3, r6
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 2345              		.loc 10 262 28 view .LVU470
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 184


 2346 0036 6360     		str	r3, [r4, #4]
 2347              	.LVL210:
 2348              	.L101:
 262:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	}
 2349              		.loc 10 262 28 view .LVU471
 2350              	.LBE657:
 2351              	.LBE656:
 265:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 
 2352              		.loc 10 265 5 view .LVU472
 2353 0038 2046     		mov	r0, r4
 2354 003a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2355              	.LVL211:
 2356              	.L107:
 2357              	.LBB708:
 2358              	.LBB707:
 2359              	.LBB706:
 2360              	.LBB682:
 2361              	.LBB683:
 2362              	.LBI683:
 880:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 2363              		.loc 2 880 7 is_stmt 1 view .LVU473
 2364              	.LBB684:
 2365              	.LBB685:
 2366              	.LBI685:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2367              		.loc 3 1076 7 view .LVU474
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2368              		.loc 3 1076 7 is_stmt 0 view .LVU475
 2369              	.LBE685:
 2370              	.LBE684:
 2371              	.LBE683:
 2372              	.LBB686:
 2373              	.LBI686:
 900:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 2374              		.loc 2 900 7 is_stmt 1 view .LVU476
 2375              	.LBB687:
 2376              	.LBB688:
 2377              	.LBI688:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2378              		.loc 3 1076 7 view .LVU477
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2379              		.loc 3 1076 7 is_stmt 0 view .LVU478
 2380              	.LBE688:
 2381              	.LBE687:
 2382              	.LBE686:
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 						   __x.end());
 2383              		.loc 10 238 44 discriminator 2 view .LVU479
 2384 003c 0246     		mov	r2, r0
 2385 003e 2046     		mov	r0, r4
 2386 0040 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEE
 2387              	.LVL212:
 238:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 						   __x.end());
 2388              		.loc 10 238 44 discriminator 2 view .LVU480
 2389 0044 0546     		mov	r5, r0
 2390              	.LVL213:
 242:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    this->_M_impl._M_end_of_storage
 2391              		.loc 10 242 21 view .LVU481
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 185


 2392 0046 2168     		ldr	r1, [r4]
 243:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 			    - this->_M_impl._M_start);
 2393              		.loc 10 243 22 view .LVU482
 2394 0048 A368     		ldr	r3, [r4, #8]
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 2395              		.loc 10 244 8 view .LVU483
 2396 004a 5B1A     		subs	r3, r3, r1
 2397 004c 1B11     		asrs	r3, r3, #4
 2398 004e 0B4A     		ldr	r2, .L108
 2399              	.LVL214:
 244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 2400              		.loc 10 244 8 view .LVU484
 2401 0050 03FB02F2 		mul	r2, r3, r2
 2402              	.LVL215:
 2403              	.LBB689:
 2404              	.LBI689:
 383:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       {
 2405              		.loc 2 383 7 is_stmt 1 view .LVU485
 2406              	.LBB690:
 386:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	  _Tr::deallocate(_M_impl, __p, __n);
 2407              		.loc 2 386 2 is_stmt 0 view .LVU486
 2408 0054 11B1     		cbz	r1, .L103
 2409              	.LVL216:
 2410              	.LBB691:
 2411              	.LBI691:
 515:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h ****       { __a.deallocate(__p, __n); }
 2412              		.loc 6 515 7 is_stmt 1 view .LVU487
 2413              	.LBB692:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 2414              		.loc 6 516 23 is_stmt 0 view .LVU488
 2415 0056 2046     		mov	r0, r4
 2416              	.LVL217:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 2417              		.loc 6 516 23 view .LVU489
 2418 0058 FFF7FEFF 		bl	_ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j
 2419              	.LVL218:
 2420              	.L103:
 516:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\alloc_traits.h **** 
 2421              		.loc 6 516 23 view .LVU490
 2422              	.LBE692:
 2423              	.LBE691:
 2424              	.LBE690:
 2425              	.LBE689:
 245:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 2426              		.loc 10 245 31 view .LVU491
 2427 005c 2560     		str	r5, [r4]
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 2428              		.loc 10 246 65 view .LVU492
 2429 005e 3544     		add	r5, r5, r6
 2430              	.LVL219:
 246:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 	    }
 2431              		.loc 10 246 40 view .LVU493
 2432 0060 A560     		str	r5, [r4, #8]
 2433              	.LBE682:
 2434 0062 E6E7     		b	.L104
 2435              	.LVL220:
 2436              	.L105:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 186


 2437              	.LBB693:
 2438              	.LBI693:
 624:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 2439              		.loc 8 624 5 is_stmt 1 view .LVU494
 2440              	.LBB694:
 2441              	.LBI694:
 538:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 2442              		.loc 8 538 5 view .LVU495
 2443              	.LBB695:
 2444              	.LBI695:
 532:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 2445              		.loc 8 532 5 view .LVU496
 2446              	.LBB696:
 2447              	.LBI696:
 497:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     {
 2448              		.loc 8 497 5 view .LVU497
 2449              	.LBB697:
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2450              		.loc 8 506 30 is_stmt 0 view .LVU498
 2451 0064 0144     		add	r1, r1, r0
 2452              	.LVL221:
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2453              		.loc 8 506 30 view .LVU499
 2454 0066 FFF7FEFF 		bl	_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEPT0_PT_S7_S5_
 2455              	.LVL222:
 506:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_algobase.h ****     }
 2456              		.loc 8 506 30 view .LVU500
 2457              	.LBE697:
 2458              	.LBE696:
 2459              	.LBE695:
 2460              	.LBE694:
 2461              	.LBE693:
 257:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\vector.tcc **** 					  __x._M_impl._M_finish,
 2462              		.loc 10 257 48 view .LVU501
 2463 006a 2868     		ldr	r0, [r5]
 2464              	.LVL223:
 2465              	.LBB698:
 2466              	.LBI698:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2467              		.loc 2 989 7 is_stmt 1 view .LVU502
 2468              	.LBB699:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2469              		.loc 2 990 40 is_stmt 0 view .LVU503
 2470 006c 6268     		ldr	r2, [r4, #4]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2471              		.loc 2 990 66 view .LVU504
 2472 006e 2368     		ldr	r3, [r4]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2473              		.loc 2 990 50 view .LVU505
 2474 0070 D31A     		subs	r3, r2, r3
 2475              	.LVL224:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2476              		.loc 2 990 50 view .LVU506
 2477              	.LBE699:
 2478              	.LBE698:
 2479              	.LBB700:
 2480              	.LBI700:
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 187


 366:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 2481              		.loc 5 366 5 is_stmt 1 view .LVU507
 2482              	.LBB701:
 2483              	.LBB702:
 2484              	.LBI702:
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		       _ForwardIterator __result)
 2485              		.loc 5 163 5 view .LVU508
 2486              	.LBB703:
 2487              	.LBB704:
 2488              	.LBI704:
 135:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h **** 		      _ForwardIterator __result)
 2489              		.loc 5 135 9 view .LVU509
 2490              	.LBB705:
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 2491              		.loc 5 137 32 is_stmt 0 view .LVU510
 2492 0072 6968     		ldr	r1, [r5, #4]
 2493 0074 1844     		add	r0, r0, r3
 2494              	.LVL225:
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 2495              		.loc 5 137 32 view .LVU511
 2496 0076 FFF7FEFF 		bl	_ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_
 2497              	.LVL226:
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     };
 2498              		.loc 5 137 32 view .LVU512
 2499              	.LBE705:
 2500              	.LBE704:
 2501              	.LBE703:
 2502              	.LBE702:
 373:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_uninitialized.h ****     }
 2503              		.loc 5 373 63 view .LVU513
 2504 007a DAE7     		b	.L104
 2505              	.L109:
 2506              		.align	2
 2507              	.L108:
 2508 007c ABAAAAAA 		.word	-1431655765
 2509              	.LBE701:
 2510              	.LBE700:
 2511              	.LBE706:
 2512              	.LBE707:
 2513              	.LBE708:
 2514              		.cfi_endproc
 2515              	.LFE1301:
 2516              		.fnend
 2518              		.section	.text._ZN4Path21mergeStraightSegmentsEv,"ax",%progbits
 2519              		.align	1
 2520              		.global	_ZN4Path21mergeStraightSegmentsEv
 2521              		.syntax unified
 2522              		.thumb
 2523              		.thumb_func
 2525              	_ZN4Path21mergeStraightSegmentsEv:
 2526              		.fnstart
 2527              	.LVL227:
 2528              	.LFB1270:
  37:Core/RobotController/Src/Path.cpp ****     if (m_steps.size() < 2) return;
 2529              		.loc 1 37 36 is_stmt 1 view -0
 2530              		.cfi_startproc
 2531              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 188


 2532              		@ frame_needed = 0, uses_anonymous_args = 0
  38:Core/RobotController/Src/Path.cpp **** 
 2533              		.loc 1 38 5 view .LVU515
 2534              	.LBB709:
 2535              	.LBI709:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2536              		.loc 2 989 7 view .LVU516
 2537              	.LBB710:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2538              		.loc 2 990 40 is_stmt 0 view .LVU517
 2539 0000 4368     		ldr	r3, [r0, #4]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2540              		.loc 2 990 66 view .LVU518
 2541 0002 0268     		ldr	r2, [r0]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2542              		.loc 2 990 50 view .LVU519
 2543 0004 9B1A     		subs	r3, r3, r2
 2544              	.LVL228:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2545              		.loc 2 990 50 view .LVU520
 2546              	.LBE710:
 2547              	.LBE709:
  38:Core/RobotController/Src/Path.cpp **** 
 2548              		.loc 1 38 5 discriminator 1 view .LVU521
 2549 0006 302B     		cmp	r3, #48
 2550 0008 00D8     		bhi	.L123
 2551 000a 7047     		bx	lr
 2552              	.L123:
  37:Core/RobotController/Src/Path.cpp ****     if (m_steps.size() < 2) return;
 2553              		.loc 1 37 36 view .LVU522
 2554 000c 70B5     		push	{r4, r5, r6, lr}
 2555              		.save {r4, r5, r6, lr}
 2556              	.LCFI31:
 2557              		.cfi_def_cfa_offset 16
 2558              		.cfi_offset 4, -16
 2559              		.cfi_offset 5, -12
 2560              		.cfi_offset 6, -8
 2561              		.cfi_offset 14, -4
 2562              		.pad #16
 2563 000e 84B0     		sub	sp, sp, #16
 2564              	.LCFI32:
 2565              		.cfi_def_cfa_offset 32
 2566 0010 0546     		mov	r5, r0
  40:Core/RobotController/Src/Path.cpp ****     merged.reserve(m_steps.size());
 2567              		.loc 1 40 5 is_stmt 1 view .LVU523
 2568              	.LVL229:
 2569              	.LBB711:
 2570              	.LBI711:
 528:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 2571              		.loc 2 528 7 view .LVU524
 2572              	.LBB712:
 2573              	.LBI712:
 312:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** #else
 2574              		.loc 2 312 7 view .LVU525
 2575              	.LBB713:
 2576              	.LBI713:
 137:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 189


 2577              		.loc 2 137 2 view .LVU526
 2578              	.LBB714:
 2579              	.LBB715:
 2580              	.LBI715:
 163:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\allocator.h **** 
 2581              		.loc 9 163 7 view .LVU527
 2582              	.LBB716:
 2583              	.LBI716:
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 2584              		.loc 4 88 7 view .LVU528
  88:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\new_allocator.h **** 
 2585              		.loc 4 88 7 is_stmt 0 view .LVU529
 2586              	.LBE716:
 2587              	.LBE715:
 2588              	.LBB717:
 2589              	.LBI717:
  99:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	: _M_start(), _M_finish(), _M_end_of_storage()
 2590              		.loc 2 99 2 is_stmt 1 view .LVU530
 2591              	.LBB718:
 2592              	.LBB719:
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 2593              		.loc 2 100 4 is_stmt 0 view .LVU531
 2594 0012 0023     		movs	r3, #0
 2595 0014 0193     		str	r3, [sp, #4]
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 2596              		.loc 2 100 16 view .LVU532
 2597 0016 0293     		str	r3, [sp, #8]
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 2598              		.loc 2 100 29 view .LVU533
 2599 0018 0393     		str	r3, [sp, #12]
 2600              	.LVL230:
 100:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 	{ }
 2601              		.loc 2 100 29 view .LVU534
 2602              	.LBE719:
 2603              	.LBE718:
 2604              	.LBE717:
 2605              	.LBE714:
 2606              	.LBE713:
 2607              	.LBE712:
 2608              	.LBE711:
  41:Core/RobotController/Src/Path.cpp **** 
 2609              		.loc 1 41 5 is_stmt 1 view .LVU535
 2610              	.LBB720:
 2611              	.LBI720:
 989:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 2612              		.loc 2 989 7 view .LVU536
 2613              	.LBB721:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2614              		.loc 2 990 40 is_stmt 0 view .LVU537
 2615 001a 4168     		ldr	r1, [r0, #4]
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2616              		.loc 2 990 50 view .LVU538
 2617 001c 891A     		subs	r1, r1, r2
 2618 001e 0911     		asrs	r1, r1, #4
 2619              	.LVL231:
 990:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h **** 
 2620              		.loc 2 990 50 view .LVU539
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 190


 2621              	.LBE721:
 2622              	.LBE720:
  41:Core/RobotController/Src/Path.cpp **** 
 2623              		.loc 1 41 19 discriminator 1 view .LVU540
 2624 0020 1B4B     		ldr	r3, .L125
 2625 0022 03FB01F1 		mul	r1, r3, r1
 2626 0026 01A8     		add	r0, sp, #4
 2627              	.LVL232:
 2628              	.LEHB0:
  41:Core/RobotController/Src/Path.cpp **** 
 2629              		.loc 1 41 19 discriminator 1 view .LVU541
 2630 0028 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE7reserveEj
 2631              	.LVL233:
  43:Core/RobotController/Src/Path.cpp ****         if (!merged.empty() &&
 2632              		.loc 1 43 5 is_stmt 1 view .LVU542
 2633              	.LBB722:
 2634              	.LBB723:
 2635              	.LBI723:
 870:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2636              		.loc 2 870 7 view .LVU543
 2637              	.LBB724:
 2638              	.LBB725:
 2639              	.LBI725:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2640              		.loc 3 1076 7 view .LVU544
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2641              		.loc 3 1076 7 is_stmt 0 view .LVU545
 2642              	.LBE725:
 2643              	.LBE724:
 2644              	.LBE723:
  43:Core/RobotController/Src/Path.cpp ****         if (!merged.empty() &&
 2645              		.loc 1 43 24 view .LVU546
 2646 002c 2B68     		ldr	r3, [r5]
 2647              	.LVL234:
 2648              	.LBB726:
 2649              	.LBI726:
 890:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 2650              		.loc 2 890 7 is_stmt 1 view .LVU547
 2651              	.LBB727:
 2652              	.LBB728:
 2653              	.LBI728:
1076:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       : _M_current(__i) { }
 2654              		.loc 3 1076 7 view .LVU548
 2655              	.LBB729:
 2656              	.LBB730:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 2657              		.loc 3 1077 9 is_stmt 0 view .LVU549
 2658 002e 6E68     		ldr	r6, [r5, #4]
 2659              	.LVL235:
1077:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 2660              		.loc 3 1077 9 view .LVU550
 2661              	.LBE730:
 2662              	.LBE729:
 2663              	.LBE728:
 2664              	.LBE727:
 2665              	.LBE726:
  43:Core/RobotController/Src/Path.cpp ****         if (!merged.empty() &&
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 191


 2666              		.loc 1 43 5 view .LVU551
 2667 0030 05E0     		b	.L113
 2668              	.L114:
  53:Core/RobotController/Src/Path.cpp ****         }
 2669              		.loc 1 53 13 is_stmt 1 view .LVU552
  53:Core/RobotController/Src/Path.cpp ****         }
 2670              		.loc 1 53 29 is_stmt 0 view .LVU553
 2671 0032 2146     		mov	r1, r4
 2672 0034 01A8     		add	r0, sp, #4
 2673 0036 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_
 2674              	.LVL236:
 2675              	.L115:
  43:Core/RobotController/Src/Path.cpp ****         if (!merged.empty() &&
 2676              		.loc 1 43 5 is_stmt 1 discriminator 2 view .LVU554
 2677              	.LBB731:
 2678              	.LBI731:
1109:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h ****       {
 2679              		.loc 3 1109 7 view .LVU555
 2680              	.LBB732:
1111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 2681              		.loc 3 1111 2 is_stmt 0 view .LVU556
 2682 003a 04F13003 		add	r3, r4, #48
 2683              	.LVL237:
 2684              	.L113:
1111:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	return *this;
 2685              		.loc 3 1111 2 view .LVU557
 2686              	.LBE732:
 2687              	.LBE731:
  43:Core/RobotController/Src/Path.cpp ****         if (!merged.empty() &&
 2688              		.loc 1 43 24 is_stmt 1 discriminator 1 view .LVU558
 2689              	.LBB733:
 2690              	.LBI733:
1241:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 2691              		.loc 3 1241 5 view .LVU559
 2692              	.LBB734:
1244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 2693              		.loc 3 1244 27 is_stmt 0 discriminator 1 view .LVU560
 2694 003e 1C46     		mov	r4, r3
 2695              	.LVL238:
1244:C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits\stl_iterator.h **** 
 2696              		.loc 3 1244 27 discriminator 1 view .LVU561
 2697              	.LBE734:
 2698              	.LBE733:
  43:Core/RobotController/Src/Path.cpp ****         if (!merged.empty() &&
 2699              		.loc 1 43 24 discriminator 1 view .LVU562
 2700 0040 9E42     		cmp	r6, r3
 2701 0042 16D0     		beq	.L124
  44:Core/RobotController/Src/Path.cpp ****             merged.back().stepType == StepType::Straight &&
 2702              		.loc 1 44 9 is_stmt 1 view .LVU563
  44:Core/RobotController/Src/Path.cpp ****             merged.back().stepType == StepType::Straight &&
 2703              		.loc 1 44 26 is_stmt 0 view .LVU564
 2704 0044 01A8     		add	r0, sp, #4
 2705 0046 FFF7FEFF 		bl	_ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv
 2706              	.LVL239:
  45:Core/RobotController/Src/Path.cpp ****             step.stepType == StepType::Straight)
 2707              		.loc 1 45 58 view .LVU565
 2708 004a 0028     		cmp	r0, #0
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 192


 2709 004c F1D1     		bne	.L114
  45:Core/RobotController/Src/Path.cpp ****             step.stepType == StepType::Straight)
 2710              		.loc 1 45 24 discriminator 1 view .LVU566
 2711 004e 01A8     		add	r0, sp, #4
 2712 0050 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EE4backEv
 2713              	.LVL240:
  45:Core/RobotController/Src/Path.cpp ****             step.stepType == StepType::Straight)
 2714              		.loc 1 45 27 discriminator 1 view .LVU567
 2715 0054 0368     		ldr	r3, [r0]
  44:Core/RobotController/Src/Path.cpp ****             merged.back().stepType == StepType::Straight &&
 2716              		.loc 1 44 29 view .LVU568
 2717 0056 002B     		cmp	r3, #0
 2718 0058 EBD1     		bne	.L114
  46:Core/RobotController/Src/Path.cpp ****         {
 2719              		.loc 1 46 18 view .LVU569
 2720 005a 2368     		ldr	r3, [r4]
  45:Core/RobotController/Src/Path.cpp ****             step.stepType == StepType::Straight)
 2721              		.loc 1 45 58 discriminator 4 view .LVU570
 2722 005c 002B     		cmp	r3, #0
 2723 005e E8D1     		bne	.L114
  49:Core/RobotController/Src/Path.cpp ****         }
 2724              		.loc 1 49 13 is_stmt 1 view .LVU571
  49:Core/RobotController/Src/Path.cpp ****         }
 2725              		.loc 1 49 27 is_stmt 0 discriminator 1 view .LVU572
 2726 0060 D0ED017A 		vldr.32	s15, [r0, #4]
  49:Core/RobotController/Src/Path.cpp ****         }
 2727              		.loc 1 49 44 discriminator 1 view .LVU573
 2728 0064 94ED017A 		vldr.32	s14, [r4, #4]
  49:Core/RobotController/Src/Path.cpp ****         }
 2729              		.loc 1 49 36 discriminator 1 view .LVU574
 2730 0068 77EE877A 		vadd.f32	s15, s15, s14
 2731 006c C0ED017A 		vstr.32	s15, [r0, #4]
 2732 0070 E3E7     		b	.L115
 2733              	.LVL241:
 2734              	.L124:
  49:Core/RobotController/Src/Path.cpp ****         }
 2735              		.loc 1 49 36 discriminator 1 view .LVU575
 2736              	.LBE722:
  57:Core/RobotController/Src/Path.cpp **** }
 2737              		.loc 1 57 5 is_stmt 1 view .LVU576
  57:Core/RobotController/Src/Path.cpp **** }
 2738              		.loc 1 57 15 is_stmt 0 view .LVU577
 2739 0072 01A9     		add	r1, sp, #4
 2740 0074 2846     		mov	r0, r5
 2741 0076 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_
 2742              	.LVL242:
 2743              	.LEHE0:
  58:Core/RobotController/Src/Path.cpp **** 
 2744              		.loc 1 58 1 view .LVU578
 2745 007a 01A8     		add	r0, sp, #4
 2746 007c FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EED1Ev
 2747              	.LVL243:
 2748 0080 04B0     		add	sp, sp, #16
 2749              	.LCFI33:
 2750              		.cfi_remember_state
 2751              		.cfi_def_cfa_offset 16
 2752              		@ sp needed
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 193


 2753 0082 70BD     		pop	{r4, r5, r6, pc}
 2754              	.LVL244:
 2755              	.L118:
 2756              	.LCFI34:
 2757              		.cfi_restore_state
  58:Core/RobotController/Src/Path.cpp **** 
 2758              		.loc 1 58 1 view .LVU579
 2759 0084 01A8     		add	r0, sp, #4
 2760 0086 FFF7FEFF 		bl	_ZNSt6vectorI8PathStepSaIS0_EED1Ev
 2761              	.LVL245:
 2762              	.LEHB1:
 2763 008a FFF7FEFF 		bl	__cxa_end_cleanup
 2764              	.LVL246:
 2765              	.LEHE1:
 2766              	.L126:
 2767 008e 00BF     		.align	2
 2768              	.L125:
 2769 0090 ABAAAAAA 		.word	-1431655765
 2770              		.cfi_endproc
 2771              	.LFE1270:
 2772              		.global	__gxx_personality_v0
 2773              		.personality	__gxx_personality_v0
 2774              		.handlerdata
 2775              	.LLSDA1270:
 2776 0008 FF       		.byte	0xff
 2777 0009 FF       		.byte	0xff
 2778 000a 01       		.byte	0x1
 2779 000b 0A       		.uleb128 .LLSDACSE1270-.LLSDACSB1270
 2780              	.LLSDACSB1270:
 2781 000c 28       		.uleb128 .LEHB0-.LFB1270
 2782 000d 52       		.uleb128 .LEHE0-.LEHB0
 2783 000e 8401     		.uleb128 .L118-.LFB1270
 2784 0010 00       		.uleb128 0
 2785 0011 8A01     		.uleb128 .LEHB1-.LFB1270
 2786 0013 04       		.uleb128 .LEHE1-.LEHB1
 2787 0014 00       		.uleb128 0
 2788 0015 00       		.uleb128 0
 2789              	.LLSDACSE1270:
 2790              		.section	.text._ZN4Path21mergeStraightSegmentsEv
 2791              		.fnend
 2793              		.section	.text._ZN4Path12compressPathEv,"ax",%progbits
 2794              		.align	1
 2795              		.global	_ZN4Path12compressPathEv
 2796              		.syntax unified
 2797              		.thumb
 2798              		.thumb_func
 2800              	_ZN4Path12compressPathEv:
 2801              		.fnstart
 2802              	.LVL247:
 2803              	.LFB1269:
  29:Core/RobotController/Src/Path.cpp ****     // 1. ÈÄ£Á∂öÁõ¥ÈÄ≤„Çí„Éû„Éº„Ç∏ (‰æã: forward 1, forward 2 ‚Üí forward 3)
 2804              		.loc 1 29 27 is_stmt 1 view -0
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 0
 2807              		@ frame_needed = 0, uses_anonymous_args = 0
  29:Core/RobotController/Src/Path.cpp ****     // 1. ÈÄ£Á∂öÁõ¥ÈÄ≤„Çí„Éû„Éº„Ç∏ (‰æã: forward 1, forward 2 ‚Üí forward 3)
 2808              		.loc 1 29 27 is_stmt 0 view .LVU581
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 194


 2809 0000 08B5     		push	{r3, lr}
 2810              		.save {r3, lr}
 2811              	.LCFI35:
 2812              		.cfi_def_cfa_offset 8
 2813              		.cfi_offset 3, -8
 2814              		.cfi_offset 14, -4
  31:Core/RobotController/Src/Path.cpp **** 
 2815              		.loc 1 31 5 is_stmt 1 view .LVU582
  31:Core/RobotController/Src/Path.cpp **** 
 2816              		.loc 1 31 26 is_stmt 0 view .LVU583
 2817 0002 FFF7FEFF 		bl	_ZN4Path21mergeStraightSegmentsEv
 2818              	.LVL248:
  34:Core/RobotController/Src/Path.cpp **** }
 2819              		.loc 1 34 5 is_stmt 1 view .LVU584
  35:Core/RobotController/Src/Path.cpp **** 
 2820              		.loc 1 35 1 is_stmt 0 view .LVU585
 2821 0006 08BD     		pop	{r3, pc}
 2822              		.cfi_endproc
 2823              	.LFE1269:
 2824              		.fnend
 2826              		.text
 2827              	.Letext0:
 2828              		.file 13 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/type_traits"
 2829              		.file 14 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/arm-none-eabi/thumb/v7e-m+fp
 2830              		.file 15 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/stl_iterator_base_types
 2831              		.file 16 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/debug/debug.h"
 2832              		.file 17 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/cstddef"
 2833              		.file 18 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/cstdint"
 2834              		.file 19 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/initializer_list"
 2835              		.file 20 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/functexcept.h"
 2836              		.file 21 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/predefined_ops.h"
 2837              		.file 22 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/ext/alloc_traits.h"
 2838              		.file 23 "C:/Tools/arm-gnu-toolchain/lib/gcc/arm-none-eabi/13.2.1/include/stddef.h"
 2839              		.file 24 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/machine/_default_types.h"
 2840              		.file 25 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/sys/_stdint.h"
 2841              		.file 26 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/stdint.h"
 2842              		.file 27 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/new"
 2843              		.file 28 "C:/Tools/arm-gnu-toolchain/arm-none-eabi/include/c++/13.2.1/bits/memory_resource.h"
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 195


DEFINED SYMBOLS
                            *ABS*:00000000 Path.cpp
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:21     .text._ZN4Path13optimizeTurnsEv:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:27     .text._ZN4Path13optimizeTurnsEv:00000000 _ZN4Path13optimizeTurnsEv
.ARM.exidx.text._ZN4Path13optimizeTurnsEv:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:44     .text._ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:50     .text._ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv:00000000 _ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv
.ARM.exidx.text._ZNKSt6vectorI8PathStepSaIS0_EE5emptyEv:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:114    .text._ZNSt6vectorI8PathStepSaIS0_EE4backEv:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:120    .text._ZNSt6vectorI8PathStepSaIS0_EE4backEv:00000000 _ZNSt6vectorI8PathStepSaIS0_EE4backEv
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EE4backEv:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:167    .text._ZNSt15__new_allocatorI8PathStepED2Ev:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:173    .text._ZNSt15__new_allocatorI8PathStepED2Ev:00000000 _ZNSt15__new_allocatorI8PathStepED2Ev
.ARM.exidx.text._ZNSt15__new_allocatorI8PathStepED2Ev:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:173    .text._ZNSt15__new_allocatorI8PathStepED2Ev:00000000 _ZNSt15__new_allocatorI8PathStepED1Ev
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:193    .text._ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:199    .text._ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_:00000000 _ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:284    .text._ZSt8_DestroyIP8PathStepEvT_S2_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:290    .text._ZSt8_DestroyIP8PathStepEvT_S2_:00000000 _ZSt8_DestroyIP8PathStepEvT_S2_
.ARM.exidx.text._ZSt8_DestroyIP8PathStepEvT_S2_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:308    .text._ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:314    .text._ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc:00000000 _ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:452    .text._ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc:00000058 $d
.ARM.exidx.text._ZNKSt6vectorI8PathStepSaIS0_EE12_M_check_lenEjPKc:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:459    .text._ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:465    .text._ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j:00000000 _ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j
.ARM.exidx.text._ZNSt15__new_allocatorI8PathStepE10deallocateEPS0_j:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:498    .text._ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:504    .text._ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev:00000000 _ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:569    .text._ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev:0000001c $d
.ARM.exidx.text._ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:504    .text._ZNSt12_Vector_baseI8PathStepSaIS0_EED2Ev:00000000 _ZNSt12_Vector_baseI8PathStepSaIS0_EED1Ev
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:578    .text._ZNSt6vectorI8PathStepSaIS0_EED2Ev:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:584    .text._ZNSt6vectorI8PathStepSaIS0_EED2Ev:00000000 _ZNSt6vectorI8PathStepSaIS0_EED2Ev
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EED2Ev:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:584    .text._ZNSt6vectorI8PathStepSaIS0_EED2Ev:00000000 _ZNSt6vectorI8PathStepSaIS0_EED1Ev
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:627    .text._ZNSt15__new_allocatorI8PathStepE8allocateEjPKv:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:633    .text._ZNSt15__new_allocatorI8PathStepE8allocateEjPKv:00000000 _ZNSt15__new_allocatorI8PathStepE8allocateEjPKv
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:680    .text._ZNSt15__new_allocatorI8PathStepE8allocateEjPKv:00000024 $d
.ARM.extab.text._ZNSt15__new_allocatorI8PathStepE8allocateEjPKv:00000000 $d
.ARM.exidx.text._ZNSt15__new_allocatorI8PathStepE8allocateEjPKv:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:687    .rodata._ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_.str1.4:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:691    .text._ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:697    .text._ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_:00000000 _ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1014   .text._ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_:000000d0 $d
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1021   .text._ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1027   .text._ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_:00000000 _ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EE9push_backERKS0_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1114   .text._ZN4Path11addStraightEf:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1120   .text._ZN4Path11addStraightEf:00000000 _ZN4Path11addStraightEf
.ARM.extab.text._ZN4Path11addStraightEf:00000000 $d
.ARM.exidx.text._ZN4Path11addStraightEf:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1254   .text._ZN4Path7addTurnE8StepType:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1260   .text._ZN4Path7addTurnE8StepType:00000000 _ZN4Path7addTurnE8StepType
.ARM.exidx.text._ZN4Path7addTurnE8StepType:00000000 $d
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 196


C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1338   .rodata._ZNSt6vectorI8PathStepSaIS0_EE7reserveEj.str1.4:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1342   .text._ZNSt6vectorI8PathStepSaIS0_EE7reserveEj:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1348   .text._ZNSt6vectorI8PathStepSaIS0_EE7reserveEj:00000000 _ZNSt6vectorI8PathStepSaIS0_EE7reserveEj
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1520   .text._ZNSt6vectorI8PathStepSaIS0_EE7reserveEj:0000006c $d
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EE7reserveEj:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1532   .text._ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1538   .text._ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE:00000000 _ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE
.ARM.exidx.text._ZSt12__niter_baseIPK8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS6_T0_EE:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1556   .text._ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1562   .text._ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE:00000000 _ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE
.ARM.exidx.text._ZSt12__niter_baseIP8PathStepSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1580   .text._ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1586   .text._ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_:00000000 _ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_
.ARM.exidx.text._ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP8PathStepSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1633   .text._ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1639   .text._ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_:00000000 _ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_
.ARM.exidx.text._ZSt16__do_uninit_copyIP8PathStepS1_ET0_T_S3_S2_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1700   .text._ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1706   .text._ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:00000000 _ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_
.ARM.exidx.text._ZSt16__do_uninit_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1785   .text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1791   .text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:00000000 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_
.ARM.exidx.text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEEPS2_ET0_T_SB_SA_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1824   .text._ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_jT_SA_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1830   .text._ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_jT_SA_:00000000 _ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_jT_SA_
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS0_S2_EEEEPS0_jT_SA_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1906   .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EEPT0_PT_S8_S6_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1912   .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EEPT0_PT_S8_S6_:00000000 _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EEPT0_PT_S8_S6_
.ARM.exidx.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIK8PathStepS3_EEPT0_PT_S8_S6_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1987   .text._ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET1_T0_SC_SB_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:1993   .text._ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET1_T0_SC_SB_:00000000 _ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET1_T0_SC_SB_
.ARM.exidx.text._ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET1_T0_SC_SB_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2065   .text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2071   .text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_:00000000 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_
.ARM.exidx.text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPK8PathStepSt6vectorIS2_SaIS2_EEEENS1_IPS2_S7_EEET0_T_SC_SB_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2105   .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEPT0_PT_S7_S5_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2111   .text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEPT0_PT_S7_S5_:00000000 _ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEPT0_PT_S7_S5_
.ARM.exidx.text._ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI8PathStepS3_EEPT0_PT_S7_S5_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2186   .text._ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2192   .text._ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_:00000000 _ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2508   .text._ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_:0000007c $d
.ARM.exidx.text._ZNSt6vectorI8PathStepSaIS0_EEaSERKS2_:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2519   .text._ZN4Path21mergeStraightSegmentsEv:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2525   .text._ZN4Path21mergeStraightSegmentsEv:00000000 _ZN4Path21mergeStraightSegmentsEv
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2769   .text._ZN4Path21mergeStraightSegmentsEv:00000090 $d
.ARM.extab.text._ZN4Path21mergeStraightSegmentsEv:00000000 $d
.ARM.exidx.text._ZN4Path21mergeStraightSegmentsEv:00000000 $d
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2794   .text._ZN4Path12compressPathEv:00000000 $t
C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s:2800   .text._ZN4Path12compressPathEv:00000000 _ZN4Path12compressPathEv
.ARM.extab.text._ZN4Path12compressPathEv:00000000 $d
.ARM.exidx.text._ZN4Path12compressPathEv:00000000 $d
                           .group:00000000 _ZNSt15__new_allocatorI8PathStepED5Ev
                           .group:00000000 _ZNSt12_Vector_baseI8PathStepSaIS0_EED5Ev
                           .group:00000000 _ZNSt6vectorI8PathStepSaIS0_EED5Ev

UNDEFINED SYMBOLS
_ZSt20__throw_length_errorPKc
ARM GAS  C:\Users\hanaj\AppData\Local\Temp\ccG29VDr.s 			page 197


__aeabi_unwind_cpp_pr0
_ZdlPvj
_Znwj
_ZSt28__throw_bad_array_new_lengthv
_ZSt17__throw_bad_allocv
__aeabi_unwind_cpp_pr1
memmove
__cxa_end_cleanup
__gxx_personality_v0
